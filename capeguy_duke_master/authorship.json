[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    mainClassName \u003d \"duke.main.Launcher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 41,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Calendar Command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Find Deadline and Event Tasks that falls on a given date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Deadline Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates a Deadline Task which is a Task that has a due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Delete Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Deletes a given Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Done Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Marks a given Task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Event Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates an Event Task which is happening on a given date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Find Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Find Task(s) that contains given keyword(s) in it\u0027s description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### List Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "List down all Tasks in the To Do List (if any)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Snooze Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Snooze a given Task which supports the Snooze functionality. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### Todo Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates a Todo Task with a description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `calendar` - invoke the Calendar Command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Find Deadline and Events Tasks that falls on a given date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`calendar 12/12/2019`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Here are the events/deadlines in your list on 12 December 2019`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`3. [E][✓] Birthday Party (on: 12 December 2019, 6:00 PM)`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `deadline` - invoke the Deadline Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates a Deadline Task which is a Task that has a due date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`deadline CS2103T iP /by 12/12/2019 1800`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Got it. I\u0027ve added this task:  `"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`[D][✗] CS2103T iP (by: 12/12/2019 6:00 PM)  `"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Now you have 5 tasks in the list.`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `delete` - invoke the Delete Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Deletes a given Task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Noted. I\u0027ve removed this task:  `"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`[D][✗] CS2103T iP (by: 12/12/2019 6:00 PM)`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Now you have 4 tasks in the list.`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `done` - invoke the Done Command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Marks a given Task as done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Nice! I\u0027ve marked this task as done:  `"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` \t[✓] Birthday Party (on: 12 December 2019, 6:00 PM`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": " \t"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `event` - invoke the Event Command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates an Event Task which is happening on a given date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`event Birthday Party /on 12/12/2019 1800`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Got it. I\u0027ve added this Event:  `"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` \t[E][✗] Birthday Party (on: 12 December 2019, 6:00 PM)`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` Now you have 5 tasks in the list.`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `find` - invoke the Find Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Find Task(s) that contains given keyword(s) in it\u0027s description."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`find Buy`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Here are the matching tasks in your list:  `"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` \t1. [T][✗] Buy Apples  `"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` \t2. [T][✗] Buy Oranges`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": " \t"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `list` - invoke the List Command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "List down all Tasks in the To Do List (if any)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Here are the tasks in your list:  `"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` 1.[T][✗] Buy Apples`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` 2.[E][✓] Birthday Party (on: 12 December 2019, 6:00 PM)`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` 3.[T][✗] Buy Oranges`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": " "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `snooze` - invoke the Snooze Command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Snooze a given Task which supports the Snooze functionality. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`snooze 2 12/12/2020 1500`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Noted. I\u0027ve snoozed this task:  `"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` [D][✓] this project (by: 12 December 2020, 3:00 PM)`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": "### `todo` - invoke the Todo Command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Creates a Todo Task with a description."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`todo Get a Job`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "capeguy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "capeguy"
        },
        "content": "`Got it. I\u0027ve added this task:  `"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` \t[T][✗] Get a Job `"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "capeguy"
        },
        "content": "` Now you have 1 task in the list.`"
      }
    ],
    "authorContributionMap": {
      "capeguy": 151,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList.saveTasks();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.end();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12
    }
  },
  {
    "path": "src/main/java/duke/command/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String calendarDateString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.parse(calendarDateString, DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        List\u003cString\u003e calendarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (task.getClass().equals(Deadline.class)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                LocalDate taskDate \u003d ((Deadline) task).by.toLocalDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (taskDate.equals(calendarDate)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    calendarList.add(task.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } else if (task.getClass().equals(Event.class)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                LocalDate taskDate \u003d ((Event) task).at.toLocalDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (taskDate.equals(calendarDate)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    calendarList.add(task.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (calendarList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.calendarNoItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.calendarDisplayItems(calendarDate, taskList.printTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList.clearTasks();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // Ensure that the TaskList has been emptied"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assert(taskList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.tasksCleared();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 14
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Abstract class for Commands in Duke application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Enum of valid commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public enum CommandType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        BYE, DEADLINE, DELETE, DONE, EVENT, LIST, TODO, CALENDAR, CLEAR, FIND, SNOOZE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingDeadlineParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DeadlineCommand extends TaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String param) throws MissingDescriptionException,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        MissingDeadlineParamException, InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (param.equals(\"\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else if (!param.contains(\" /by \")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new MissingDeadlineParamException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String[] params \u003d param.split(\" /by \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Task t \u003d new Deadline(params[0], params[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (addTask(taskList, t)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.taskAdded(t, taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String index) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.taskDeleted(taskList.deleteTask(index), taskList);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (InvalidArgumentException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.print(e);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String index) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.taskMarkedAsDone(taskList.markAsDone(index));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (InvalidArgumentException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.print(e);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 16
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingDeadlineParamException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingEventParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class EventCommand extends TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String param) throws MissingDescriptionException"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        , MissingEventParamException, InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (param.equals(\"\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else if (!param.contains(\" /at \")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new MissingEventParamException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String[] params \u003d param.split(\" /at \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Task t \u003d new Event(params[0], params[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (addTask(taskList, t)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.taskAdded(t, taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String... searchTerms) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (String searchTerm : searchTerms) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    if (!tasks.contains(task)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.printFindResults(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 25
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.printNoTasks();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.printTasks(taskList.printTaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/command/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.SnoozeInvalidEventTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String param) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String[] params \u003d param.split(\" \", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            int index \u003d Integer.parseInt(params[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Task task \u003d taskList.getTask(index - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter inputDtf \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            LocalDateTime outputDt \u003d LocalDateTime.parse(params[1], inputDtf);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter outputDtf \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            LocalDateTime datetime \u003d LocalDateTime.parse(outputDt.format(outputDtf), DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            switch (task.getClass().getName()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case \"duke.task.Event\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ((Event) task).snooze(datetime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Ui.taskSnoozed(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case \"duke.task.Deadline\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ((Deadline) task).snooze(datetime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Ui.taskSnoozed(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                throw new SnoozeInvalidEventTypeException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw exception;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 43
    }
  },
  {
    "path": "src/main/java/duke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class TaskCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean addTask(TaskList taskList, Task t) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList.addTask(t) \u003e\u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 10
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.MissingDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class TodoCommand extends TaskCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static boolean run(TaskList taskList, String param) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (param.equals(\"\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Task t \u003d new ToDo(param);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (addTask(taskList, t)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.taskAdded(t, taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 20
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Abstract Exception to be used for the Duke application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when an Invalid Argument is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! That\u0027s an invalid argument. Please check your inputs and try again!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when an Invalid Argument is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! That\u0027s an invalid format for date and time. Please use the following format: 2/12/2019 2000!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingDeadlineParamException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when there is a Missing Parameter for the Deadline Command is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MissingDeadlineParamException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! Remember to use \\\"/by\\\" for Deadlines.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when a missing description is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! The description cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingEventParamException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when there is a Missing Parameter for the Event Command is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MissingEventParamException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! Remember to use \\\"/at\\\" for Events.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/SnoozeInvalidEventTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when there is an attempt to Snooze a Task which does not support Snoozing"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class SnoozeInvalidEventTypeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! This task does not support snoozing. Please check your inputs and try again!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Custom Exception to be used when an Unknown Command is encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A String representation of the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 15
    }
  },
  {
    "path": "src/main/java/duke/main/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 60
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Main application class for a To Do List Application"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Storage object used to store TaskList object into a Storage mechanism (e.g. File)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * TaskList object used to store Tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for Duke class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.showLoadingError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Function to run Duke object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.start();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        boolean run \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        while (run) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                run \u003d Parser.parseCommand(Ui.getInput(), taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Ui.printException(ex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Function to run Duke object through GUI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param input String input from GUI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void runCommand(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            boolean run \u003d Parser.parseCommand(input, taskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (!run) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Executors.newSingleThreadScheduledExecutor().schedule(() -\u003e System.exit(0), 2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.printException(ex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Default function to be invoked"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param args Optional String command line arguments"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.runCommand(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return Ui.getBuffer();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 110,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 12
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            stage.setTitle(\"Duke Task Management System\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 33
    }
  },
  {
    "path": "src/main/java/duke/main/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.start();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DialogBox.getDukeDialog(Ui.getBuffer(), dukeImage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 56
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.CalendarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Class that parses user inputs into executed commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Parses user input to run respective commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param input String user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param taskList TaskList object containing list of Tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return boolean true if ByeCommand is invoked by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    static boolean parseCommand(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String param;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            String[] tokens \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Command.CommandType command \u003d Command.CommandType.valueOf(tokens[0].toUpperCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (tokens.length \u003e 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                param \u003d tokens[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                param \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ClearCommand.run(taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                TodoCommand.run(taskList, param);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                DeadlineCommand.run(taskList, param);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                EventCommand.run(taskList, param);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ByeCommand.run(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                ListCommand.run(taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                DoneCommand.run(taskList, param);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                DeleteCommand.run(taskList, param);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case CALENDAR:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                CalendarCommand.run(taskList, param);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                FindCommand.run(taskList, param.split(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            case SNOOZE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                SnoozeCommand.run(taskList, param);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                throw new UnknownCommandException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "           throw ex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 85
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.EOFException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Class that handles the storage of TaskList object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * String filepath of file used to save and load the TaskList into the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    String filepath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * List of Tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Default constructor for Storage class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for Storage class with file specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param filepath Path of file to be used for storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Loads TaskList records from a specified file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return This Storage object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Storage load() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Get List of Tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return List of Tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Process a file and loads the records into a List of Tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return A List of Tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private List\u003cTask\u003e loadFile() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        FileInputStream fi \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ObjectInputStream oi \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        File file \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            file \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fi \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            oi \u003d new ObjectInputStream(fi);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                Task t \u003d (Task) oi.readObject();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (EOFException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            System.out.println(\"Error initializing stream: \" + e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            // TODO Auto-generated catch block"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (oi !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    oi.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (fi !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    fi.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                System.err.println(ex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void save(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        saveFile(taskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Saves TaskLists to a specified file"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    private void saveFile(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        FileOutputStream fi \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ObjectOutputStream oi \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        File file \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            file \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            fi \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            oi \u003d new ObjectOutputStream(fi);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                oi.writeObject(t);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (EOFException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            e \u003d e;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            System.out.println(\"Error initializing stream: \" + e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (oi !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    oi.close();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                if (fi !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                    fi.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                System.err.println(ex);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 153
    }
  },
  {
    "path": "src/main/java/duke/main/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * TaskList class to handle all operations related to the lists of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    Storage storage \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Default constructor for TaskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for TaskList with Storage support"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param storage Storage object to handle load and save commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList.addAll(storage.getTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Get a Task object based on an integer index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param index Integer index to retrieve task Object from"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Adds a Task object to the list of tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param task Task object to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return Integer index of the Task added in list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int addTask(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList.size() - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Gets the number of tasks in the TaskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return Integer number of tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Marks a given Task as done"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param indexString Index of the task as a String"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return Task object that was marked as done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws InvalidArgumentException when indexString is not a valid integer or points to an invalid item in the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Task markAsDone(String indexString) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            int index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return taskList.get(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Deletes a given Task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param indexString Index of the task as a String"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return The deleted Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @throws InvalidArgumentException when indexString is not a valid integer or points to an invalid item in the list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Task deleteTask(String indexString) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            int index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Task deletedTask \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            taskList.remove(index - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a numbered list of current Tasks in the TaskList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return String output"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cString\u003e printTaskList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            output.add((i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Gets the list of Tasks in TaskList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return List of Tasks in TaskList"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Clears all current tasks in TaskList"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean clearTasks() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean saveTasks() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Ui.printException(ex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 131
    }
  },
  {
    "path": "src/main/java/duke/main/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Class to handle all input and output interactions with the User"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Can be expanded to handle internationalisation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    static String buffer \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Scanner object to get User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Display message of error that occurred during loading"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Error loading Storage module. Your tasks may not be loaded or saved.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out initial prompt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void start() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out ending prompt"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void end() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Get User\u0027s input as a String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return User\u0027s input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a generic object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param object Object to be printed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void print(Object object) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        buffer +\u003d \"\\n\" + object.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a String"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param line String to be printed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void print(String line) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        buffer +\u003d \"\\n\" + line;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a list of strings"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param lines Strings to be printed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void print(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            print(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating the successful addition of a Task to the TaskList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param task Task that was added"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param taskList TaskList that the task was added to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void taskAdded(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Got it. I\u0027ve added this task:\\n\" + task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Now you have \" + taskList.size() + \" task\" + (taskList.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating the successfully marking of a Task as done"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param task Task that was marked as done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void taskMarkedAsDone(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating the successful deletion of a Task to the TaskList"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param task Task that was deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param taskList TaskList that the task was deleted from"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void taskDeleted(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Now you have \" + taskList.size() + \" task\" + (taskList.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating the successful clearing of all Tasks in the TaskList"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void tasksCleared() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"All tasks have been cleared\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating that there are no Tasks for a given date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void calendarNoItems() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"No matching events/deadlines found.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out the list of Deadlines and Events occurring on a given date"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param calendarDate Date in question"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param lines String representation of the Deadlines and Events to be printed"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void calendarDisplayItems(LocalDate calendarDate, List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Here are the events/deadlines in your list on \" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            calendarDate.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\")) + \":\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(lines);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out a message indicating that there are no Tasks in the TaskList."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void printNoTasks() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"You have no tasks in your list.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out the list of Tasks in TaskList"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param lines String representation of the Tasks to be printed"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void printTasks(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(lines);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out the list of Tasks in TaskList which matches a search term"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param tasks String representation of the Tasks to be printed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void printFindResults(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            print(\"There are no matching tasks in your list\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            print(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                print(task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out the String representation of a DukeException"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param ex DukeException object to be printed"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void printException(DukeException ex) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(ex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Prints out the String representation of a DukeException"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param ex Exception object to be printed"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void printException(Exception ex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(ex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static void taskSnoozed(Task task) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(\"Noted. I\u0027ve snoozed this task:\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        print(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public static String getBuffer() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        String buffer \u003d Ui.buffer;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Ui.buffer \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // Ensure that the UI buffer is cleared"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assert(Ui.buffer.isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        // Ensure that there is at least some data retrieved from the buffer"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assert(!buffer.isEmpty());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 195
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Event class that extends Task, by adding a new parameter called \"on\", to dictate when the deadline is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Variable to store when the Deadline is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public LocalDateTime by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for Deadline object, specifying the description and datetime at which the deadline is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param description Description of the Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param by String representation of Date \u0026 Time at which the deadline is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Deadline(String description, String by) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter inputDtf \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            LocalDateTime outputDt \u003d LocalDateTime.parse(by, inputDtf);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter outputDtF \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.by \u003d LocalDateTime.parse(outputDt.format(outputDtF),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new InvalidDateTimeFormatException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the Task object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return a String representation of the Task object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            + by.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean snooze(LocalDateTime datetime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.by \u003d datetime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Event class that extends Task, by adding a new parameter called \"at\", to dictate when the event is happening"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Variable to store when the Event is happening at"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public LocalDateTime at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for Event object, specifying the description and datetime at which the event is happening"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param description Description of the Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param at String representation of Date \u0026 Time at which the event is happening"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Event(String description, String at) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter inputDtf \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            LocalDateTime outputDt \u003d LocalDateTime.parse(at, inputDtf);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            DateTimeFormatter outputDtf \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            this.at \u003d LocalDateTime.parse(outputDt.format(outputDtf), DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        } catch (DateTimeException exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            throw new InvalidDateTimeFormatException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the Task object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return a String representation of the Task object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mm a\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean snooze(LocalDateTime datetime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.at \u003d datetime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * Base class for Tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class Task implements java.io.Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Description of Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Boolean to indicate true if task is Done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor of Task class, creates a Task object with given description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param description String description of Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Helper method to get Task status icon depending on whether task is done or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return String output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Marks the current Task as done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return True if success"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns the description of this Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return The description of this Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "capeguy"
        },
        "content": "  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the Task object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return a String representation of the Task object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 58
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": " * A basic extension of Task class, with no added parameters"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Constructor for ToDo with description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @param description Desription of ToDo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * Returns a String representation of the Task object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     * @return a String representation of the Task object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "capeguy": 19
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void addDeadlineTest() throws InvalidArgumentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test Deadline Item\", \"10/10/2020 1800\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(\"[D][✘] Test Deadline Item (by: 10 October 2020, 6:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void addDoneDeadlineTest() throws InvalidArgumentException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test Deadline Item\", \"10/10/2020 1800\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(\"[D][✓] Test Deadline Item (by: 10 October 2020, 6:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void addInvalidDateDeadlineTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        Assertions.assertThrows(InvalidArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Test Deadline Item\", \"13/13/2020 1800\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 30
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void addTodoTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Test ToDo Item\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(\"[T][✘] Test ToDo Item\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    public void addDoneTodoTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Test ToDo Item\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "        assertEquals(\"[T][✓] Test ToDo Item\", todo.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "capeguy": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "clear"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "todo Homework"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "event Exam /at 2/12/2019 1800"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "deadline Assignment 1 /by 2/12/2019 1600"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "event Exam /at 2/12/2019 2000"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "calendar 3/12/2019"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": "calendar 2/12/2019"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "capeguy": 25
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "capeguy"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "capeguy"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "capeguy"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "capeguy"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "capeguy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "capeguy"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "capeguy"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "capeguy"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "capeguy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "capeguy"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "capeguy"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "capeguy"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "capeguy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "capeguy"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "capeguy"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "capeguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "capeguy"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "capeguy"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "capeguy"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "capeguy"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "capeguy"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "capeguy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "capeguy"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "capeguy": 34
    }
  }
]
