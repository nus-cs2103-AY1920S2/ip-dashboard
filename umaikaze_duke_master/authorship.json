[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "group \u0027umaikaze.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    testImplementation(\u0027junit:junit:4.13\u0027)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveVersion \u003d \"0.1.1\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    mainClassName \u003d \"umaikaze.duke.Launcher\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 31,
      "-": 17
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 23
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Duke object that serves as an association between the Ui, Storage and TaskList"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    Storage st;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    TaskList tl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Duke() throws IOException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        System.out.println(\"Working Directory \u003d \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.getProperty(\"user.dir\") + \"\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        st \u003d new Storage(\"./data/data.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tl \u003d new TaskList(st.loadFile());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getResponse(String line) throws DukeException, DateTimeParseException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        System.out.println(\"Input received: \" + line);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.markDone(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.delete(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.getFindString(words);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.addTask(words);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!(words[0].equals(\"list\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            tl.saveFile(st);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 46,
      "-": 1
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 7
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Application.launch(Ui.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A library class containing most of the sentences that can be shown on the Ui"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_LOADED \u003d \"how may i serve u today nya?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_EMPTY_SAVE \u003d \"save data is empty, we will start fwesh (・`ω´・)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_GOODBYE \u003d \"bye (・`ω´・) hope to see you again soon!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String BONUS \u003d \"MEOWWWWWWWWWWWWWWWWWW\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String LIST \u003d \"Hewe are the tasks in youw list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String FIND \u003d \"Hewe are the matching tasks in youw list:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"list is empty ^qwq^\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EMPTY_SEARCH_RESULT \u003d \"no matches ^qwq^\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_ADDED \u003d \"Got it ^UωU^ I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_DONE \u003d \"nyice ^;;ω;;^  I\u0027ve mawked this task as donye:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_DELETED \u003d \"nyoted (^・`ω´・^)  I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_BAD_TIME_FORMAT\u003d \"youw date and time fowmat is invalid ^;;w;;^ \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"make suwe to follow d/M/yyyy fowmat followed by optionyal 24 hour time H:mm (^・`ω´・^)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_UNABLE_TO_SAVE_LOAD \u003d \"oh nyo ^;;w;;^  I was unyable to save / load because:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_UNKNOWN_COMMAND \u003d \"OOPS oωo  I\u0027m sowwy, but I don\u0027t knyow what that \" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \"means ^;;ω;;^\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_DESCRIPTION_EMPTY \u003d \"descwiption must nyot be empty \u003ew\u003c\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_TIMING_NOT_FOUND \u003d \"i couwdn\u0027t find the timing in youw instwuctions,\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \" make suwe to specify timing for deadlinye or event with /by and /at\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_TASK_OUT_OF_BOUNDS \u003d \"we don\u0027t have that many tasks \u003eω\u003c\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SEARCH_KEYWORDS \u003d \"keyoword(s) cannyot be empty (^・`ω´・^)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 29
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Paser class locates the description String and parse String into LocalDate and LocalTime"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * from String provided by TaskList class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    char separator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalDate date \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalTime time \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * This constructor is used by TaskList.getTask"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Parser(String[] words) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setDateTime(words);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setDescriptionString(words);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void setDateTime(String[] words) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].equals(\"/by\") || words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"time command recognized\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (words.length \u003e i + 1 \u0026\u0026 (words[i + 1].contains(\"/\") || words[i + 1].contains(\"-\"))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    separator \u003d words[i + 1].contains(\"/\") ? \u0027/\u0027 : \u0027-\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    date \u003d LocalDate.parse(words[i + 1], DateTimeFormatter.ofPattern(\"d\" + separator + \"M\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                            + separator + \"yyyy\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (words.length \u003e i + 2 \u0026\u0026 words[i + 2].contains(\":\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    time \u003d LocalTime.parse(words[i + 2], DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void setDescriptionString(String[] words) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder description \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].charAt(0) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (i + 2 \u003c words.length \u0026\u0026 words[i + 2].contains(\":\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    i +\u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    i +\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            description.append(words[i]).append(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.description \u003d description.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 57
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Storage class saves List\u003cTask\u003e in the directory providing upon initialization"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Loads from file, parse it using StorageParser and returns a new List\u003cTask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Storage(String savePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        saveFile \u003d new File(savePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!saveFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile and path created @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile found @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile created @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds Tasks from list to the data file as specified by saveFile"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * WARNING: In the case where the file is already populated, this method would not delete the original content"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * but simply append new Tasks to the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile(List\u003cTask\u003e list) throws IOException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PrintWriter out \u003d new PrintWriter(saveFile, \"UTF-8\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Task task \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(task.getSaveString()).append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out.print(sb.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns a List\u003cTask\u003e that is parsed from the directory as specified by saveFile"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws DukeException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(saveFile));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String nextLine \u003d br.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] line;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            line \u003d nextLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            while (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                StorageParser p;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                switch (line[0]) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    task \u003d new Todo(line[2]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    System.out.println(\"Loaded a todo:\" + task.getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    p \u003d new StorageParser(line[2], line[3]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    task \u003d new Deadline(p.description, p.date, p.time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    System.out.println(\"Loaded a deadline:\" + task.getDescription());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    p \u003d new StorageParser(line[2], line[3]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    task \u003d new Event(p.description, p.date, p.time);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    System.out.println(\"Loaded an event:\" + task.getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (line[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    task.markDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                list.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                nextLine \u003d br.readLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 89
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * This class is used by Storage.loadFile to read file following the saveString format strictly"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public StorageParser(String description, String timeStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        parseTime(timeStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void parseTime(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] dateTime \u003d str.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            time \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            time \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 31
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Where List\u003cTask\u003e is handled"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Adds, delete, markdone and prints the list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public TaskList(List\u003cTask\u003e loadedList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list \u003d loadedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSizeMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"Nyow you have \" + list.size() + \" tasks in the wist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Task getTask(String[] line) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String cmd \u003d line[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Parser p \u003d new Parser(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Deadline(p.description, p.date, p.time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Event(p.description, p.date, p.time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Todo(p.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (p.description.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!cmd.equals(\"todo\") \u0026\u0026 p.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TIMING_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds a new Task object to list, as specified by"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param line, a String array already split"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns the Task description in String when successful"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String addTask(String[] line) throws DukeException{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task newTask \u003d getTask(line);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assert !newTask.getDescription().equals(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_ADDED + \"\\n\\t\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + newTask + \"\\n\\t\" + getSizeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param index starts from 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String markDone(int index) throws DukeException{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TASK_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_DONE + \"\\n\\t\" + task;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String delete(int index) throws DukeException{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TASK_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.remove(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_DELETED + \"\\n\\t\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + task + \"\\n\\t\" + getSizeMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private List\u003cTask\u003e find(String[] line) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder keyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c line.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (i !\u003d line.length - 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                keyString.append(line[i]).append(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                keyString.append(line[i]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (task.getDescription().contains(keyString.toString())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private String getBasicListString(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(i).append(\". \").append(list.get(i - 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (i !\u003d list.size()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                sb.append(\"\\n\\t\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getFindString(String[] line) throws DukeException{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_EMPTY_SEARCH_KEYWORDS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(Message.FIND + \"\\n\\t\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e findResults \u003d find(line);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (findResults.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(Message.EMPTY_SEARCH_RESULT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(getBasicListString(findResults));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile(Storage st) throws IOException, DukeException{"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        st.saveFile(list);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(Message.LIST + \"\\n\\t\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(Message.EMPTY_LIST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(getBasicListString(list));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 146
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Main Ui which the user interact with, the Application launched by Launcher"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Ui extends Application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Stage mainStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image systemImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaSystem.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image meowImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMeow.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    PrintStream out;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        mainStage \u003d stage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setUiElements();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setUiFormatting(stage, mainLayout);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (duke.tl.list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                showReply(Message.GREETING_EMPTY_SAVE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                showReply(Message.GREETING_LOADED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showError(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out.print(\"Duke class initialized \" + duke);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * While instantiating the Ui, header is printed automatically"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Ui() throws UnsupportedEncodingException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out \u003d new PrintStream(System.out, true, \"UTF-8\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Prints given String to console"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param line Only supports single line, when there are multiple lines, add your own \\n\\t at the end of every"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *             line (Except the last line)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void showReply(String line) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (line !\u003d null \u0026\u0026 !line.equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Label dukeText \u003d new Label(line);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            dialogContainer.getChildren().add(new DialogBox(dukeText, new ImageView(dukeImage)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Same as showReply but different divider"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Label errorLabel \u003d getDialogLabel(error);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        errorLabel.setStyle(\"-fx-color: red\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.getChildren().add(new DialogBox(errorLabel, new ImageView(systemImage)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void setUiElements() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void setUiFormatting(Stage stage, AnchorPane mainLayout) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.setTitle(\"Cat Person\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void setAction() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void handleUserInput() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String userString \u003d userInput.getText();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (userString.equals(\"\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Label userText \u003d new Label(userString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.getChildren().add(new DialogBox(userText, new ImageView(userImage)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String reply \u003d \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (userString.toLowerCase().contains(\"no you don\u0027t\") || userString.toLowerCase().contains(\"no you dont\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                popEasterEgg();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (userString.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                hideUi();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            reply \u003d duke.getResponse(userString);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }  catch (DukeException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"Duke exception caught in handleUserInput\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showError(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"DateTimeParseException caught in handleUserInput\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showError(e.getMessage() + \"\\n\" + Message.EXCEPTION_BAD_TIME_FORMAT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"IOException caught in handleUserInput\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showError(Message.EXCEPTION_UNABLE_TO_SAVE_LOAD + \"\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        showReply(reply);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void popEasterEgg() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.getChildren().add(new DialogBox("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                new Label(Message.BONUS), new ImageView(meowImage)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void hideUi() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        showReply(Message.GREETING_GOODBYE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.millis(1000));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        delay.setOnFinished( event -\u003e mainStage.close() );"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 215
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"D|\" + (isDone ? 1 : 0) + \"|\" + description + \"|\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm)\")) : \")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"EEEE, d MMM yyyy\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm)\")) : \")\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 30
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"E|\" + (isDone ? 1 : 0) + \"|\" + description + \"|\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm)\")) : \")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"EEEE, d MMM yyyy\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm)\")) : \")\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 30
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Base class for all Tasks"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * TBD: Use an abstract class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * WARNING: Dummy method for polymorphism, do not use!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        throw new DukeException(\"Nyot awwowed to save basic task\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @return The status and description of the task only, so it can be called in child classes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \" + description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 41
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"T|\" + (isDone ? 1 : 0) + \"|\" + description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 17
    }
  },
  {
    "path": "src/test/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "T|0|TestTodo"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 1
    }
  },
  {
    "path": "src/test/java/umaikaze/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile_normalInput_Todo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String dir \u003d \"data.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.add(new Todo(\"TestTodo\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Storage storage \u003d new Storage(dir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        storage.saveFile(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(dir));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(\"T|0|TestTodo\", br.readLine());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void loadFile_normalInput_Todo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String dir \u003d \"data.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Storage storage \u003d new Storage(dir);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list \u003d storage.loadFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(\"[T][\\u2718] TestTodo\", list.get(0).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34
    }
  },
  {
    "path": "src/test/java/umaikaze/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void task_normalInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task t \u003d new Task(\"Test Description\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(t.toString(), \"[\\u2718] Test Description\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void markDone_normalInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task t \u003d new Task(\"Test Description\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        t.markDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(t.toString(), \"[\\u2713] Test Description\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "hewwo fwom"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " _____     _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|     |___| |_ ___ ___ ___ ___ ___ ___"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|   --| .\u0027|  _| . | -_|  _|_ -| . |   |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|_____|__,|_| |  _|___|_| |___|___|_|_|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "              |_|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "how may i sewve u today nya?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tlist is empty qwq"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[T][✘] take care of kyaru"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 1 tasks in the wist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✘] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 2 tasks in the wist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 3 tasks in the wist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "DukeException:  ************************************************************"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tOOPS owo  I\u0027m sowwy, but I don\u0027t knyow what that means :-("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t1. [T][✘] take care of kyaru"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t2. [D][✘] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t3. [E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyice ;;w;;  I\u0027ve mawked this task as donye:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[T][✓] take care of kyaru"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyice ;;w;;  I\u0027ve mawked this task as donye:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✓] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyoted (・`ω´・)  I\u0027ve wemuvd this task:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✓] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 2 tasks in the wist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t1. [T][✓] take care of kyaru"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t2. [E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tBye. Hope to see you again soon \u003ew\u003c"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 56
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo take care of kyaru"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline refill catfood /by 25/1/2020 18:30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event kishi-san meeting /at 31/1/2020"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "you don\u0027t know what this means"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo that has a timing /at 1/2/2020 18:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline /by 20/1/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event /at 5/2/2020 6:00 typed in wrong order"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 17
    }
  },
  {
    "path": "text-ui-test/inputListOnly.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2
    }
  },
  {
    "path": "text-ui-test/runTestRead.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c inputListOnly.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@pause"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@pause"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "text-ui-test/runtestFresh.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM delete output and data from previous run"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "if exist ..\\src\\data\\data.txt del ..\\src\\data\\data.txt"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10
    }
  }
]
