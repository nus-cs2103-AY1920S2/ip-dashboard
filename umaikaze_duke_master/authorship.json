[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "group \u0027umaikaze.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    testImplementation(\u0027junit:junit:4.13\u0027)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveVersion \u003d \"1.0.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    mainClassName \u003d \"umaikaze.duke.Launcher\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 31,
      "-": 17
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "E|0|tea party|30/3/2020 13:00 2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "E|0|code party|30/3/2020 14:00 3"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "E|0|food party |30/3/2020 18:00 3"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "# Cat Person User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "![Screenshot](/docs/Ui.png)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "How to raise a boring cat person :cat2:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### Adding Tasks "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "The cat person can handle record tasks and help keep track of them for you in case you forget them yourself. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### Marking Tasks as done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "When you feel motivated and got something done, you can ask the cat person to mark it as done for some extra dopamine."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "When you realise a task is too impossible to be done or just do not feel like doing it anymore, you can tell the cat person to delete it to stop it from cluttering your screen."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### Scheduling"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "If you are having a hard time visualizing how your day is going to go, you can ask the cat person to help you visualize schedule of a specific date. The events will be presented in chronological order. Note this feature only supports events with durations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### Showing Conflicts"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "When asked to show the schedule of a specific date, if one event starts before the previous event ends, it will be shown in red."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `todo` - Adds a task with description and state only."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`todo nothing`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Got it ^UωU^ I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`[T][✘] nothing`\u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Nyow you have 5 tasks in the wist.`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `deadline` - Adds a task with description, date, state and optional time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `deadline TASK_DESCRIPTION /by DATE [TIME]`\u003cbr/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Where DATE needs to be in d/M/yyyy format and TIME needs to be in H:mm format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`deadline finish user guide /by 19/2/2020 23:59`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Got it ^UωU^ I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`[D][✘] finish user guide (by: Wednesday 19 Feb 2020 23:59)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Nyow you have 6 tasks in the wist.`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `event` - Adds a task with description, date, state, optional time and duration."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `event TASK_DESCRIPTION /by DATE [TIME] [/for DURATION]`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Where DATE needs to be in d/M/yyyy format and TIME needs to be in H:mm format and DURATION needs to be in integer number of hours.\u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "When DURATION is specified, TIME must have been specified also."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`event tea party /at 25/2/2020 13:00 /for 2`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Got it ^UωU^ I\u0027ve added this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`[E][✘] tea party (at: Tuesday 25 Feb 2020 13:00 for PT2H)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Nyow you have 7 tasks in the wist.`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `delete` - Removes a task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "INDEX starts from 1, must not exceed the current number of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`delete 7`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`nyoted (^・\u0027ω\u0027・^)  I\u0027ve removed this task:`\u003cbr/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`[E][✘] tea party (at: Tuesday 25 Feb 2020 13:00 for PT2H)`\u003cbr/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Nyow you have 6 tasks in the wist.`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `list` - Lists all current tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "![List](/docs/List.png)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `find` - Find tasks with matching substring."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `find SUBSTRING`\u003cbr/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`find party`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "![Find](/docs/Find.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `schedule` - Show schedule of the specified date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Format: `schedule DATE`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Where DATE needs to be in d/M/yyyy format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`schedule 30/3/2020`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "![Schedule](/docs/Schedule.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `bye` - Quits the program"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "![Goodbye](/docs/Goodbye.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "### `no you dont` or `no you don\u0027t` - Shows some surprises"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 108,
      "-": 13
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Duke object that serves as an association between the Ui, Storage and TaskList"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Storage st;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public TaskList tl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Duke() throws IOException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        System.out.println(\"Working Directory \u003d \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.getProperty(\"user.dir\") + \"\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        st \u003d new Storage(\"./data/data.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tl \u003d new TaskList(st.loadFile());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getResponse(String line) throws DukeException, DateTimeParseException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        System.out.println(\"Input received: \" + line);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.markDone(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.delete(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.getFindString(words);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            response \u003d tl.addTask(words);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!(words[0].equals(\"list\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            tl.saveFile(st);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 46,
      "-": 1
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 7
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Main Ui which the user interact with, the Application launched by Launcher"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.ui.MainWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// Solution adapted from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"Duke class initialized \" + duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setMainStage(stage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setTitle(\"Cat Person\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 36
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A library class containing most of the sentences that can be shown on the Ui"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_LOADED \u003d \"how may i serve u today nya?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_EMPTY_SAVE \u003d \"save data is empty, we will start fwesh (・`ω´・)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GREETING_GOODBYE \u003d \"bye (・`ω´・) hope to see you again soon!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String BONUS \u003d \"MEOWWWWWWWWWWWWWWWWWW\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String LIST \u003d \"Hewe are the tasks in youw list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String FIND \u003d \"Hewe are the matching tasks in youw list:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"list is empty ^qwq^\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EMPTY_SEARCH_RESULT \u003d \"no matches ^qwq^\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EMPTY_SCHEDULE \u003d \"this day is empty (・`ω´・)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_ADDED \u003d \"Got it ^UωU^ I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_DONE \u003d \"nyice ^;;ω;;^  I\u0027ve mawked this task as donye:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TASK_DELETED \u003d \"nyoted (^・`ω´・^)  I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_BAD_TIME_FORMAT\u003d \"youw date and time fowmat is invalid ^;;w;;^\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"make suwe to follow d/M/yyyy fowmat followed by optionyal 24 hour time H:mm (^・`ω´・^)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_UNABLE_TO_SAVE_LOAD \u003d \"oh nyo ^;;w;;^  I was unyable to save / load because:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_UNKNOWN_COMMAND \u003d \"OOPS oωo  I\u0027m sowwy, but I don\u0027t knyow what that \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \"means ^;;ω;;^\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_DESCRIPTION_EMPTY \u003d \"descwiption must nyot be empty \u003ew\u003c\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_TIMING_NOT_FOUND \u003d \"i couwdn\u0027t find the timing in youw instwuctions,\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \" make suwe to specify timing for deadlinye or event with /by and /at\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_TASK_OUT_OF_BOUNDS \u003d \"we don\u0027t have that many tasks \u003eω\u003c\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_EMPTY_SEARCH_KEYWORDS \u003d \"keyoword(s) cannyot be empty (^・`ω´・^)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_DURATION_BUT_NO_TIMING \u003d \"You cannyot set event duration if you\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \" don\u0027t input the event start time (^・`ω´・^)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String EXCEPTION_DURATION_NOT_INTEGER \u003d \"onwly integer hours allyowed ^;;w;;^\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 33
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Paser class locates the description String and parse String into LocalDate and LocalTime"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * from String provided by TaskList class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param words: Split command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws DukeException: If command does not follow standards"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws DateTimeParseException: If date or time does not follow standards"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Task parse(String[] words) throws DukeException, DateTimeParseException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String cmd \u003d words[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String description \u003d findDescriptionString(words);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalDate date \u003d toDate(findDateString(words));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalTime time \u003d toTime(findTimeString(words));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Duration duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            duration \u003d toDuration(findDurationString(words));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Event(description, date, time, duration);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static LocalDate toDate(String string) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return string \u003d\u003d null ? null : LocalDate.parse(string, string.contains(\"-\") ? DateTimeFormatter.ofPattern(\"d-M-yyyy\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                : DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static LocalTime toTime(String string) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return string \u003d\u003d null ? null : LocalTime.parse(string, DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Duration toDuration(String string) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return string \u003d\u003d null ? null : Duration.ofHours(Long.parseLong(string));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_DURATION_NOT_INTEGER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static String findDateString(String[] words) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].equals(\"/by\") || words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"date command recognized\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (words.length \u003e i + 1 \u0026\u0026 (words[i + 1].contains(\"/\") || words[i + 1].contains(\"-\"))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    return words[i + 1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static String findTimeString(String[] words) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].equals(\"/by\") || words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"time command recognized\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (words.length \u003e i + 2 \u0026\u0026 words[i + 2].contains(\":\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    return words[i + 2];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static String findDurationString(String[] words) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].equals(\"/for\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"duration command recognized\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (words.length \u003e i + 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    return words[i + 1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static String findDescriptionString(String[] words) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder description \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[i].charAt(0) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            description.append(words[i]).append(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return description.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 117
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Storage class saves List\u003cTask\u003e in the directory providing upon initialization"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Loads from file, parse it using StorageParser and returns a new List\u003cTask\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Storage(String savePath) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        saveFile \u003d new File(savePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!saveFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile and path created @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile found @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"saveFile created @: \" + saveFile.getAbsolutePath());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds Tasks from list to the data file as specified by saveFile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * WARNING: In the case where the file is already populated, this method would not delete the original content"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * but simply append new Tasks to the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile(List\u003cTask\u003e list) throws IOException, DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PrintWriter out \u003d new PrintWriter(saveFile, \"UTF-8\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Task task \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(task.getSaveString()).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out.print(sb.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns a List\u003cTask\u003e that is parsed from the directory as specified by saveFile"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws DukeException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(saveFile));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String nextLine \u003d br.readLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] line;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            while (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                list.add(StorageParser.parse(nextLine.split(\"\\\\|\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                nextLine \u003d br.readLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 68
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * This class is used by Storage.loadFile to read file following the saveString format strictly"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    Duration duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private StorageParser(String description, String timeStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        parseTime(timeStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Task parse(String[] words) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StorageParser p;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            switch (words[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                task \u003d new Todo(words[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"Loaded a todo:\" + task.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                p \u003d new StorageParser(words[2], words[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                task \u003d new Deadline(p.description, p.date, p.time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"Loaded a deadline:\" + task.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                p \u003d new StorageParser(words[2], words[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                task \u003d new Event(p.description, p.date, p.time, p.duration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                System.out.println(\"Loaded an event:\" + task.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                task.markDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"Parsing failed, skipping line\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void parseTime(String str) throws DateTimeParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] dateTime \u003d str.split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            time \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else if (dateTime.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            time \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            date \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            time \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            duration \u003d Duration.ofHours(Long.parseLong(dateTime[2]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 73
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Where List\u003cTask\u003e is handled"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Adds, delete, markdone and prints the list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public TaskList(List\u003cTask\u003e loadedList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list \u003d loadedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSizeMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"Nyow you have \" + list.size() + \" tasks in the wist.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public int size() { return list.size(); };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds a new Task object to list, as specified by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param words, a String array already split"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns the Task description in String when successful"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String addTask(String[] words) throws DukeException{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task newTask \u003d Parser.parse(words);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assert !newTask.getDescription().equals(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_ADDED + \"\\n\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + newTask + \"\\n\\t\" + getSizeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param index starts from 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String markDone(int index) throws DukeException{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TASK_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_DONE + \"\\n\\t\" + task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String delete(int index) throws DukeException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TASK_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.remove(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Message.TASK_DELETED + \"\\n\\t\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + task + \"\\n\\t\" + getSizeMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private List\u003cTask\u003e find(String[] line) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder keyString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c line.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (i !\u003d line.length - 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                keyString.append(line[i]).append(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                keyString.append(line[i]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (task.getDescription().contains(keyString.toString())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private String getBasicListString(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(i).append(\". \").append(list.get(i - 1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (i !\u003d list.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                sb.append(\"\\n\\t\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getFindString(String[] line) throws DukeException{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_EMPTY_SEARCH_KEYWORDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(Message.FIND + \"\\n\\t\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e findResults \u003d find(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (findResults.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(Message.EMPTY_SEARCH_RESULT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(getBasicListString(findResults));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile(Storage st) throws IOException, DukeException{"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        st.saveFile(list);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Stream\u003cTask\u003e getListAsStream() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return list.stream();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(Message.LIST + \"\\n\\t\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(Message.EMPTY_LIST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            sb.append(getBasicListString(list));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 124
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time) throws DukeException{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TIMING_NOT_FOUND);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"D|\" + (isDone ? 1 : 0) + \"|\" + description + \"|\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm\")) : \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"EEEE, d MMM yyyy\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm)\")) : \")\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 38
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Event extends Task implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected Duration duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime time, Duration duration) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_TIMING_NOT_FOUND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (duration !\u003d null \u0026\u0026 time \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_DURATION_BUT_NO_TIMING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public LocalTime getTime() { return time; }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public LocalTime getEndTIme() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return time.plus(duration);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getUiString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"H:mm\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \" ~ \" + time.plus(duration).format(DateTimeFormatter.ofPattern(\"H:mm\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"E|\" + (isDone ? 1 : 0) + \"|\" + description + \"|\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm \")) : \"\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (duration !\u003d null ? duration.toString().replaceAll(\"[^\\\\d.]\", \"\") : \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"EEEE, d MMM yyyy\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (time !\u003d null ? time.format(DateTimeFormatter.ofPattern(\" H:mm\")) : \"\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + (duration !\u003d null ? \" for \" + duration.toString() : \")\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public int compareTo(Event other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return time.compareTo(other.time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 66
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Base class for all Tasks"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * TBD: Use an abstract class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Task(String description) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new DukeException(Message.EXCEPTION_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * WARNING: Dummy method for polymorphism, do not use!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        throw new DukeException(\"Nyot awwowed to save basic task\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @return The status and description of the task only, so it can be called in child classes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \" + description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 46
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Todo(String description) throws DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"T|\" + (isDone ? 1 : 0) + \"|\" + description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 19
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/ui/DaySchedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DaySchedule extends VBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    PriorityQueue\u003cEvent\u003e q \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DaySchedule(LocalDate date, Stream\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DaySchedule.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        events.forEach(event -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            q.add(event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.date.setText(date.format(DateTimeFormatter.ofPattern(\"EEEE, d MMM yyyy\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalTime lastEventEndTime \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        while (q.peek() !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Event cur \u003d q.poll();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            EventUi newBox \u003d new EventUi(cur);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (cur.getTime().isBefore(lastEventEndTime)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                newBox.setStyle(\"-fx-background-color: #cc0000;\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            getChildren().add(newBox);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            lastEventEndTime \u003d cur.getEndTIme();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (getChildren().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Label empty \u003d new Label(Message.EMPTY_SCHEDULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            empty.setFont(new Font( \"Comic Sans MS\", 12));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            empty.setWrapText(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            empty.setPadding(new Insets(5, 5, 5, 5));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            getChildren().add(empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 56
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// Solution adapted from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DialogBox extends VBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private HBox hBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialog.setWrappingWidth(360);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        db.hBox.setStyle(\"-fx-background-color: #5F758E; -fx-background-insets: 5; -fx-background-radius: 20;\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void bindWidthProperty(ObservableValue\u003c? extends Number\u003e v) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        hBox.prefWidthProperty().bind(v);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(hBox.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        hBox.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        hBox.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 68
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/ui/EventUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class EventUi extends VBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Label eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EventUi(Event event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/EventUi.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        System.out.println(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        time.setText(event.getUiString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        eventName.setText(event.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 30
    }
  },
  {
    "path": "src/main/java/umaikaze/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Duke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// Solution adapted from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// Color scheme used in this project is generated from https://coolors.co/3b1f2b-dbdfac-5f758e-cc0000-ffebcd"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Stage mainStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image systemImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaSystem.png\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Image meowImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMeow.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.prefWidthProperty().bind(scrollPane.widthProperty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (duke.tl.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(Message.GREETING_EMPTY_SAVE, dukeImage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(Message.GREETING_LOADED, dukeImage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setMainStage(Stage mainStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.mainStage \u003d mainStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        showUserDialog(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (input.toLowerCase().contains(\"no you don\u0027t\") || input.toLowerCase().contains(\"no you dont\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(Message.BONUS, meowImage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            hideUi();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (words[0].equals(\"schedule\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                showSchedule(Parser.toDate(words[1]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } catch (DateTimeParseException | NullPointerException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                showSchedule(LocalDate.now());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }  catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"Duke exception caught in handleUserInput\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(e.getMessage(), systemImage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"DateTimeParseException caught in handleUserInput\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(e.getMessage() + \"\\n\" + Message.EXCEPTION_BAD_TIME_FORMAT, systemImage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            System.out.println(\"IOException caught in handleUserInput\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            showDukeDialog(Message.EXCEPTION_UNABLE_TO_SAVE_LOAD + \"\\n\" + e.getMessage(), systemImage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void showUserDialog(String userText) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DialogBox db \u003d DialogBox.getUserDialog(userText, userImage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        db.bindWidthProperty(dialogContainer.widthProperty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.getChildren().add(db);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Prints given string and image"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param text Only supports single line, when there are multiple lines, add your own \\n\\t at the end of every"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *             line (Except the last line)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void showDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (text !\u003d null \u0026\u0026 !text.equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            DialogBox db \u003d DialogBox.getDukeDialog(text, image);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            db.bindWidthProperty(dialogContainer.widthProperty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            dialogContainer.getChildren().add(db);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void hideUi() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        showDukeDialog(Message.GREETING_GOODBYE, dukeImage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.millis(1000));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        delay.setOnFinished(event -\u003e mainStage.close());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void showSchedule(LocalDate date) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                new DaySchedule(date, duke.tl.getListAsStream()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                        .filter(task -\u003e task instanceof Event)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                        .map(task -\u003e (Event) task)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                        .filter(event -\u003e event.getDate().isEqual(date))));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 142
    }
  },
  {
    "path": "src/main/resources/view/DaySchedule.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"150.0\" style\u003d\"-fx-border-color: #1a2421; -fx-background-color: #ffffff;\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" text\u003d\"DEFAULT_DATE\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 22
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: transparent;\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cjavafx.scene.layout.HBox fx:id\u003d\"hBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #DBDFAC; -fx-background-insets: 5; -fx-background-radius: 20;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"DEFAULT_TEXT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                  \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "              \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "              \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34
    }
  },
  {
    "path": "src/main/resources/view/EventUi.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"150.0\" style\u003d\"-fx-background-color: #ffebcd; -fx-border-color: #a52a2a;\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cLabel fx:id\u003d\"time\" text\u003d\"DEFAULT_TIME\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"eventName\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"DEFAULT_EVENT\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #3B1F2B;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"umaikaze.duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #3B1F2B;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"488.0\" style\u003d\"-fx-background-color: #3B1F2B;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 23
    }
  },
  {
    "path": "src/test/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "T|0|TestTodo"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 1
    }
  },
  {
    "path": "src/test/java/umaikaze/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import umaikaze.duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void saveFile_normalInput_Todo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String dir \u003d \"./data/data.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list.add(new Todo(\"TestTodo\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Storage storage \u003d new Storage(dir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        storage.saveFile(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(dir));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(\"T|0|TestTodo\", br.readLine());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void loadFile_normalInput_Todo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String dir \u003d \"./data/data.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Storage storage \u003d new Storage(dir);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        list \u003d storage.loadFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(\"[T][\\u2718] TestTodo\", list.get(0).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34
    }
  },
  {
    "path": "src/test/java/umaikaze/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package umaikaze.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void task_normalInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task t \u003d new Task(\"Test Description\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(t.toString(), \"[\\u2718] Test Description\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void markDone_normalInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Task t \u003d new Task(\"Test Description\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        t.markDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(t.toString(), \"[\\u2713] Test Description\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "hewwo fwom"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " _____     _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|     |___| |_ ___ ___ ___ ___ ___ ___"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|   --| .\u0027|  _| . | -_|  _|_ -| . |   |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|_____|__,|_| |  _|___|_| |___|___|_|_|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "              |_|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "how may i sewve u today nya?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tlist is empty qwq"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[T][✘] take care of kyaru"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 1 tasks in the wist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✘] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 2 tasks in the wist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tGot it UwU I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 3 tasks in the wist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "DukeException:  ************************************************************"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tOOPS owo  I\u0027m sowwy, but I don\u0027t knyow what that means :-("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t1. [T][✘] take care of kyaru"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t2. [D][✘] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t3. [E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyice ;;w;;  I\u0027ve mawked this task as donye:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[T][✓] take care of kyaru"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyice ;;w;;  I\u0027ve mawked this task as donye:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✓] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyoted (・`ω´・)  I\u0027ve wemuvd this task:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t[D][✓] refill catfood  (by: 6pm)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tNyow you have 2 tasks in the wist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tHewe awe the tasks in youw wist:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t1. [T][✓] take care of kyaru"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t2. [E][✘] kishi-san meeting  (at: Friday 7pm)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\tBye. Hope to see you again soon \u003ew\u003c"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\t************************************************************"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 56
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo take care of kyaru"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline refill catfood /by 25/1/2020 18:30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event kishi-san meeting /at 31/1/2020"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "you don\u0027t know what this means"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "todo that has a timing /at 1/2/2020 18:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "deadline /by 20/1/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "event /at 5/2/2020 6:00 typed in wrong order"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 17
    }
  },
  {
    "path": "text-ui-test/inputListOnly.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2
    }
  },
  {
    "path": "text-ui-test/runTestRead.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c inputListOnly.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@pause"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@pause"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 9
    }
  },
  {
    "path": "text-ui-test/runtestFresh.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM delete output and data from previous run"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "if exist ..\\src\\data\\data.txt del ..\\src\\data\\data.txt"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "java -classpath ..\\out\\production\\duke\\ umaikaze.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003e DIFF.TXT"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10
    }
  }
]
