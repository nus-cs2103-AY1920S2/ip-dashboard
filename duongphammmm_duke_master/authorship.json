[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    mainClassName \u003d \"duke.ui.Launcher\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "duongphammmm": 39
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "T | true | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "E | false | group meeting | 2020-02-21 1000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "T | false | laundry"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "E | false | seminar | 2020-02-21 1000"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "### Feature 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Deadline` task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `deadline` - Describe action"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Deadline` task with the specified description and deadline date and time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The task will be marked as \u0027undone\u0027 by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "You cannot add a task whose name and type combination already existed before,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "e.g. adding a `Deadline` named `assignement` followed by a `Todo` named `assignement` is allowed,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "but not a `Deadline` named `assignement` followed by another `Deadline` named `assignement`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "(even though they have different deadline date and time)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`deadline CS2102 Assignment /by 2020-02-21 1800`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application successfully added a `Deadline` with description `Cs2102 Assignment`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "and deadline date and time `21 Feb 2020 18:00`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Got it dude! I\u0027ve added this task:`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`[D][✘] CS2102 Assignment (by: 21 Feb 2020 18:00)`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Now you have 5 task(s) in the list.`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Event` task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `event` - Describe action"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Event` task with the specified description and time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The task will be marked as \u0027undone\u0027 by default."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Similar to `Deadline`, you cannot add a task whose name and type combination already existed before."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`event project meeting /at 2020-02-21 1800`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application successfully added an `Event` with description `project meeting`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "and time `21 Feb 2020 18:00`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Got it dude! I\u0027ve added this task:`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`[E][✘] project meeting (at: 21 Feb 2020 18:00)`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Now you have 5 task(s) in the list.`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 3"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Todo` task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `todo` - Describe action"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Add a new `Todo` task with the specified description."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The item will be marked as \u0027undone\u0027 by default."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Similar to `Deadline` and `Event`, you cannot add a task whose name and type combination already existed before."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`todo ST2132 Homework`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application successfully added a `Todo` with description `ST2132 Homework`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Got it dude! I\u0027ve added this task:`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`[T][✘] ST2132 Homework`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Now you have 5 task(s) in the list.`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 4"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Delete a task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `delete` - Describe action"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Delete a `Task` at the specified index in the list. The index must be a positive integer and must exists within the range of the list length."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application successfully deleted a `Task` at index 2 of the current list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Got it dude! I\u0027ve deleted this task:`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`[E][✘] project meeting (at: 21 Feb 2020 18:00)`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Now you have 4 task(s) in the list.`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 5"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Mark a task as \u0027done\u0027."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `done` - Describe action"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Mark a `Task` at the specified index in the list as `done`. The index must be a positive integer and must exists within the range of the list length."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application successfully marked the `Task` at index 2 of the current list as `done`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Got it dude! I\u0027ve marked this task as done:`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`[T][✓] ST2132 Homework`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 6"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Find task(s) containing keyword."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `find` - Describe action"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Find all tasks whose description contains the specified keyword and return a list of those tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "(The list could be empty if there is no task that matchest the keyword)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`find Homework`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application found some tasks whose description contains the keyword `Homework`, and return a list of those tasks."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Okay dude here are what I found:`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`2. [T][✓] ST2132 Homework`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "If no task contains the keyword, this message will be returned instead:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Sorry dude but I found nothing :(`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 6"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "List all tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `list` - Describe action"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "List out all `Task` in the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "The application listed out all `Task` in the list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`Here\u0027s your list of tasks dude:`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`1. [D][✘] CS2102 Assignment (by: 21 Feb 2020 18:00)`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "`2. [T][✓] ST2132 Homework`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### Feature 7"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "### `bye` - Describe action"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Exits the program."
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "duongphammmm": 151
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Main class of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.initialiseData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scene \u003d new Scene(mainLayout); // Setting the scene to be our layout"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Formatting the window to look as expected"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setTitle(\"My Dude\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        stage.setMaximized(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Handle user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses the input and executes the corresponding \u003ccode\u003eCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * then returns the \u003ccode\u003eString\u003c/code\u003e message showing the result of the execution."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param input input \u003ccode\u003eString\u003c/code\u003e provided by user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e message showing the result of the execution."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (!c.isExit()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output \u003d ui.showCommandError(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 154,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of task that could be added. A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a task with a specific date and time to be completed by."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param type \u003ccode\u003eString\u003c/code\u003e representing the type of the \u003ccode\u003eTask\u003c/code\u003e (\"deadline\")."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param isDone true if the \u003ccode\u003eTask\u003c/code\u003e is completed, false otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description \u003ccode\u003eString\u003c/code\u003e representing the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param byString \u003ccode\u003eString\u003c/code\u003e representing the deadline of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Deadline(String type, boolean isDone, String description, String byString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(type, isDone, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.byString \u003d byString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //Date input format: yyyy-mm-dd HHmm"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] by \u003d byString.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.date \u003d LocalDate.parse(by[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (by.length \u003e 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.time \u003d LocalTime.parse(by[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing the type of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e \"D\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getTypeSymbol() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an array of \u003ccode\u003eString\u003c/code\u003e objects representing this \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string array representation of the \u003ccode\u003eDeadline\u003c/code\u003e object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String[] toDataTokens() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String isDoneString \u003d String.valueOf(super.isDone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new String[] {getTypeSymbol(), isDoneString, super.description, this.byString};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing this \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eDeadline\u003c/code\u003e object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String dateTime \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dateTime +\u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (this.time !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            dateTime +\u003d \" \" + this.time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"[\" + getTypeSymbol() + \"]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 73
    }
  },
  {
    "path": "src/main/java/duke/commons/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of task that could be added. A \u003ccode\u003eEvent\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a task that occurs at a specific date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String atString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param type \u003ccode\u003eString\u003c/code\u003e representing the type of the \u003ccode\u003eTask\u003c/code\u003e (\"event\")."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param isDone true if the \u003ccode\u003eTask\u003c/code\u003e is completed, false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description \u003ccode\u003eString\u003c/code\u003e representing the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param atString \u003ccode\u003eString\u003c/code\u003e representing the time of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Event(String type, boolean isDone, String description, String atString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(type, isDone, description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.atString \u003d atString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //Date input format: yyyy-mm-dd HHmm"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] at \u003d atString.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.date \u003d LocalDate.parse(at[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (at.length \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.time \u003d LocalTime.parse(at[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing the type of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e \"E\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getTypeSymbol() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an array of \u003ccode\u003eString\u003c/code\u003e objects representing this \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string array representation of the \u003ccode\u003eEvent\u003c/code\u003e object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String[] toDataTokens() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String isDoneString \u003d String.valueOf(super.isDone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new String[] {getTypeSymbol(), isDoneString, super.description, this.atString};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing this \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eEvent\u003c/code\u003e object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String dateTime \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dateTime +\u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (this.time !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            dateTime +\u003d \" \" + this.time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"[\" + getTypeSymbol() + \"]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 74
    }
  },
  {
    "path": "src/main/java/duke/commons/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a task that could be added."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected ArrayList\u003cString\u003e tagList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param type \u003ccode\u003eString\u003c/code\u003e representing the type of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param isDone true if the \u003ccode\u003eTask\u003c/code\u003e is completed, false otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description \u003ccode\u003eString\u003c/code\u003e representing the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Task(String type, boolean isDone, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the type of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the type of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e representing whether this \u003ccode\u003eTask\u003c/code\u003e is done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of whether this \u003ccode\u003eTask\u003c/code\u003e is done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Marks the \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds tag to the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tag the \u003ccode\u003eTag\u003c/code\u003e to be added to the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addTag(String tag) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.tagList.add(tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an array of \u003ccode\u003eString\u003c/code\u003e objects representing this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string array representation of the \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String[] toDataTokens() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String isDoneString \u003d String.valueOf(this.isDone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new String[] {isDoneString, this.description};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 92
    }
  },
  {
    "path": "src/main/java/duke/commons/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of task that could be added. A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a task with no specified date or time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param type \u003ccode\u003eString\u003c/code\u003e representing the type of the \u003ccode\u003eTask\u003c/code\u003e (\"todo\")."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param isDone true if the \u003ccode\u003eTask\u003c/code\u003e is completed, false otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description \u003ccode\u003eString\u003c/code\u003e representing the description of the \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Todo(String type, boolean isDone, String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(type, isDone, description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing the type of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the \u003ccode\u003eString\u003c/code\u003e \"T\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getTypeSymbol() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an array of \u003ccode\u003eString\u003c/code\u003e objects representing this \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string array representation of the \u003ccode\u003eTodo\u003c/code\u003e object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String[] toDataTokens() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String isDoneString \u003d String.valueOf(super.isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new String[] {getTypeSymbol(), isDoneString, super.description};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e object representing this \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a string representation of the \u003ccode\u003eTodo\u003c/code\u003e object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"[\" + getTypeSymbol() + \"]\" + super.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 51
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an exception specific to the Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an exception thrown when the item to be added has already existed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DuplicateTaskException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an exception thrown when the input task do not have description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an exception thrown when the input command is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an exception thrown when the input index is out of bound."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/duke/logic/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a manager of \u003ccode\u003eTask\u003c/code\u003e objects that contains a task list,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * and could add/delete a \u003ccode\u003eTask\u003c/code\u003e from the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the \u003ccode\u003eTask\u003c/code\u003e object at the specified position in the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index index of the \u003ccode\u003eTask\u003c/code\u003e object to return."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e object at the specified position in the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws InvalidIndexException If the index is out of bound."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Task getTask(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.taskList.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new InvalidIndexException(\"Sorry dude but this index is nowhere to be found.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the list of all \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the list of all \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the number of \u003ccode\u003eTask\u003c/code\u003e objects in the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the number of \u003ccode\u003eTask\u003c/code\u003e objects in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e objects in the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui the \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e objects in the task list,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *     or a \u003ccode\u003eString\u003c/code\u003e stating that the task list is empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printTaskList(Ui ui) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (this.taskList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output \u003d ui.printEmptyListMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output \u003d ui.printTaskMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                output +\u003d ui.printTask(i, task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a \u003ccode\u003eTask\u003c/code\u003e object to the task list and returns that \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commandWord Command word provided by user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commands array of \u003ccode\u003eString\u003c/code\u003e tokens from the input \u003ccode\u003eString\u003c/code\u003e provided by user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eTask\u003c/code\u003e object just added to the task list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DuplicateTaskException If the \u003ccode\u003eTask\u003c/code\u003e object already existed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Task addTask(String commandWord, String[] commands) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] descriptions;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            description \u003d commands[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            detectDuplicate(commandWord, description);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            task \u003d new Todo(commandWord, false, description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            descriptions \u003d commands[1].split(\" /at \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            detectDuplicate(commandWord, descriptions[0]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            task \u003d new Event(commandWord, false, descriptions[0], descriptions[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            descriptions \u003d commands[1].split(\" /by \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            detectDuplicate(commandWord, descriptions[0]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            task \u003d new Deadline(commandWord, false, descriptions[0], descriptions[1]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            assert 1 \u003d\u003d 0 : \"default reached\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assert task !\u003d null : \"null task\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Marks the \u003ccode\u003eTask\u003c/code\u003e object at the specified index as done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param doneIndex index of the \u003ccode\u003eTask\u003c/code\u003e object to be marked as done."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void markTaskAsDone(int doneIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Task task \u003d this.taskList.get(doneIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes the \u003ccode\u003eTask\u003c/code\u003e object at the specified index from the task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param deleteIndex index of the \u003ccode\u003eTask\u003c/code\u003e object to be removed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteTask(int deleteIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.taskList.remove(deleteIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Checks whether a \u003ccode\u003eAddCommand\u003c/code\u003e is trying to add a \u003ccode\u003eTask\u003c/code\u003e object that already existed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param command \u003ccode\u003eString\u003c/code\u003e representation of the type of \u003ccode\u003eAddCommand\u003c/code\u003e to be checked."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description \u003ccode\u003eString\u003c/code\u003e arguments of the \u003ccode\u003eAddCommand\u003c/code\u003e to be checked."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DuplicateTaskException If the \u003ccode\u003eTask\u003c/code\u003e object to be added already existed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void detectDuplicate(String command, String description) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (task.getType().equals(command) \u0026\u0026 task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                throw new DuplicateTaskException(\"You already have this task dude!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e objects that matches the keyword provided."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param keyword keyword provided by the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representing the \u003ccode\u003eTask\u003c/code\u003e objects that matches the keyword provided,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *     or a message stating that there is no \u003ccode\u003eTask\u003c/code\u003e object matching the keyword provided."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String findTask(Ui ui, String keyword) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output \u003d ui.printFoundTaskMessage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                output +\u003d ui.printTask(i, task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output \u003d ui.printNotFoundTaskMessage();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 178
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. An \u003ccode\u003eAddCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to add new task(s)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String[] commands;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public AddCommand(String commandWord, String[] commands) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.commands \u003d commands;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e that either"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * confirms that the \u003ccode\u003eCommand\u003c/code\u003e is successfully executed,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * or shows error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DuplicateTaskException If the \u003ccode\u003eTask\u003c/code\u003e has already existed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Task task \u003d tasks.addTask(commandWord, commands);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output \u003d ui.printAddingMessage(tasks, task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output +\u003d ui.showAddingError(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a command that could be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Command(String commandWord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if, and only if, this \u003ccode\u003eCommand\u003c/code\u003e is an \u003ccode\u003eExitCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if this \u003ccode\u003eCommand\u003c/code\u003e is an \u003ccode\u003eExitCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *     and \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this instanceof ExitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an empty \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DukeException If the \u003ccode\u003eCommand\u003c/code\u003e could not be executed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. A \u003ccode\u003eDeleteCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to delete task(s)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DeleteCommand(String commandWord, int deleteIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.deleteIndex \u003d deleteIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e that either"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * confirms that the \u003ccode\u003eCommand\u003c/code\u003e is successfully executed,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * or shows error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws InvalidIndexException If the specified index is out of bound."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Task task \u003d tasks.getTask(this.deleteIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        tasks.deleteTask(this.deleteIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output \u003d ui.printDeletingMessage(tasks, task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output +\u003d ui.showDeletingError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. A \u003ccode\u003eDoneCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to mark task(s) as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DoneCommand(String commandWord, int doneIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.doneIndex \u003d doneIndex - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e that either"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * confirms that the \u003ccode\u003eCommand\u003c/code\u003e is successfully executed,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * or shows error message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws InvalidIndexException If the specified index is out of bound."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Task task \u003d tasks.getTask(this.doneIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        tasks.markTaskAsDone(this.doneIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String output \u003d ui.printDoneMessage(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            output +\u003d ui.showMarkingAsDoneError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. An \u003ccode\u003eExitCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to exit the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ExitCommand(String commandWord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e that shows the exit message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return ui.exit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. A \u003ccode\u003eFindCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to find task(s) with matching keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public FindCommand(String commandWord, String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return tasks.findTask(ui, this.keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a type of command that could be executed. A \u003ccode\u003eListCommand\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * a command to list all existing task(s)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ListCommand(String commandWord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(commandWord);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Executes the \u003ccode\u003eCommand\u003c/code\u003e and returns an output \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return tasks.printTaskList(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a parser to parse \u003ccode\u003eString\u003c/code\u003e input into \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Arrays.asList(\"list\", \"done\", \"delete\", \"find\", \"todo\", \"event\", \"deadline\", \"bye\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eCommand\u003c/code\u003e object parsed from the input \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param fullCommand input \u003ccode\u003eString\u003c/code\u003e provided by user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return \u003ccode\u003eCommand\u003c/code\u003e object to be executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DukeException If the syntax of the input \u003ccode\u003eString\u003c/code\u003e is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] commands \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String commandWord \u003d commands[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkCommand(commandWord, commands);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new ExitCommand(commandWord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new ListCommand(commandWord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            int doneIndex \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new DoneCommand(commandWord, doneIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(commands[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new DeleteCommand(commandWord, deleteIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String keyword \u003d commands[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new FindCommand(commandWord, keyword);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new AddCommand(commandWord, commands);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Checks that the syntax of the command \u003ccode\u003eString\u003c/code\u003e provided by user is valid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commandWord Command word provided by user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commands array of \u003ccode\u003eString\u003c/code\u003e tokens from the input \u003ccode\u003eString\u003c/code\u003e provided by user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws DukeException If the commandWord or the number of arguments provided is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static void checkCommand(String commandWord, String[] commands) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkCommandWord(commandWord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!commandWord.equals(\"list\") \u0026\u0026 !commandWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            checkDetails(commands);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            // commandWord is either \"list\" or \"bye\", with no arguments required"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            assert commands.length \u003d\u003d 1 : \"invalid arguments\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Checks that the command word provided by user is valid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commandWord Command word provided by user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws InvalidCommandException If the commandWord provided is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static void checkCommandWord(String commandWord) throws InvalidCommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!validCommands.contains(commandWord)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new InvalidCommandException(\"Sorry dude but that won\u0027t command me!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            // valid commandWord"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            assert validCommands.contains(commandWord) : \"invalid command\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Checks that the number of arguments provided by user is valid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param commands array of \u003ccode\u003eString\u003c/code\u003e tokens from the input \u003ccode\u003eString\u003c/code\u003e provided by user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws EmptyDescriptionException If there number of arguments provided by the user is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static void checkDetails(String[] commands) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (commands.length \u003c 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new EmptyDescriptionException(\"Sorry dude but where are the arguments???\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 101
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents the storage manager that loads \u003ccode\u003eTask\u003c/code\u003e objects from the data file and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * saves \u003ccode\u003eTask\u003c/code\u003e objects to the data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final String SPLIT \u003d  \" \\\\| \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final String JOIN \u003d \" | \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e objects loaded from the data file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return an \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e objects loaded from the data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException If the \u003ccode\u003eTask\u003c/code\u003e objects could not be loaded."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        line \u003d reader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String[] tokens \u003d line.split(SPLIT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String type \u003d tokens[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String description \u003d tokens[2];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                task \u003d new Todo(\"todo\", isDone, description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                // Deadline/Event has tokens \u003d {type, isDone, description, time}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                assert tokens.length \u003d\u003d 4 : \"missing argument(s)\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String time \u003d tokens[3];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    task \u003d new Deadline(\"deadline\", isDone, description, time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    // Event type is provided"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    assert type.equals(\"E\") : \"invalid type\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    task \u003d new Event(\"event\", isDone, description, time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            assert task !\u003d null : \"null task\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Saves the current \u003ccode\u003eTask\u003c/code\u003e in the data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException If the \u003ccode\u003eTask\u003c/code\u003e objects could not be saved."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void update(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath, false));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String[] tokens \u003d task.toDataTokens();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            writer.append(String.join(JOIN, tokens));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            writer.append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Creates a new data file called \"tasks.txt\" if such file does not exist when the program first starts."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void initialiseData() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        File file \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            // initialiseData() only called when file not already exists"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            assert 1 \u003d\u003d 0 : \"data already exists\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 103
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents the dialog box component of the GUI of the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructor for \u003ccode\u003eDialog\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param text \u003ccode\u003eString\u003c/code\u003e text to be put inside the dialog box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param image profile picture to be put inside the dialog box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DialogBox(Label text, ImageView image) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialog.setText(text.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        displayPicture.setImage(image.getImage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eDialogBox\u003c/code\u003e object representing the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The dialog box will echo the user\u0027s input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param text text input by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param image profile picture of the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eDialogBox\u003c/code\u003e object representing the user, with the specified text and profile image."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static DialogBox getUserDialog(Label text, ImageView image) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eDialogBox\u003c/code\u003e object representing Duke."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The dialog box will contain Duke\u0027s reply."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param text text output by Duke."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param image profile picture of Duke."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eDialogBox\u003c/code\u003e object representing Duke, with the specified text and profile image."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static DialogBox getDukeDialog(Label text, ImageView image) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        var db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 80
    }
  },
  {
    "path": "src/main/java/duke/ui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 12
    }
  },
  {
    "path": "src/main/java/duke/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Starts the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param stage the \u003ccode\u003eStage\u003c/code\u003e to be set up."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Links the Controller to the \u003ccode\u003eDuke\u003c/code\u003e object of the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param d \u003ccode\u003eDuke\u003c/code\u003e object constructed when the program starts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Label input \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Label response \u003d new Label(duke.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                DialogBox.getUserDialog(input, new ImageView(userImage)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                DialogBox.getDukeDialog(response, new ImageView(dukeImage))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 57
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.commons.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents the Ui Manager of the program that outputs different \u003ccode\u003eString\u003c/code\u003e messages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String showLoadingError(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Loading error: \" + message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String showCommandError(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Command error: \" + message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String showAddingError(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Adding error: \" + message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String showDeletingError(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Deleting error: \" + message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String showMarkingAsDoneError(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Marking as done error: \" + message;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e message to confirm successful addition of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e manager object of the program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param task the \u003ccode\u003eTask\u003c/code\u003e object to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e message to confirm successful addition of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printAddingMessage(TaskList tasks, Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Got it dude! I\u0027ve added this task:\" + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + task + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + printTaskListSize(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printDoneMessage(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Got it dude! I\u0027ve marked this task as done:\" + \"\\n\" + task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a \u003ccode\u003eString\u003c/code\u003e message to confirm successful deletion of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param tasks \u003ccode\u003eTaskList\u003c/code\u003e manager object of the program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param task the \u003ccode\u003eTask\u003c/code\u003e object to be deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e message to confirm successful deletion of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printDeletingMessage(TaskList tasks, Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Got it dude! I\u0027ve deleted this task:\" + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + task + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + printTaskListSize(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printTaskListSize(TaskList tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        int size \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Now you have \" + size + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printEmptyListMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Your list is currently empty dude.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printTaskMessage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Here\u0027s your list of tasks dude:\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printFoundTaskMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Okay dude here are what I found:\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printNotFoundTaskMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Sorry dude but I found nothing :(\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printDuplicateMessage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Hey you already have this task dude!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String printTask(int i, Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return i + \". \" + task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return \"Okay see ya dude!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 100
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"700.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"100.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"800.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 10
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.DynamicTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 11
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Dude: Dude now you have even more things to do:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      [T][x]  borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "dude:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Dude: Here\u0027s your list of tasks dude:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      1. [T][x]  borrow book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "dude:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Dude: That\u0027s strange dude your pile of deadlines suddenly grew:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      [D][x]  return book  (by: Sunday)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "dude:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "Dude: Woohoo what an eventful life:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      [E][x]  project meeting  (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "dude:"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "event project meeting /at Mon 2-4pm"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 21
    }
  }
]
