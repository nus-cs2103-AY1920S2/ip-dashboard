[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 1
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private boolean newUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Duke () {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param filepath File path of .txt file for memory storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            taskList \u003d storage.getTaskFromMemory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            newUser \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            newUser \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Main running function of the Duke class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Integrates Storage, TaskList, Ui and Parser to perform the main intended function."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Ui.hello();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (newUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.newUser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.oldUser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String command \u003d Ui.readCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        while (!command.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            p.parseAndExecute(command, taskList, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            storage.writeTaskToMemory(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            command \u003d Ui.readCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Ui.bye();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                DialogBox.getUserDialog(userText.getText(), new ImageView(user).getImage()),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                DialogBox.getDukeDialog(dukeText.getText(), new ImageView(duke).getImage())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 180,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.exception.DukeTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.exception.DukeUnknownException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int COMMAND_POSITION \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DESCRIPTION_POSITION \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int MINIMUM_COMMAND_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String TODO_TYPE \u003d \"T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String DEADLINE_TYPE \u003d \"D\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String EVENT_TYPE \u003d \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int MINIMUM_DEADLINE_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DEADLINE_DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DEADLINE_TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int MINIMUM_EVENT_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int EVENT_DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int EVENT_TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Make sense of the user\u0027s command and execute their desired function(s)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param command Input from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param storage Storage class that reads from/write to a specified file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void parseAndExecute(String command, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String[] commandArray \u003d command.split(\" \", MINIMUM_COMMAND_LENGTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (command.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Ui.printWithBorder(taskList.showList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    markTaskAsDone(taskList, commandArray[DESCRIPTION_POSITION]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Please specify which task to be marked as done.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"delete\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    deleteTask(taskList, commandArray[DESCRIPTION_POSITION]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Please specify which task to be deleted.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"find\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    findTask(taskList, commandArray[DESCRIPTION_POSITION]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Please specify the keyword(s) that you want to search.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"todo\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    addTask(taskList, commandArray[DESCRIPTION_POSITION], TODO_TYPE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Missing field in todo command.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    addTask(taskList, commandArray[DESCRIPTION_POSITION], DEADLINE_TYPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Missing field in deadline command.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (commandArray[COMMAND_POSITION].toLowerCase().equals(\"event\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (commandArray.length \u003e\u003d MINIMUM_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    addTask(taskList, commandArray[DESCRIPTION_POSITION], EVENT_TYPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeArgumentException(\"Missing field in event command.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new DukeUnknownException(\"Apologies, I do not recognise this command.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(err.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Adds Task to TaskList based on its type (i.e. Todo, Deadline or Event)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param input Input provided by the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param type Type of Task (\"T\" for Todo, \"D\" for Deadline, \"E\" for Event)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws DukeTaskException Throws exception related to Duke Task class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void addTask(TaskList taskList, String input, String type) throws DukeTaskException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String str \u003d \"\\nCurrent number of task(s): \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (type.equals(TODO_TYPE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Task todo \u003d new Todo(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (duplicatedTask(taskList, todo)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Ui.printWithBorder(\"This todo is already in your task list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                taskList.add(todo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Ui.printWithBorder(\"The following to-do has been added:\\n    \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        + todo.toString() + str + taskList.size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else if (type.equals(DEADLINE_TYPE)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String[] arr \u003d input.split(\"/\", MINIMUM_DEADLINE_LENGTH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (arr.length \u003e\u003d MINIMUM_DEADLINE_LENGTH) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String description \u003d arr[DEADLINE_DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String by \u003d arr[DEADLINE_TIME_POSITION].split(\" \", MINIMUM_DEADLINE_LENGTH)[DEADLINE_TIME_POSITION];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (isLocalDate(by)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    LocalDate deadlineDate \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    Deadline deadline \u003d new Deadline(description, deadlineDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    if (duplicatedTask(taskList, deadline)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Ui.printWithBorder(\"This deadline is already in your task list.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        taskList.add(deadline);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Ui.printWithBorder(\"The following task has been added:\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                                + \"    \" + deadline.toString() + str + taskList.size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeTaskException(\"Invalid date format detected. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                            + \"Please ensure date is in yyyy-mm-dd (e.g. 2019-01-30).\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new DukeTaskException(\"\\\u0027/by\\\u0027 field is missing.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else if (type.equals(EVENT_TYPE)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String[] arr \u003d input.split(\"/\", MINIMUM_EVENT_LENGTH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (arr.length \u003e\u003d MINIMUM_EVENT_LENGTH) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String description \u003d arr[EVENT_DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String at \u003d arr[EVENT_TIME_POSITION].split(\" \", MINIMUM_EVENT_LENGTH)[EVENT_TIME_POSITION];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (isLocalDate(at)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    LocalDate eventDate \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    Event event \u003d new Event(description, eventDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    if (duplicatedTask(taskList, event)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Ui.printWithBorder(\"This event is already in your task list.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        taskList.add(event);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Ui.printWithBorder(\"The following task has been added:\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                                + \"    \" + event.toString() + str + taskList.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    throw new DukeTaskException(\"Invalid date format detected. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                            + \"Please ensure date is in yyyy-mm-dd (e.g. 2019-02-28).\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new DukeTaskException(\"\\\u0027/at\\\u0027 field is missing.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Checks if input provided can be parsed into a LocalDate object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return True if input can be parsed, false otherwise."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isLocalDate(String input) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            LocalDate.parse(input);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param userIndex Index of Task to be marked as done."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws DukeArgumentException Throws exception related to invalid argument provided."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void markTaskAsDone(TaskList taskList, String userIndex) throws DukeArgumentException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        int index \u003d Integer.parseInt(userIndex) - 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(\"There is no task in your list to be marked as done.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else if (index \u003c taskList.size()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Task t \u003d taskList.get(index);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(\"As per requested, the following task has been marked as done:\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"    \" + t.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new DukeArgumentException(\"Please provide a number between 1 and \" + taskList.size() + \".\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Deletes the specified task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param userIndex Index of Task to be deleted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws DukeArgumentException Throws exception related to invalid argument provided."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void deleteTask(TaskList taskList, String userIndex) throws DukeArgumentException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        int index \u003d Integer.parseInt(userIndex) - 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(\"There is no task in your list to be deleted.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else if (index \u003c taskList.size()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Task t \u003d taskList.get(index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(\"As per requested, the following task has been deleted:\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"    \" + t.toString() + \"\\nCurrent number of task(s): \" + taskList.size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new DukeArgumentException(\"Please provide a number between 1 and \" + taskList.size() + \".\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Displays a search result of Tasks that matches the keyword specified by user."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param keyword Keyword used to search the TaskList."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void findTask(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        TaskList searchResult \u003d taskList.findTask(keyword);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (searchResult.isEmpty()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(\"Apologies, I could not find any matching task.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"After much deliberation, I found these matching tasks:\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            for (int i \u003d 0; i \u003c searchResult.size(); i++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task t \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                sb.append(\"\\n    \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                sb.append(t.toString());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(sb.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Checks if there already exists a duplicated task in the user\u0027s TaskList."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s list of Tasks."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param task New Task that is to be added."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return True if a duplicated Task exists, false otherwise."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean duplicatedTask(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        boolean isDuplicate \u003d false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Task current \u003d taskList.get(i);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (task.getDescription().equals(current.getDescription()) \u0026\u0026 current.getStatus().equals(\"[X]\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                isDuplicate \u003d true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return isDuplicate;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 246
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final char TASK_DONE_STATUS \u003d \u0027O\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int SPLIT_TASK_LINE \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int SYMBOLS_POSITION \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int COMMAND_CHARACTER_POSITION \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DONE_STATUS_POSITION \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DESCRIPTION_POSITION \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final int DATETIME_STRING_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assert filepath !\u003d null : \"filepath should not be an empty string\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Reads file specified in filepath and converts file content into a TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws FileNotFoundException Throws exception if file is not found in the specified file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public TaskList getTaskFromMemory() throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Scanner fs \u003d new Scanner(f);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        while (fs.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String currentLine \u003d fs.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String[] input \u003d currentLine.split(\" \", SPLIT_TASK_LINE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            char command \u003d input[SYMBOLS_POSITION].charAt(COMMAND_CHARACTER_POSITION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            boolean isDone \u003d (input[SYMBOLS_POSITION].charAt(DONE_STATUS_POSITION) \u003d\u003d TASK_DONE_STATUS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (command \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task t \u003d new Todo(input[DESCRIPTION_POSITION]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (command \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                int byStart \u003d input[DESCRIPTION_POSITION].indexOf(\" (by:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String description \u003d input[DESCRIPTION_POSITION].substring(0, byStart);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String by \u003d input[DESCRIPTION_POSITION].substring(byStart + DATETIME_STRING_LENGTH,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        input[DESCRIPTION_POSITION].length() - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                LocalDate byDate \u003d LocalDate.parse(by, df);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task t \u003d new Deadline(description, byDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            } else if (command \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                int atStart \u003d input[DESCRIPTION_POSITION].indexOf(\" (at:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String description \u003d input[DESCRIPTION_POSITION].substring(0, atStart);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                String at \u003d input[DESCRIPTION_POSITION].substring(atStart + DATETIME_STRING_LENGTH,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        input[DESCRIPTION_POSITION].length() - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                LocalDate atDate \u003d LocalDate.parse(at, df);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task t \u003d new Event(description, atDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Overwrite target file specified in filepath with content of TaskList provided."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param taskList User\u0027s TaskList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void writeTaskToMemory(TaskList taskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task current \u003d taskList.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                sb.append(current.toString() + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ui.printWithBorder(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 101
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor class. Creates an empty ArrayList of Tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Checks if TaskList is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return True if TaskList is empty, false otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Checks the size of TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return Size of TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Retrieve the specified Task from TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param index Index of Task to be retrieved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return Specified Task object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Appends Task to TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param task Task object to be appended."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Removes the specified Task from TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param index Index of Task to be removed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Displays all the Tasks inside TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return String object of each Task separated by a new line."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String showList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return \"Your task list is empty.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            sb.append(\"Here is your list of tasks: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                sb.append(\"\\n\" + index + \".\" + task.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Finds Tasks containing description that matches the keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param keyword Keyword to be matched."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return A TaskList of matching Tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public TaskList findTask(String keyword) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                result.add(t);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 89
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String separator \u003d \"------------------------------------------\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void hello() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(\"Booting up...\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(\"Greetings, I am Duke.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Prints the input provided with top and bottom separators."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param text Text to be framed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void printWithBorder(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assert text !\u003d null : \"Should not print border without text\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(\"\\n\" + separator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        System.out.println(separator + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Prints farewell message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void bye() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        printWithBorder(\"I believe this is farewell, my friend.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Prints message for new user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void newUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        printWithBorder(\"Welcome, new user.\\n\\nHow can I help you today?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Prints message for old user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void oldUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        printWithBorder(\"Welcome back.\\n\\nHow can I help you today?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Reads user input using a Scanner class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Exception class for Duke exceptions related to improper argument(s) provided."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DukeArgumentException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for argument-related exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param message Error/Exception message to be shown to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public DukeArgumentException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Exception class for all Duke exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for all Duke exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param message Error/Exception message to be shown to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Exception class for Duke exceptions related to Tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DukeTaskException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Task-related exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param message Error/Exception message to be shown to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public DukeTaskException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Exception class for Duke exceptions related to unknown user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DukeUnknownException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for exceptions related to unknown commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param message Error/Exception message to be shown to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public DukeUnknownException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  This is an Deadline class. Child class of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Stores an additional LocalDate variable of the Deadline."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Deadline class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description Content of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param by Deadline of the Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  This is an Event class. Child class of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Stores an additional LocalDate variable of the Event."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Event class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description Content of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param at Date of Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  This is a Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  Stores the Task\u0027s description and its isDone status."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param desc Content of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns the description of the Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return Description of Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns the status symbol of the Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @return Status symbol of Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return (isDone ? \"[O]\" : \"[X]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Marks the instance of Task as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return this.getStatus() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 47
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " *  This is a Todo class. Child class of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructor for Todo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description Content of the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void DeadlineTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-01-30\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"IP Week 3\", date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(\"[D][O] IP Week 3 (by: 30 Jan 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 14
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void DukeTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 10
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void EventTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-04-25\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Event task \u003d new Event(\"CS2103T Exam\", date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(\"[E][X] CS2103T Exam (at: 25 Apr 2020)\", task.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 13
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void TodoTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Todo task \u003d new Todo(\"finish CS2103T IP\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(\"[T][X] finish CS2103T IP\", task.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 11
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Booting up..."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "How can I serve you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Apologies, I do not recognise this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The following task has been added:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    [T][✗] set up text UI Testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Current number of task(s): 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The following task has been added:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    [D][✗] finish IP week 2  (by: today 2359)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Current number of task(s): 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The following task has been added:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    [E][✗] CNY  (at: 25 January)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Current number of task(s): 3"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Here is your list of tasks:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "1.[T][✗] set up text UI Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "2.[D][✗] finish IP week 2  (by: today 2359)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "3.[E][✗] CNY  (at: 25 January)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "I believe this is farewell, my friend."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 48
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "todo set up text UI Testing"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "deadline finish IP week 2 /by today 2359"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "event CNY /at 25 January"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 21
    }
  }
]
