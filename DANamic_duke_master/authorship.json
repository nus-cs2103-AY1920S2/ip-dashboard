[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 38,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.main.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 13
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    //Custom byeCommand Method to exit Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return (\"BYE\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 8
    }
  },
  {
    "path": "src/main/java/duke/command/CalendarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class CalendarCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * calendarCommand Method finds Tasks that finds, matches and displays Tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * on a specific date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList      is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws UnknownDateTimeException when improperly formatted DateTime values are given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList, String commandSuffix) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DateTimeFormatter dtFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            LocalDate calendarDate \u003d LocalDate.parse(commandSuffix, dtFormat);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return calendarFind(taskList, calendarDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    //Custom calendarFind Method to find and print the list with the horizontal borders + running index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    static String calendarFind(TaskList taskList, LocalDate calendarDate) throws DateTimeParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        List\u003cString\u003e calendarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (task.getClass().equals(Deadline.class)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                DateTimeFormatter dtFormat \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                LocalDateTime testDate \u003d LocalDateTime.parse(((Deadline) task).byDeadline.substring(5), dtFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                LocalDate taskDate \u003d testDate.toLocalDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (taskDate.equals(calendarDate)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    calendarList.add(task.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (calendarList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"No matching deadlines found.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"Here are the task(s) in your list on that date:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (String task : calendarList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 65
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Super class for executable commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    static String run() throws UnknownCommandException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 14
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    CALENDAR,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingByDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingDetailsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.UnknownDateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * deadlineCommand Method creates Deadline Tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList      is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws DukeException when multiple exceptions are caught (e.g. unfilled secondary input)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList, String commandSuffix) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            String[] byDeadline \u003d commandSuffix.split(\" /by \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                //Initialising proTip; also used as a silent check for MissingByDeadlineException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                String proTip \u003d byDeadline[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                boolean unknownDate \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        DateTimeFormatter inputdTFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        LocalDateTime outputDT \u003d LocalDateTime.parse(byDeadline[1], inputdTFormat);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        DateTimeFormatter outputdTFormat \u003d DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        byDeadline[1] \u003d outputDT.format(outputdTFormat);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    unknownDate \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    proTip \u003d e.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                taskList.add(new Deadline(false, taskList.size(), byDeadline[0], byDeadline[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                String deadlineOutput \u003d (\"Got it. I\u0027ve added this task:\\n\\t[D][✗] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    + byDeadline[0] + \" (by: \" + byDeadline[1] + \")\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    + \"\\nNow you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                if (unknownDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    deadlineOutput \u003d deadlineOutput + \"\\nPS: \" + proTip;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return deadlineOutput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                throw new MissingByDeadlineException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new MissingDetailsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 63
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingAtEventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingDetailsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * eventCommand Method creates Event Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList      is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws DukeException when multiple exceptions are caught (e.g. unfilled secondary input)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList, String commandSuffix) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            String[] atEvent \u003d commandSuffix.split(\" /at \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                taskList.add(new Event(false, taskList.size(), atEvent[0], atEvent[1]));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return (\"Got it. I\u0027ve added this task:\\n\\t[E][✗] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    + atEvent[0] + \" (at: \" + atEvent[1] + \")\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    + \"\\nNow you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                throw new MissingAtEventException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new MissingDetailsException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * findCommand Method finds Tasks which has matching keywords in its description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList      is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList, String... commandSuffix) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        List\u003cString\u003e keywordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        for (String suffix : commandSuffix) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (!suffix.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    if (task.getTaskName().toLowerCase().contains(suffix.toLowerCase())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                        keywordList.add(task.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (keywordList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"No matching tasks with that keyword found.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"Here are the matching task(s) in your list:\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (String task : keywordList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * listCommand Method prints the list of Tasks (if not empty) running index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"List is empty.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            sb.append(\"Here are the task(s) in your list:\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                sb.append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 28
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingDetailsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * todoCommand Method creates Todo Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList      is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws MissingDetailsException when unfilled secondary input is caught (empty commandSuffix)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String run(TaskList taskList, String commandSuffix) throws MissingDetailsException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            taskList.add(new Todo(false, taskList.size(), commandSuffix));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return (\"Got it. I\u0027ve added this task:\\n\\t[T][✗] \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                + commandSuffix + \"\\nNow you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new MissingDetailsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/CannotReadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class CannotReadFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! There was a problem reading your file; new data file created.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/CannotSaveFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class CannotSaveFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! There was a problem saving your file!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingAtEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MissingAtEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! Remember to use \\\"/at\\\" for Events.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingByDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MissingByDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! Remember to use \\\"/by\\\" for Deadlines.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingDetailsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MissingDetailsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class UnknownDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"DateTime format is: DD/MM/YYYY HHmm (if, with Time).\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class UnknownTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, the Task Number entered does not exist.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 9
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.CannotSaveFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Duke Object that forms the backbone of the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //Try to read form saved data file and restore index, if not create a list to save later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            String filepath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Ui.showLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //Add functionality to handle user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e handleUserInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        userInput.setOnAction((event) -\u003e handleUserInput());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DialogBox.getUserDialog(userText.toString(), new ImageView(user).getImage()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DialogBox.getDukeDialog(dukeText.toString(), new ImageView(duke).getImage())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * getResponse performs the tasks as necessary, and returns response to userInput."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String output \u003d Parser.parseCommand(input, taskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (output.equals(\"BYE\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return exitDuke(taskList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    //Custom exitDuke Method to handle data saving and timed termination"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private String exitDuke(TaskList taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //Save new data to file before exiting"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (CannotSaveFileException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        //Timed exit to terminate the program while allowing you to see the Bye Message"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Executors.newSingleThreadScheduledExecutor()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            .schedule(() -\u003e System.exit(0), 2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return (\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 116,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 33
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.CalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.MissingDetailsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * parseCommand Method parses CommandTypes (if valid, and to perform the logic)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param input    is the input passed in for parsing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList is the list of Tasks are saved and manipulated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return value true only CommandType.BYE is registered to exit the program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String parseCommand(String input, TaskList taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String[] inputBreakdown \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        CommandType commandType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String commandSuffix \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            //First test for valid commands from input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                commandType \u003d CommandType.valueOf(inputBreakdown[0].toUpperCase());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                throw new UnknownCommandException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            //Second test for valid command suffixes from input, for commands that require it"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (commandType !\u003d CommandType.BYE \u0026\u0026 commandType !\u003d CommandType.LIST) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    commandSuffix \u003d inputBreakdown[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    throw new MissingDetailsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return ByeCommand.run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case CALENDAR:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return CalendarCommand.run(taskList, commandSuffix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return DeadlineCommand.run(taskList, commandSuffix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return taskList.delete(commandSuffix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return taskList.done(commandSuffix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return EventCommand.run(taskList, commandSuffix);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return FindCommand.run(taskList, commandSuffix.split(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return ListCommand.run(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return TodoCommand.run(taskList, commandSuffix);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                return new UnknownCommandException().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 81
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.CannotReadFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.CannotSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "//Suppressing warnings here as file consistency is already being caught and checked"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "@SuppressWarnings(\"all\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * dataRead Method attemps to read saved data from file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return the populated TaskList (if there is any readable data), if not null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws CannotReadFileException when the file cannot be found or the data within is unreadable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public TaskList load() throws CannotReadFileException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            FileInputStream dataFile \u003d new FileInputStream(filepath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            ObjectInputStream in \u003d new ObjectInputStream(dataFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            TaskList taskList \u003d (TaskList) in.readObject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            dataFile.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IOException | ClassNotFoundException ignored) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new CannotReadFileException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * dataSave Method attempts to save data to file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param taskList the populated TaskList (if there is any readable data), if not null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws CannotSaveFileException when the file cannot be saved or the data cannot be written"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void save(TaskList taskList) throws CannotSaveFileException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            FileOutputStream dataFile \u003d new FileOutputStream(filepath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            ObjectOutputStream out \u003d new ObjectOutputStream(dataFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            out.writeObject(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            dataFile.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new CannotSaveFileException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String byDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Deadline(boolean taskCompleted, int taskNo, String taskName, String byDeadline) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        super(taskCompleted, taskNo, taskName);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.byDeadline \u003d \"(by: \" + byDeadline + \")\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (taskCompleted) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[D][✓] \" + taskName + \" \" + byDeadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[D][✗] \" + taskName + \" \" + byDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    String atEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Event(boolean taskCompleted, int taskNo, String taskName, String atEvent) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        super(taskCompleted, taskNo, taskName);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.atEvent \u003d \"(at: \" + atEvent + \")\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (taskCompleted) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[E][✓] \" + taskName + \" \" + atEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[E][✗] \" + taskName + \" \" + atEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    boolean taskCompleted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    int taskNo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    Task(boolean taskCompleted, int taskNo, String taskName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.taskCompleted \u003d taskCompleted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.taskNo \u003d taskNo + 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (taskCompleted) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[✓] \" + taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[✗] \" + taskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 28
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.exception.UnknownTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public TaskList(Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        taskList \u003d storage.load().getTasks();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * deleteCommand Method deletes Tasks from the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws UnknownTaskException when an unknown/unformatted task number is passed in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String delete(String commandSuffix) throws UnknownTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            int deleteTaskNo \u003d Integer.parseInt(commandSuffix) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Task deletedShadowTask \u003d taskList.get(deleteTaskNo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            taskList.remove(deleteTaskNo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                task.taskNo \u003d taskList.indexOf(task) + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return \"Noted. I\u0027ve removed this task:\\n\\t\" + deletedShadowTask"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                + \"\\nNow you have \" + taskList.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new UnknownTaskException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * doneCommand Method marks Tasks as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param commandSuffix is the additional String that accompanies two-step commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @throws UnknownTaskException when an unknown/unformatted task number is passed in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String done(String commandSuffix) throws UnknownTaskException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            int doneTaskNo \u003d Integer.parseInt(commandSuffix) - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            taskList.get(doneTaskNo).taskCompleted \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done:\\n\\t[✓] \" + taskList.get(doneTaskNo).taskName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            throw new UnknownTaskException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public boolean add(Task t) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 73
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public Todo(boolean taskCompleted, int taskNo, String taskName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        super(taskCompleted, taskNo, taskName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        if (taskCompleted) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[T][✓] \" + taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            return taskNo + \".[T][✗] \" + taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 16
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * getDukeDialog Method which displays both Duke\u0027s output text and profile picture (image)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param text of the output that Duke generates"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param img  of Duke\u0027s profile picture (image)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @return the actually display of Duke\u0027s part of the UI but flipped"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 68
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.main.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Button startButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        startButton.fire();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * startDuke Method to print the welcome message, on first run."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    private void startDuke() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            DialogBox.getDukeDialog(Ui.welcome(), dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    //Custom welcome Method to print a welcome message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return (\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * Custom print Method to print simple inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     * @param output is the output from the command to be braced by the horizontal dividers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static void print(String output) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        print(\"An error occurred while loading existing tasks.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 32
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "DANamic": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cButton fx:id\u003d\"startButton\" onAction\u003d\"#startDuke\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "DANamic": 26
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_unknownCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        TaskList dummyTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals((\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            Parser.parseCommand(\"hello\", dummyTaskList));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 16
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    public void parseCommand_unknownCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "        assertEquals(\"1.[T][✗] test todo\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "            new Todo(false, 0, \"test todo\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DANamic": 14
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "List is empty."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t[T][✗] read book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Now you have 1 task(s) in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t[D][✗] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t[E][✗] lou hei (by: my office)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "1.[T][✗] read book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "2.[D][✗] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "3.[E][✗] lou hei (at: my office)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t[✓] this project"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DANamic"
        },
        "content": "1.[T][✗] read book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DANamic"
        },
        "content": "2.[D][✓] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DANamic"
        },
        "content": "3.[E][✗] lou hei (at: my office)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t[T][✗] return book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Now you have 4 task(s) in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DANamic"
        },
        "content": "\t3.[E][✗] lou hei (at: my office)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DANamic"
        },
        "content": "1.[T][✗] read book"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DANamic"
        },
        "content": "2.[D][✓] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DANamic"
        },
        "content": "3.[T][✗] return book"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! Remember to use \"/by\" for Deadlines."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! Remember to use \"/at\" for Events."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DANamic"
        },
        "content": "1.[T][✗] read book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DANamic"
        },
        "content": "2.[D][✓] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DANamic"
        },
        "content": "3.[T][✗] return book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, the Task Number entered does not exist."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, the Task Number entered does not exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, the Task Number entered does not exist."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DANamic"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, the Task Number entered does not exist."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Here are the task(s) in your list:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DANamic"
        },
        "content": "1.[T][✗] read book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DANamic"
        },
        "content": "2.[D][✓] this project (by: midnight tonight)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DANamic"
        },
        "content": "3.[T][✗] return book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DANamic"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DANamic"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DANamic": 127
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "deadline this project /by midnight tonight"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "event lou hei /at my office"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "error"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "deadline another project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "event CNY"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": "delete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "DANamic": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DANamic"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DANamic"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DANamic"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DANamic"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DANamic"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DANamic"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DANamic"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DANamic"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DANamic"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DANamic"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DANamic"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DANamic"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DANamic"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DANamic"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DANamic"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DANamic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DANamic"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DANamic"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DANamic"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DANamic"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DANamic"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DANamic"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DANamic"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "DANamic": 34
    }
  }
]
