[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "chrisjwelly": 6
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 6
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String space \u003d \"    \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"You are required to specify the description for the task. \\n\" + space +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"Please try again.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"You have entered an invalid index. Please try again.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/TooManyTasksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TooManyTasksException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String space \u003d \"    \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"You currently have 100 tasks! \\n\" + space +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"Perhaps it would be good to complete the tasks at hand. \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String space \u003d \"    \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"Unfortunately, I do not understand the command that you have just entered. \\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                space + \"Please try once again.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/duke/main/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 61
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.processor.Processor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Empty constructor required for duke.main.Launcher"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasksFromSaveFile());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Since we can successfully load it, we save all in duke.main.TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.indent(\"It seems that there is no save file in: \" + filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Processor.process(tasks, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String message \u003d Ui.indentWithNewline(e.toString(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.printSection(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            message +\u003d Ui.indentWithNewline(\"It seems that you have entered a format we don\u0027t understand\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            message +\u003d Ui.indentWithNewline(\"Please use the YYYY-MM-DD format.\", 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.printSection(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Refactor this part to be integrated with CLI UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (Parser.commandEquals(\"bye\", input)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // Ui.sayGoodbye();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"Bye!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"list\", input)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                Ui.displayList(tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"done\", input)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                int taskNo \u003d Parser.getTaskNo(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                tasks.markTaskAsDone(taskNo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"I have marked that task as done!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"delete\", input)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                int taskNo \u003d Parser.getTaskNo(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                tasks.deleteTask(taskNo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"I have deleted that task!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"deadline\", input)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) throw new TooManyTasksException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                tasks.addDeadline(Parser.getArgs(input));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"I have added that deadline!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"event\", input)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) throw new TooManyTasksException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                tasks.addEvent(Parser.getArgs(input));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"I have added that event!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"todo\", input)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) throw new TooManyTasksException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                tasks.addTodo(Parser.getArgs(input));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d \"I have added that todo!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"find\", input)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.findToString(Parser.getArgs(input));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new UnknownCommandException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Rewrites the entire file for every update you make here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Probably O(n^2) time where n is the number of tasks but this is the simplest change we can make"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            toReturn \u003d e.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "chrisjwelly": 116
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // duke.main.Duke duke \u003d new duke.main.Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 13
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 31
    }
  },
  {
    "path": "src/main/java/duke/main/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.main.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 51
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Reads the next line of input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return the String that has been read."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String readLine() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Checks if there is still input in the next line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true if there is, false if not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static boolean stillHasInputs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Extracts and returns the command from the input line."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param input A string of a single command, or a command with arguments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return the command represented as a String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String getCommand(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // assert inputs.length \u003d\u003d 1 : \"Inputs should at least have a command\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return inputs[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Extracts and returns the arguments from the input line."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param input A String of command with arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return the arguments represented as a String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String getArgs(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assert inputs.length \u003d\u003d 2 : \"Inputs should have an argument\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return inputs[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Checks if the command in the input line is the same as the command expected."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param command The command expected represented as a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param input A String of a single command or a command with arguments."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true if the expected command matches, false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static boolean commandEquals(String command, String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getCommand(input).equals(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Checks if the command does not have any arguments. I.e. Input is a single command or a command with arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param input The String input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true if it is a single command, false otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static boolean hasNoArgs(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return inputs.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Obtains the task number from the input line."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param input A command with a number as an argument."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return an integer of the argument."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static int getTaskNo(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Integer.parseInt(getArgs(input));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 74
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // private static final String storagePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private final String storagePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.storagePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void appendToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        FileWriter fw \u003d new FileWriter(storagePath, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Writes to the file whose address is specified by storagePath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param textToAdd The text that is added to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void writeToFile(String textToAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Takes the tasks in taskList and write all of them into the file whose address is specified by storagePath."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param taskList The List of Tasks to be written."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void writeTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            sb.append(task.toStorageString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        writeToFile(sb.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Reads the file that is pointed by storagePath and write store them as a List\u003cList\u003cString\u003e\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * The List\u003cString\u003e can be a list of a single command or a command with the arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The List\u003cList\u003cString\u003e\u003e version of the file being read."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws FileNotFoundException If file is not found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cList\u003cString\u003e\u003e loadTasksFromSaveFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        File f \u003d new File(storagePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // It\u0027s formatted with the pipe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String[] separated \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Turn the String array into an array list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cString\u003e al \u003d Arrays.asList(separated);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            tasks.add(al);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 76
    }
  },
  {
    "path": "src/main/java/duke/main/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Initialises the TaskList according to a list of tasks that have been saved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param savedTasks Tasks that have been saved represented as a List\u003cList\u003cString\u003e\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public TaskList(List\u003cList\u003cString\u003e\u003e savedTasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final int TYPE \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final int STATUS \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final int DESC \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final int ARGS \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (List\u003cString\u003e savedTask : savedTasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String type \u003d savedTask.get(TYPE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Task taskObject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                taskObject \u003d new Deadline(savedTask.get(DESC), savedTask.get(ARGS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                taskObject \u003d new Event(savedTask.get(DESC), savedTask.get(ARGS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // type equals (\"T\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                taskObject \u003d new Todo(savedTask.get(DESC));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            tasks.add(taskObject);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (savedTask.get(STATUS).equals(\"1\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // That means task was initially done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                taskObject.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Gets the concrete representation of the tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A List of Tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Adds a deadline object to the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param args A String in the format of: \"\u003cdesc\u003e /by \u003cdate\u003e\"."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A String of the response to the CLI UI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String addDeadline(String args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] descAndBy \u003d args.split(\" /by \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Deadline deadline \u003d new Deadline(descAndBy[0], descAndBy[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(\"Acknowledge. I have added: \", 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(deadline.toString(), 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.getTaskCount(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Adds an Event object to the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param args A String in the format of: \"\u003cdesc\u003e /at \u003cdate\u003e\"."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A String of the response to the CLI UI."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String addEvent(String args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] descAndAt \u003d args.split(\" /at \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Event event \u003d new Event(descAndAt[0], descAndAt[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(\"Acknowledge. I have added: \", 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(event.toString(), 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.getTaskCount(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Add a Todo object to the task list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param args A String in the format of: \"\u003cdesc\u003e\"."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A String of the response to the CLI UI."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String addTodo(String args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Todo todo \u003d new Todo(args);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(\"Acknowledge. I have added: \", 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(todo.toString(), 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.getTaskCount(this);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private void add(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns the number of tasks in the TaskList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The number of tasks in the TaskList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Gets the Task at a the index specified by the param."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param idx 0-based indexing to get the Task object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The Task at the index specified by the param."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Task get(int idx) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Marks a Task (specified by the index) as done."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param taskNo A 1-based indexing of the position of the Task in the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws InvalidIndexException If the index specified is less than 1 or greater than number of tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String markTaskAsDone(int taskNo) throws InvalidIndexException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e tasks.size()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1); // The user starts counting from 1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(\"Excellent! You have completed this task: \", 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indent(task.toString(), 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Deletes a Task (specified by the index)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param taskNo A 1-based indexing of the position of the Task in the list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws InvalidIndexException If the index specified is less than 1 or greater than number of tasks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String deleteTask(int taskNo) throws InvalidIndexException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e tasks.size()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1); // The user starts counting from 1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.remove(taskNo - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(\"Understood. I have now removed this task: \", 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.indentWithNewline(task.toString(), 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        toReturn +\u003d Ui.getTaskCount(this);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Checks if the TaskList is full (full is defined by 100 tasks)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true If TaskList is full."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isFull() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tasks.size() \u003d\u003d 100;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String find(String args) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (task.toString().contains(args)) matches.add(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (matches.size() \u003d\u003d 0)  {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return Ui.indentWithNewline(\"No match found. \", 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return Ui.displayListInUi(matches, \"We have found the following matches: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String sort() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tasks.sort((taskA, taskB) -\u003e taskA.getDesc().compareTo(taskB.getDesc()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Ui.displayListInUi(this, \"All right, I have sorted it in ascending order: \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Temporary method for GUI."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Refactor this to something nicer"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String findToString(String args) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (task.toString().contains(args)) matches.add(task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (matches.size() \u003d\u003d 0)  {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return \"No matches found\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return matches.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String current \u003d (i + 1) + \". \" + this.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            sb.append(current);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 216
    }
  },
  {
    "path": "src/main/java/duke/main/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String SPACE \u003d \"    \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void indent(String toIndent) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        System.out.printf(SPACE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        System.out.println(toIndent);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Indents the input string by prepending SPACE \u003ccode\u003elevel\u003c/code\u003e times."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param toIndent The String which is to be indented."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param level An integer representing the level of indentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The String after indentation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String indent(String toIndent, int level) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (int i \u003d 0; i \u003c level; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            sb.append(SPACE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        sb.append(toIndent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Indents the input string by prepending SPACE \u003ccode\u003elevel\u003c/code\u003e times and appending a newline character."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param toIndent The String which is to be indented."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param level An integer representing the level of indentation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The String after indentation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String indentWithNewline(String toIndent, int level) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return indent(toIndent, level) + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Prints to the CLI UI with horizontal lines before and after the body."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param body The String which wants to be displayed between the two lines."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void printSection(String body) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        System.out.println(body);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Displays to the CLI UI the entry message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String logo \u003d SPACE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + \" ____        _        \\n\" + SPACE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\" + SPACE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\" + SPACE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\" + SPACE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String message \u003d indent(\"Greetings, you may call me\\n\" + logo, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        message +\u003d indent(\"How may I help you in this fine day today?\", 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        printSection(message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns the goodbye message from duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return The goodbye message from duke."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String getGoodbyeMessage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return indent(\"I bid you adieu. Until the day we meet again.\", 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void displayList(TaskList taskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // TODO: Set up the tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            indent((i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns a String representation of the TaskList which has been properly indented for ClI UI."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param taskList The TaskList which we want to get the String representation of."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param comment A String which will be prepended to the TaskList String."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A String representation of the TaskList which has been properly indented for CLI UI."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String displayListInUi(TaskList taskList, String comment) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        sb.append(indentWithNewline(comment, 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            sb.append(indentWithNewline((i + 1) + \". \" + taskList.get(i).toString(),1 ));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns a String representing the message for CLI UI regarding the task count."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param taskList The TaskList which want to count the number of tasks of."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return A string representing the message for CLI UI regarding the task count."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String getTaskCount(TaskList taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int len \u003d taskList.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (len \u003d\u003d 0 || len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return indent(\"As of now, you have \" + len + \" task in the list.\", 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return indent(\"As of now, you have \" + len + \" tasks in the list.\", 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 111
    }
  },
  {
    "path": "src/main/java/duke/processor/Processor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.processor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Processor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static void process(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        while (Parser.stillHasInputs()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String input \u003d Parser.readLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String toReturn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (Parser.commandEquals(\"bye\", input)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d Ui.getGoodbyeMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // The other print sections are after the series of if-elses, so by inserting a break in this block"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // I have to print section here"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                Ui.printSection(toReturn);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"list\", input)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d Ui.displayListInUi(tasks, \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"done\", input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                int taskNo \u003d Parser.getTaskNo(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.markTaskAsDone(taskNo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"delete\", input)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                int taskNo \u003d Parser.getTaskNo(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.deleteTask(taskNo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"deadline\", input)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new TooManyTasksException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.addDeadline(Parser.getArgs(input));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"event\", input)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new TooManyTasksException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.addEvent(Parser.getArgs(input));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"todo\", input)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (tasks.isFull()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new TooManyTasksException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.addTodo(Parser.getArgs(input));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"find\", input)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Parser.hasNoArgs(input)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.find(Parser.getArgs(input));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else if (Parser.commandEquals(\"sort\", input)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                toReturn \u003d tasks.sort();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new UnknownCommandException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Ui.printSection(toReturn);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Rewrites the entire file for every update you make here"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Probably O(n^2) time where n is the number of tasks but this is the simplest change we can make"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Deadline(String desc, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // by variable must be in YYYY-mm-dd"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String formatDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return by.format(DateTimeFormatter.ofPattern(\"dd MMM yy\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public LocalDate getBy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return String.format(\"D | %s | %s | %s\\n\", super.getStatusInteger(), super.getDesc(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                this.getBy().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Event(String desc, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // at variable must be in YYYY-mm-dd"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String formatDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return at.format(DateTimeFormatter.ofPattern(\"dd MMM yy\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public LocalDate getAt() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return String.format(\"E | %s | %s | %s\\n\", super.getStatusInteger(), super.getDesc(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                this.getAt().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String getStatusInteger() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // empty, specified by each subclasses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String doneStatus \u003d \"[\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return doneStatus + \" \" + desc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return String.format(\"T | %s | %s\\n\", super.getStatusInteger(), super.getDesc());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 12
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void hasNoArgs_reallyHasNoArgs_returnsTrue() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(Parser.hasNoArgs(\"list\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void hasNoArgs_hasArgs_returnsFalse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(Parser.hasNoArgs(\"done 1\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addTodo_sizeIncreases() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        taskList.addTodo(\"homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addDeadline_sizeIncreases() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        taskList.addDeadline(\"submission /by 2019-12-15\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addEvent_sizeIncreases() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        taskList.addEvent(\"carnival /at 2020-11-13\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "hello world"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "deadline CS2103T duke /by Thursday 23:59"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "todo CS2103T duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "event CS2101 CA component 1 /at Thursday 08:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 21
    }
  }
]
