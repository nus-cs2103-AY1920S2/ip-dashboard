[
  {
    "path": "backup/DukeOld.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "class DukeOld {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    // a common error (invalid format) handling message prefix"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static final String FORMAT_CORRECTION \u003d \"Invalid format for the instruction you gave.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"The correct format should be \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String instruction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(\"data/duke.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            boolean isEmptyFile \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                isEmptyFile \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                addEventToList(list, line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (isEmptyFile) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found but empty. Start with an empty task list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found. Load saved task list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"File not found. Start with an empty task list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Hello, this is Duke. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please give me an instruction followed by relevant description.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        while (!(instruction \u003d sc.nextLine()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                String[] instructionByWord \u003d instruction.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                int lengthOfArray \u003d instructionByWord.length;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                String actionWord \u003d instructionByWord[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                switch (actionWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"list\\\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    printList(list);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"todo a_string_describing_the_task\\\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Task t \u003d createATodoTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    t \u003d createADeadlineTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    t \u003d createAnEventTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"done a_positive_integer_indicating_the_index_of_the_task_done\\\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        int index \u003d Integer.parseInt(instructionByWord[1]) - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            throw new DukeException(\"Invalid index.\\n\" + getNumOfTasks(list)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                    + \" Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            markATaskDone(list.get(index));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        writeToHardDisk(list);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"delete a_positive_integer_indicating_the_index_of_the_task_to_be_removed\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        int index \u003d Integer.parseInt(instructionByWord[1]) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            throw new DukeException(\"Invalid index.\\n\" + getNumOfTasks(list)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                    + \" Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            deleteATask(list, index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        writeToHardDisk(list);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"find a_single_word_without_empty_space\\\"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    String keyword \u003d instructionByWord[1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    HashMap\u003cInteger, Task\u003e selectedList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    for (int j \u003d 0; j \u003c list.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        Task task \u003d list.get(j);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        String taskDescription \u003d task.getTask();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        String[] descriptionByWord \u003d taskDescription.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        for (String s : descriptionByWord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            if (s.equals(keyword)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                selectedList.put(j + 1, task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                count++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    System.out.println(count + \" task(s) were found containing keyword \" + keyword + \" :\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    for (Integer index : selectedList.keySet()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        System.out.println(index + \". \" + selectedList.get(index));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"clear\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            || !((instructionByWord[1].equals(\"all\")) || (instructionByWord[1].equals(\"done\")))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"clear all/done\\\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        clearTheList(instructionByWord[1], list, sc);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    throw new DukeException(\"Empty line input. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"Please specify an instruction followed by relevant description.\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    throw new DukeException(\"I don\u0027t understand this instruction.\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Goodbye. See you next time!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void clearTheList(String word, List\u003cTask\u003e list, Scanner sc) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Are sure you want to clear all the tasks in the list?\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Are sure you want to clear all completed tasks in the list?\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Type \\\"yes\\\" or \\\"y\\\" to proceed. Type any other input to cancel.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (input.equals(\"yes\") || input.equals(\"y\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                list.clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"List is now empty.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                for (Task t : list) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (!t.isDone()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        newList.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                list \u003d newList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"List cleared.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                printList(list);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writeToHardDisk(list);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Canceled.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void addEventToList(List\u003cTask\u003e list, String line) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] lineByWord \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d lineByWord[1].equals(\"T\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (lineByWord[0]) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Todo(isDone, lineByWord[2]));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Deadline(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Event(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void writeToHardDisk(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        FileWriter writer \u003d new FileWriter(\"data/duke.txt\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writer.write(t.toSimplerString() + \"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createAnEventTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfAt \u003d -1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfAt \u003d i;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfAt \u003d\u003d -1 || indexOfAt \u003d\u003d 1 || indexOfAt \u003d\u003d lengthOfArray) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + \"\\\"event a_string_describing_the_task /at YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfAt));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String time \u003d String.join(\" \","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfAt + 1, lengthOfArray));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Event(description, LocalDate.parse(time));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createADeadlineTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfBy \u003d -1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfBy \u003d i;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfBy \u003d\u003d -1 || indexOfBy \u003d\u003d 1 || indexOfBy \u003d\u003d (lengthOfArray - 1)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + \"\\\"deadline a_string_describing_the_task /by YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfBy));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String deadline \u003d String.join(\" \","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfBy + 1, lengthOfArray));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Deadline(description, LocalDate.parse(deadline));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createATodoTask(String[] instructionByWord, int lengthOfArray) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, 1, lengthOfArray));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static void addTaskToList(List\u003cTask\u003e list, Task task) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is stored:\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static void markATaskDone(Task taskToBeCompleted) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        taskToBeCompleted.setDone();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is marked done:\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(taskToBeCompleted);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void deleteATask(List\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task t \u003d list.remove(index);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is removed from the list:\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void printList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Here is the task list:\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(i + \". \" + list.get(i - 1));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static String getNumOfTasks(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Currently there is/are \" + list.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 315
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 40,
      "-": 21
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private boolean isClosed \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static String readFileMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Storage storage \u003d new Storage(\"duke.txt\", ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (tasks.getList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                readFileMessage \u003d ui.returnFoundEmptyFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                readFileMessage \u003d ui.returnLoadingSuccess();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            readFileMessage \u003d ui.returnLoadingError();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            logic \u003d new Logic(storage, tasks, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.linkToTaskList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static String getReadFileMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return readFileMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (input.equals(\"bye\") || input.equals(\"b\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            isClosed \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return ui.sayGoodbye();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] instructionByWords \u003d parser.parse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return logic.execute(instructionByWords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public boolean isClosed() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return isClosed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 57,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.setTitle(\"NUS-Duke task manager\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserNew.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeNew.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Duke.getReadFileMessage()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + Ui.greet() + Ui.showValidInstructions(), dukeImage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (duke.isClosed()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition((Duration.seconds(1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 61
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDate deadline, PriorityLevel level) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description, level);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[D]\" + super.toString() + \"\\n    (by: \" + deadline + \", \" + deadline.getDayOfWeek() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"D//\" + super.toSimplerString() + \"//\" + deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 22
    }
  },
  {
    "path": "src/main/java/e0148811/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(\"ERROR. Please refer to the following message:\\n\" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 7
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Event(boolean isDone, String description, LocalDate time, PriorityLevel level) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description, level);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[E]\" + super.toString() + \"\\n    (at: \" + time + \", \" + time.getDayOfWeek() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"E//\" + super.toSimplerString() + \"//\" + time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 22
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static int ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Logic(Storage s, TaskList tl, Ui u) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage \u003d s;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks \u003d tl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ui \u003d u;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String execute(String[] instructionByWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int lengthOfArray \u003d instructionByWord.length;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String actionWord \u003d instructionByWord[0].toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            switch (actionWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"c\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"clear\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return clearList(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"d\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                task \u003d createDeadlineOrEventTask(\"deadline\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return addAndStoreTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return doneOrRemoveTask(\"done\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"e\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                task \u003d createDeadlineOrEventTask(\"event\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return addAndStoreTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"f\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return findTasks(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"hello\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"hi\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return Ui.greet() + Ui.showValidInstructions();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"l\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return printList(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"p\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"priority\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return prioritiseTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"r\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"remove\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return doneOrRemoveTask(\"remove\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"t\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                task \u003d createATodoTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return addAndStoreTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            case \"\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwEmptyLineException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwUnknownCommandException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return ui.returnErrorMessage(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String prioritiseTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 3) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"priority index_of_the_task (a positive integer) level_of_priority\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \" (which include: l/low, n/normal, h/high, t/top)\\\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int index \u003d getIndexOfTaskToBePrioritised(instructionByWord) - ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        checkIfIndexIsValid(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d assignPriorityToTask(instructionByWord[2], index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage.writeToFile(tasks.getList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void checkIfIndexIsValid(int index) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.getList().size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwInvalidIndexException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String assignPriorityToTask(String priorityLevel, int index) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        PriorityLevel level \u003d determinePriorityLevel(priorityLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks.assignPriorityToTask(index, level);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return tasks.showTaskPrioritised(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private int getIndexOfTaskToBePrioritised(String[] instructionByWord) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            index \u003d Integer.parseInt(instructionByWord[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"priority index_of_the_task level_of_priority\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"(which can be one of the following: h/high, t/top)\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String clearList(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"clear a/all\\\" (if you want to remove all the tasks) \" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    \"OR \\\"clear d/done\\\" (if you only want to remove tasks that are marked done)\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (instructionByWord[1].contains(\"a\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return clearAllTasks();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else if (instructionByWord[1].contains(\"d\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                return clearCompletedTasks();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException(\"\\\"clear (all)\\\" (if you want to remove all tasks) \" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        \"OR \\\"clear d/done\\\" (if you only want to remove tasks that are marked done)\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String clearCompletedTasks() throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks.removeCompletedTasks();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"Noted, all completed tasks are removed.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage.writeToFile(tasks.getList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String clearAllTasks() throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks.removeAllTasks();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"Noted, all tasks are removed.\\nTask list is now empty.\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage.writeToFile(tasks.getList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String printList(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray \u003d\u003d 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return tasks.printList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else if (lengthOfArray \u003d\u003d 2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            PriorityLevel level \u003d determinePriorityLevel(instructionByWord[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return tasks.printListBasedOnPriority(level);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"list\\\"\" + \" OR \" + \"\\\"list a_priority_level\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    \" (which include: l/low, n/normal, h/high, t/top)\\\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private PriorityLevel determinePriorityLevel(String priorityLevel) throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (priorityLevel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"h\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return PriorityLevel.HIGH;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return PriorityLevel.LOW;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"n\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"normal\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return PriorityLevel.NORMAL;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"top\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return PriorityLevel.TOP;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwOtherException(\"Invalid level of priority.\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"Please input one of the following: l/low, n/normal, h/high, t/top\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return PriorityLevel.NORMAL;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String findTasks(String[] instructionByWords, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"find key_word (a character sequence)\\\"\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String keyword \u003d instructionByWords[1];"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        HashMap\u003cInteger, Task\u003e selectedList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int j \u003d 0; j \u003c tasks.getList().size(); j++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Task task \u003d tasks.getTask(j);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String[] descriptionByWord \u003d taskDescription.split(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (String s : descriptionByWord) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (s.contains(keyword)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    selectedList.put(j + 1, task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        StringBuilder output \u003d new StringBuilder((count + \" task(s) were found containing keyword \" + keyword + \":\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Integer index : selectedList.keySet()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            output.append(index).append(\". \").append(selectedList.get(index)).append(\"\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String doneOrRemoveTask(String command, String[] instructionByWord, int lengthOfArray)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert command.equals(\"done\") || command.equals(\"remove\") :"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                \"only two types of commands (done and remove) are considered for this method\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        \"\\\"done index_of_the_task_completed (a positive integer)\\\"\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        \"\\\"remove index_of_the_task_you_want_to_remove (a positive integer)\\\"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int index \u003d Integer.parseInt(instructionByWord[1]) - ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            checkIfIndexIsValid(index);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                output \u003d tasks.markATaskDone(index);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                output \u003d tasks.removeATask(index);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            storage.writeToFile(tasks.getList());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String addAndStoreTask(Task t) throws DukeException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d tasks.addTaskToList(t);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage.writeToFile(tasks.getList());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task createATodoTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray \u003d\u003d 1) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"todo a_string_describing_the_task\\\"\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, 1, lengthOfArray));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new Todo(false, description, PriorityLevel.NORMAL);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task createDeadlineOrEventTask(String typeOfTask, String[] instructionByWord, int lengthOfArray)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert typeOfTask.equals(\"deadline\") || typeOfTask.equals(\"event\") :"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                \"this method should only create either a deadline task or an event task\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfByOrAt \u003d getIndexOfByOrAt(typeOfTask, instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            checkIfFormatIsValid(typeOfTask, lengthOfArray, indexOfByOrAt);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return constructDeadlineOrEventTask(typeOfTask, instructionByWord, lengthOfArray, indexOfByOrAt);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date, or the date is invalid.\\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private int getIndexOfByOrAt(String typeOfTask, String[] instructionByWord, int lengthOfArray) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert typeOfTask.equals(\"deadline\") || typeOfTask.equals(\"event\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int indexOfByOrAt \u003d -1;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (typeOfTask.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfByOrAt \u003d i;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfByOrAt \u003d i;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return indexOfByOrAt;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void checkIfFormatIsValid(String typeOfTask, int lengthOfArray, int indexOfByOrAt) throws DukeException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert typeOfTask.equals(\"deadline\") || typeOfTask.equals(\"event\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (indexOfByOrAt \u003d\u003d -1 || indexOfByOrAt \u003d\u003d 1 || indexOfByOrAt \u003d\u003d (lengthOfArray - 1)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (typeOfTask.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException(\"\\\"deadline a_string_describing_the_task /by YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException(\"\\\"event a_string_describing_the_task /at YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task constructDeadlineOrEventTask(String typeOfTask, String[] instructionByWord,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                              int lengthOfArray, int indexOfByOrAt) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, 1, indexOfByOrAt));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String deadline \u003d String.join(\" \","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, indexOfByOrAt + 1, lengthOfArray));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (typeOfTask.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            task \u003d new Deadline(false, description, LocalDate.parse(deadline), PriorityLevel.NORMAL);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            task \u003d new Event(false, description, LocalDate.parse(deadline), PriorityLevel.NORMAL);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 312
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String[] parse(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 15
    }
  },
  {
    "path": "src/main/java/e0148811/duke/PriorityLevel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public enum PriorityLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    LOW, NORMAL, HIGH, TOP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 5
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Storage(String filePath, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(path));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                addEventToList(list, line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Cannot find or read the file properly.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void addEventToList(List\u003cTask\u003e list, String line) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] lineByWord \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d lineByWord[1].equals(\"T\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        PriorityLevel level;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (lineByWord[2]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            level \u003d PriorityLevel.TOP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"h\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            level \u003d PriorityLevel.HIGH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            level \u003d PriorityLevel.LOW;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            level \u003d PriorityLevel.NORMAL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (lineByWord[0]) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            assert lineByWord.length \u003d\u003d 4: \"A correct line description should contain 4 parts separated by \\\"//\\\"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Todo(isDone, lineByWord[3], level));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            assert lineByWord.length \u003d\u003d 5: \"A correct line description should contain 5 parts separated by \\\"//\\\"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Deadline(isDone, lineByWord[3], LocalDate.parse(lineByWord[4]), level));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            assert lineByWord.length \u003d\u003d 5: \"A correct line description should contain 5 parts separated by \\\"//\\\"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Event(isDone, lineByWord[3], LocalDate.parse(lineByWord[4]), level));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void writeToFile(List\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            FileWriter writer \u003d new FileWriter(\"duke.txt\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                writer.write(t.toSimplerString() + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwIOException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 80
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static String DONE \u003d \"    Done   \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static String NOT_DONE \u003d \"Not Done\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private PriorityLevel level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Task(boolean isDone, String description, PriorityLevel level) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        task \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String priorityIndication \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"[  not important ] \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"[      ordinary      ] \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"[    important!    ] \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case TOP:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"[very important!!] \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return \"[\" + Task.DONE + \"]\" + priorityIndication + task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return \"[\" + Task.NOT_DONE + \"]\" + priorityIndication + task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String priorityIndication \u003d \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"l\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"h\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case TOP:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            priorityIndication \u003d \"t\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            isDone \u003d \"T\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            isDone \u003d \"F\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return isDone + \"//\" + priorityIndication + \"//\" + getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public PriorityLevel getPriorityLevel() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void setPriority(PriorityLevel level) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 82
    }
  },
  {
    "path": "src/main/java/e0148811/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static int ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void assignPriorityToTask(int index, PriorityLevel level) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size() : \"index is out of bound\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        task.setPriority(level);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"Here is the task list:\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            output.append(i).append(\") \")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    .append(list.get(i - ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX)).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output.append(getTotalNumOfTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String printListBasedOnPriority(PriorityLevel level) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"Here is the task list of the given priority level:\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Task task \u003d list.get(i - ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (task.getPriorityLevel().equals(level)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                output.append(i).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output.append(getNumOfSelectedTasks(count));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output.append(getTotalNumOfTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String getNumOfSelectedTasks(int count) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return count + \" task(s) belong to the specified priority level.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String getTotalNumOfTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Currently there is/are \" + list.size() + \" task(s) in the task list.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String addTaskToList(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"Noted, the following task is stored:\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d getTotalNumOfTasks();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String markATaskDone(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert index \u003c list.size() \u0026\u0026 index \u003e\u003d 0 : \"index is out of bound\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task taskToBeCompleted \u003d list.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (taskToBeCompleted.isDone()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            output +\u003d \"The specified task is already marked done:\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            taskToBeCompleted.setDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            output +\u003d \"Noted, the following task is marked done:\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d ((index + ONE_TO_CONVERT_BETWEEN_1_BASED_AND_0_BASED_INDEX)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \". \" + taskToBeCompleted);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String removeATask(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert index \u003c list.size() : \"index is out of bound\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task t \u003d list.remove(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"Noted, the following task is removed from the list:\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d t;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d getTotalNumOfTasks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void removeAllTasks() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void removeCompletedTasks() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (!t.isDone()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                newList.add(t);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d newList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"List cleared.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        printList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String showTaskPrioritised(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"Noted. The priority level of the following task has been set:\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d list.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 120
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Todo(boolean isDone, String description, PriorityLevel level) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description, level);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"T//\" + super.toSimplerString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 17
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static final String FORMAT_CORRECTION \u003d \"Invalid format for the instruction you gave.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"The correct format should be \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void linkToTaskList(TaskList list) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks \u003d list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwInvalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"Invalid index.\\n\" + tasks.getTotalNumOfTasks()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String returnLoadingError() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"File not found. Start with an empty task list.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String returnFoundEmptyFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"File found but empty. Start with an empty task list.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String returnLoadingSuccess() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"File found. Load saved task list.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Hello, this is NUS-Duke. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please give me an instruction followed by relevant description.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String sayGoodbye() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Goodbye. See you next time!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String returnErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwWrongFormatException(String format) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(FORMAT_CORRECTION + format + \".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwIOException() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"IOException occurs.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwOtherException(String s) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(s);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwEmptyLineException() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"Empty line input. \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please specify an instruction followed by relevant description.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwUnknownCommandException() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"I don\u0027t understand this instruction.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"The valid instructions include: b/bye, c/clear, d/deadline, \" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                \"done, e/vent, f/find, l/list, p/priority, r/remove, t/todo\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static String showValidInstructions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String output \u003d \"\\nThe valid instructions are as follows:\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"b/bye: exit the app\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"c/clear: clear all tasks or only completed tasks\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"d/deadline: add a deadline task into task list\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"done: mark a task as done\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"e/event: add an event task into task list\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"f/find: find tasks by some key word\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"l/list: list all tasks or tasks with some priority level\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"p/priority: change the priority level of a task\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"r/remove: remove a task from task list\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        output +\u003d \"t/todo: add a todo task into task list\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 81
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: gold;\" text\u003d\"Label\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \u003cInsets bottom\u003d\"3.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            \u003cInsets right\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 19
    }
  },
  {
    "path": "src/test/build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "sourceCompatibility \u003d 1.8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 16
    }
  }
]
