[
  {
    "path": "backup/DukeOld.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "class DukeOld {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    // a common error (invalid format) handling message prefix"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static final String FORMAT_CORRECTION \u003d \"Invalid format for the instruction you gave.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"The correct format should be \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String instruction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(\"data/duke.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            boolean isEmptyFile \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                isEmptyFile \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                addEventToList(list, line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (isEmptyFile) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found but empty. Start with an empty task list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found. Load saved task list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"File not found. Start with an empty task list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Hello, this is Duke. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please give me an instruction followed by relevant description.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        while (!(instruction \u003d sc.nextLine()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                String[] instructionByWord \u003d instruction.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                int lengthOfArray \u003d instructionByWord.length;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                String actionWord \u003d instructionByWord[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                switch (actionWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"list\\\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    printList(list);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"todo a_string_describing_the_task\\\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Task t \u003d createATodoTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    t \u003d createADeadlineTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    t \u003d createAnEventTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addTaskToList(list, t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    writeToHardDisk(list);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"done a_positive_integer_indicating_the_index_of_the_task_done\\\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        int index \u003d Integer.parseInt(instructionByWord[1]) - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            throw new DukeException(\"Invalid index.\\n\" + getNumOfTasks(list)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                    + \" Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            markATaskDone(list.get(index));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        writeToHardDisk(list);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"delete a_positive_integer_indicating_the_index_of_the_task_to_be_removed\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        int index \u003d Integer.parseInt(instructionByWord[1]) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            throw new DukeException(\"Invalid index.\\n\" + getNumOfTasks(list)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                    + \" Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            deleteATask(list, index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        writeToHardDisk(list);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                + \"\\\"find a_single_word_without_empty_space\\\"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    String keyword \u003d instructionByWord[1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    HashMap\u003cInteger, Task\u003e selectedList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    for (int j \u003d 0; j \u003c list.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        Task task \u003d list.get(j);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        String taskDescription \u003d task.getTask();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        String[] descriptionByWord \u003d taskDescription.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        for (String s : descriptionByWord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            if (s.equals(keyword)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                selectedList.put(j + 1, task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                count++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    System.out.println(count + \" task(s) were found containing keyword \" + keyword + \" :\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    for (Integer index : selectedList.keySet()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        System.out.println(index + \". \" + selectedList.get(index));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"clear\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (instructionByWord.length !\u003d 2"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            || !((instructionByWord[1].equals(\"all\")) || (instructionByWord[1].equals(\"done\")))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        throw new DukeException(FORMAT_CORRECTION + \"\\\"clear all/done\\\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        clearTheList(instructionByWord[1], list, sc);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    throw new DukeException(\"Empty line input. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"Please specify an instruction followed by relevant description.\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    throw new DukeException(\"I don\u0027t understand this instruction.\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                            + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Goodbye. See you next time!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void clearTheList(String word, List\u003cTask\u003e list, Scanner sc) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Are sure you want to clear all the tasks in the list?\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Are sure you want to clear all completed tasks in the list?\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Type \\\"yes\\\" or \\\"y\\\" to proceed. Type any other input to cancel.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (input.equals(\"yes\") || input.equals(\"y\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                list.clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"List is now empty.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                for (Task t : list) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    if (!t.isDone()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        newList.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                list \u003d newList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"List cleared.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                printList(list);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writeToHardDisk(list);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Canceled.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void addEventToList(List\u003cTask\u003e list, String line) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] lineByWord \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d lineByWord[1].equals(\"T\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (lineByWord[0]) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Todo(isDone, lineByWord[2]));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Deadline(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Event(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void writeToHardDisk(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        FileWriter writer \u003d new FileWriter(\"data/duke.txt\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writer.write(t.toSimplerString() + \"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createAnEventTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfAt \u003d -1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfAt \u003d i;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfAt \u003d\u003d -1 || indexOfAt \u003d\u003d 1 || indexOfAt \u003d\u003d lengthOfArray) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + \"\\\"event a_string_describing_the_task /at YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfAt));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String time \u003d String.join(\" \","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfAt + 1, lengthOfArray));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Event(description, LocalDate.parse(time));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createADeadlineTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfBy \u003d -1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfBy \u003d i;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfBy \u003d\u003d -1 || indexOfBy \u003d\u003d 1 || indexOfBy \u003d\u003d (lengthOfArray - 1)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                throw new DukeException(FORMAT_CORRECTION"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + \"\\\"deadline a_string_describing_the_task /by YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfBy));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String deadline \u003d String.join(\" \","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfBy + 1, lengthOfArray));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Deadline(description, LocalDate.parse(deadline));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static Task createATodoTask(String[] instructionByWord, int lengthOfArray) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, 1, lengthOfArray));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static void addTaskToList(List\u003cTask\u003e list, Task task) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is stored:\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static void markATaskDone(Task taskToBeCompleted) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        taskToBeCompleted.setDone();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is marked done:\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(taskToBeCompleted);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void deleteATask(List\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task t \u003d list.remove(index);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is removed from the list:\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void printList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Here is the task list:\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(i + \". \" + list.get(i - 1));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks(list));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static String getNumOfTasks(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Currently there is/are \" + list.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 315
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveVersion \u003d \"0.2.3\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 40,
      "-": 21
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import e0148811.duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        parser \u003d new Parser(ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.showLogo();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.greet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        while (!parser.readInputLine().equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String[] instructionByWord \u003d parser.breakIntoWords();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                int lengthOfArray \u003d instructionByWord.length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                String actionWord \u003d instructionByWord[0].toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                switch (actionWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    printList(lengthOfArray);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Task task \u003d createATodoTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addAndStoreTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    task \u003d createADeadlineTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addAndStoreTask(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    task \u003d createAnEventTask(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    addAndStoreTask(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    doneOrDeleteATask(\"done\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    doneOrDeleteATask(\"delete\", instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    findTasks(instructionByWord[1], lengthOfArray);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"clear\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    clearList(instructionByWord, lengthOfArray);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                case \"\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    ui.throwEmptyLineException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    ui.throwUnknownCommandException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.printErrorMessage(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        ui.sayGoodbye();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    void clearList(String[] instructionByWord, int lengthOfArray) throws DukeException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                || !((instructionByWord[1].equals(\"all\")) || (instructionByWord[1].equals(\"done\")))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"clear all/done\\\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String word \u003d instructionByWord[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"Are sure you want to clear all the tasks in the list?\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"Are sure you want to clear all completed tasks in the list?\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(\"Type \\\"yes\\\" or \\\"y\\\" to proceed. Type any other input to cancel.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String input \u003d parser.readInputLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (input.equals(\"yes\") || input.equals(\"y\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (word.equals(\"all\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    tasks.clearTheList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    System.out.println(\"List is now empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    tasks.cleanTheList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                storage.writeToHardDisk(tasks.getList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"Canceled.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void printList(int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"list\\\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks.printList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    void findTasks(String keyword, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"find a_single_word_without_empty_space\\\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        HashMap\u003cInteger, Task\u003e selectedList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int j \u003d 0; j \u003c tasks.getList().size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Task task \u003d tasks.getTask(j);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String[] descriptionByWord \u003d taskDescription.split(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (String s : descriptionByWord) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (s.equals(keyword)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    selectedList.put(j + 1, task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(count + \" task(s) were found containing keyword \" + keyword + \" :\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Integer index : selectedList.keySet()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(index + \". \" + selectedList.get(index));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void doneOrDeleteATask(String command, String[] instructionByWord, int lengthOfArray)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert command.equals(\"done\") || command.equals(\"delete\"):"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                \"only two types of commands (done and delete) are considered for this method\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray !\u003d 2) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        \"\\\"done a_positive_integer_indicating_the_index_of_the_task_done\\\"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        \"\\\"delete a_positive_integer_indicating_the_index_of_the_task_you_want_to_delete\\\"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int index \u003d Integer.parseInt(instructionByWord[1]) - 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (index \u003e\u003d tasks.getList().size() || index \u003c 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                throw new DukeException(\"Invalid index.\\n\" + tasks.getNumOfTasks()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                        + \" Please note that the index is one-based (begins with 1 instead of 0).\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    tasks.markATaskDone(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    tasks.deleteATask(index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            storage.writeToHardDisk(tasks.getList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"done a_positive_integer\\\"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwIOException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    void addAndStoreTask(Task t) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        tasks.addTaskToList(t);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        storage.writeToHardDisk(tasks.getList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task createATodoTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (lengthOfArray \u003d\u003d 1) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            ui.throwWrongFormatException(\"\\\"todo a_string_describing_the_task\\\"\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                Arrays.copyOfRange(instructionByWord, 1, lengthOfArray));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task createADeadlineTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfBy \u003d -1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfBy \u003d i;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfBy \u003d\u003d -1 || indexOfBy \u003d\u003d 1 || indexOfBy \u003d\u003d (lengthOfArray - 1)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException(\"\\\"deadline a_string_describing_the_task /by YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfBy));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String deadline \u003d String.join(\" \","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfBy + 1, lengthOfArray));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Deadline(description, LocalDate.parse(deadline));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Task createAnEventTask(String[] instructionByWord, int lengthOfArray) throws DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            int indexOfAt \u003d -1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            for (int i \u003d 1; i \u003c lengthOfArray; i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                if (instructionByWord[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    indexOfAt \u003d i;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (indexOfAt \u003d\u003d -1 || indexOfAt \u003d\u003d 1 || indexOfAt \u003d\u003d lengthOfArray) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                ui.throwWrongFormatException(\"\\\"event a_string_describing_the_task /at YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String description \u003d String.join(\" \","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, 1, indexOfAt));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String time \u003d String.join(\" \","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    Arrays.copyOfRange(instructionByWord, indexOfAt + 1, lengthOfArray));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return new Event(description, LocalDate.parse(time));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Incorrect format of date.\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                    + \"The correct format should be YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Invalid value for year/month/date\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 251,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.setTitle(\"NUS-Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 49
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(false, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline + \", \" + deadline.getDayOfWeek() + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"D//\" + super.toSimplerString() + \"//\" + deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 27
    }
  },
  {
    "path": "src/main/java/e0148811/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(\"ERROR. Please refer to the following message and try again:\\n\" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 7
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Event(String description, LocalDate time) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(false, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Event(boolean isDone, String description, LocalDate time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time + \", \" + time.getDayOfWeek() + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"E//\" + super.toSimplerString() + \"//\" + time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 27
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    String currentLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Parser(Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String readInputLine() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        currentLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return currentLine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String[] breakIntoWords() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return currentLine.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 23
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(path));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            boolean isEmptyFile \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                isEmptyFile \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                addEventToList(list, line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (isEmptyFile) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found but empty. Start with an empty task list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                System.out.println(\"File found. Load saved task list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            throw new DukeException(\"Cannot find or read the file properly.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private static void addEventToList(List\u003cTask\u003e list, String line) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String[] lineByWord \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert lineByWord.length \u003d\u003d 4:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                \"A correct line description should contain 4 parts separated by \\\"//\\\"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d lineByWord[1].equals(\"T\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        switch (lineByWord[0]) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Todo(isDone, lineByWord[2]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Deadline(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            list.add(new Event(isDone, lineByWord[2], LocalDate.parse(lineByWord[3])));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void writeToHardDisk(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        FileWriter writer \u003d new FileWriter(\"data/duke.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            writer.write(t.toSimplerString() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 65
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static String DONE \u003d \"Done\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static String NOT_DONE \u003d \"Not Done\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        task \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return \"[\" + Task.DONE + \"] \" + task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            return \"[\" + Task.NOT_DONE + \"] \" + task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        String isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            isDone \u003d \"T\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            isDone \u003d \"F\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return isDone + \"//\" + getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 44
    }
  },
  {
    "path": "src/main/java/e0148811/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Here is the task list:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            System.out.println(i + \". \" + list.get(i - 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String getNumOfTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"Currently there is/are \" + list.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void addTaskToList(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is stored:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void markATaskDone(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert index \u003c list.size(): \"index is out of bound\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task taskToBeCompleted \u003d list.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        taskToBeCompleted.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is marked done:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(taskToBeCompleted);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void deleteATask(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        assert index \u003c list.size(): \"index is out of bound\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        Task t \u003d list.remove(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Noted, the following task is removed from the list:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(getNumOfTasks());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void clearTheList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void cleanTheList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            if (!t.isDone()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                newList.add(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        list \u003d newList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"List cleared.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        printList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 75
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(false, description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public Todo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public String toSimplerString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        return \"T//\" + super.toSimplerString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 21
    }
  },
  {
    "path": "src/main/java/e0148811/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "package e0148811.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    static final String FORMAT_CORRECTION \u003d \"Invalid format for the instruction you gave.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "            + \"The correct format should be \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"File not found, or cannot be read properly. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Start with an empty task list.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void showLogo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Hello, this is NUS-Duke. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please give me an instruction followed by relevant description.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void sayGoodbye() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.out.println(\"Goodbye. See you next time!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void printErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwWrongFormatException(String format) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(FORMAT_CORRECTION + format);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwIOException() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"IOException occurs.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwOtherException(String s) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(s);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwEmptyLineException() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"Empty line input. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"Please specify an instruction followed by relevant description.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    public void throwUnknownCommandException() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        throw new DukeException(\"I don\u0027t understand this instruction.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "                + \"The valid instructions include: todo, deadline, event, list, done, bye.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 56
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 19
    }
  },
  {
    "path": "src/test/build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "sourceCompatibility \u003d 1.8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lm5lm5"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lm5lm5": 16
    }
  }
]
