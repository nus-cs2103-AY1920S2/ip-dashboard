[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xlint:unchecked\" \u003c\u003c \"-Xlint:deprecation\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    testImplementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "test {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    useJUnit()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    maxHeapSize \u003d \u00271G\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "apply plugin: \u0027java\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "javadoc {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    source \u003d sourceSets.main.allJava"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    classpath \u003d configurations.compile"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 45,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Gui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Main class of this application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Gui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new `Duke` instance."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This sets up the UI, and loads task data from file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * For the command-line frontend, this attaches a `Scanner` to standard input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //ui \u003d new Cli();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui \u003d new Gui(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.startMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showSaveNotFoundMessage(storage.STORAGE_SAVE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.endMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.startMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.endMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses and processes a command string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param command Command string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void processCommand(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.startMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Optional\u003cCommand\u003e c \u003d new Parser(command).parse();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (c.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                Command cmd \u003d c.get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                cmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                isRunning \u003d isRunning \u0026\u0026 !cmd.isExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                ui.showUnknownCommandMessage(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.endMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //We have to move the cleanup code here because `Gui` doesn\u0027t use `Duke#run()`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!isRunning) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            cleanup();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected void cleanup() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            storage.save(tasks.getTaskState());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.startMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.endMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Runs the main loop of the command-line application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This function is not called in the graphical front-end."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * \u003cp\u003eFirst greets the user, then reads command lines, responding to each."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * If an exit command is entered, it is processed,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * then the goodbye message is displayed and the program exits from the loop."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.startMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showGreeting();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.endMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String command \u003d ui.readCommandString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            processCommand(command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        cleanup();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Saves the tasks in the internal `TaskList` to a file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays an error message on failure."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void saveTasks() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            storage.save(tasks.getTaskState());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.startMessage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.endMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.start(stage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        cleanup();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 130,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * This class launches the GUI frontend of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * This class is needed to avoid classpath issues"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * (since JavaFX expects the `Application` subclass to be available as a module, instead of a .jar)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs and runs an instance of the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/javafxports/openjdk-jfx/issues/236#issuecomment-426583174\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     *  Include dependencies in jar #236"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * \u003c/a\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"bye\" command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The \"bye\" command takes in no arguments, and any provided arguments will be ignored."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Prints the goodbye message in the UI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns true, since \"bye\" is an exit command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 28
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a syntatically valid command input from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The `Command` must be implemented by any command supported by Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * However, the actual command parsing is done in `Parser`, as required in A-MoreOOP increment specification."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Executes the command, mutating `tasks` and writing to the UI as needed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns if Duke should exit after this command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return boolean, true if the command is an exit command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"deadline\" command from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new DeadlineCommand instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param deadline Deadline for the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DeadlineCommand(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a new Deadline task specified by this DeadlineCommand into the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Task newTask \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showAddTaskMessage(newTask, tasks.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"deadline\" is not an exit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"delete\" command from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new DeleteCommand instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param taskIndex 1-index of the task to be deleted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the taskIndex-th task from the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Task task \u003d tasks.removeTask(taskIndex - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showRemoveTaskMessage(task, tasks.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Task number must be within the range of current tasks\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"delete\" is not an exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"done\" command from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new DoneCommand instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param taskIndex 1-index of the task to be marked as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Marks the taskIndex-th task in the task list as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Task task \u003d tasks.getTask(taskIndex - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            tasks.markTaskAsDone(taskIndex - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showDoneTaskMessage(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Task number must be within the range of current tasks\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"done\" is not an exit command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates an \"event\" command from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private LocalDate eventTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new EventCommand instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param eventTime Event time for the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public EventCommand(String description, LocalDate eventTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a new Event task specified by this EventCommand into the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Task newTask \u003d new Event(description, eventTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showAddTaskMessage(newTask, tasks.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"event\" is not an exit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 51
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    String searchString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public FindCommand(String searchString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Finds and displays tasks whose description matches the query string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showMatchingTasksMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        int c \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (task.description().indexOf(searchString) !\u003d -1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                c++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                ui.showNumberedEntry(c, task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"help\" command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    String commandName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new `HelpCommand` instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param commandName Queried command name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public HelpCommand(String commandName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a help entry for the command specified by this `HelpCommand`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showHelpMessage(commandName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"help\" is not an exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"list\" command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The \"list\" command takes in no arguments, and will be rejected by `Parser` if arguments are supplied."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Prints the tasks in the task list to the UI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showNumberedEntry(i + 1, tasks.getTask(i));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"list\" is not an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 30
    }
  },
  {
    "path": "src/main/java/duke/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"sort\" command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The \"sort\" command takes in no arguments, and any provided arguments will be ignored."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class SortCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Sorts all tasks in chronological order, then lists the tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Tasks without a date (e.g. `ToDo`) will be placed after all tasks with a date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.sort();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showSortMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            ui.showNumberedEntry(i + 1, tasks.getTask(i));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"sort\" is not an exit command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a \"todo\" command from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ToDoCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new ToDoCommand instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ToDoCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a new ToDo task specified by this ToDoCommand into the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks TaskList object to store tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param ui UI object for interfacing with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param storage Storage object to read and write TaskList state from files"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null \u0026\u0026 ui !\u003d null \u0026\u0026 storage !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Task newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ui.showAddTaskMessage(newTask, tasks.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns false, since \"todo\" is not an exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 45
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * General exception class for Duke classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The error message will be directly used with e.getMessage() to provide error messages to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new DukeException instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param message User-friendly error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates and parses the information of a single command string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new `Parser` instance from a command string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param command Command string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Parser(String command) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    interface DukeOptionalCommand {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        public Optional\u003cCommand\u003e get() throws DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Parses the command string and returns the corresponding command object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * If the command string does not correspond to any known command, returns an empty Optional."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return `Optional` of a `Command` object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws DukeException if the command string is invalid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Optional\u003cCommand\u003e parse() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Optional\u003cCommand\u003e res \u003d Stream.\u003cDukeOptionalCommand\u003eof("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::byeCommand,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::deadlineCommand,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::deleteCommand,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::doneCommand,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::eventCommand,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::listCommand,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::todoCommand,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::findCommand,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::sortCommand,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                this::helpCommand)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .map(DukeOptionalCommand::get)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .filter(Optional::isPresent)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .map(Optional::get)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static LocalDate parseDate(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            //return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"uuuu-mm-dd\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Date must be a valid date in the yyyy-mm-dd format\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern listPattern \u003d Pattern.compile(\"^bye( .*)?$\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher listMatcher \u003d listPattern.matcher(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (listMatcher.find()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.of(new ByeCommand());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e listCommand() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern listPattern \u003d Pattern.compile(\"^list( (.*))?\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher listMatcher \u003d listPattern.matcher(command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (listMatcher.find()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String rem \u003d listMatcher.group(2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (rem !\u003d null \u0026\u0026 !rem.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"List command does not accept any arguments\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new ListCommand());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e doneCommand() throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^done( (.*))?\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (doneMatcher.find()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                String taskString \u003d doneMatcher.group(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (taskString \u003d\u003d null || taskString.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(taskString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return Optional.of(new DoneCommand(taskIndex));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Task number must be an integer\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e deleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^delete( (.*))?\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (doneMatcher.find()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                String taskString \u003d doneMatcher.group(2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (taskString \u003d\u003d null || taskString.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(taskString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return Optional.of(new DeleteCommand(taskIndex));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Task number must be an integer\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e todoCommand() throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^todo( (.*))?\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (doneMatcher.find()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String taskString \u003d doneMatcher.group(2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (taskString \u003d\u003d null || taskString.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Task description cannot be empty\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new ToDoCommand(taskString));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e deadlineCommand() throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern deadlinePattern \u003d Pattern.compile(\"^deadline ?((.*?)( /by ?(.*))?)$\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher deadlineMatcher \u003d deadlinePattern.matcher(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (deadlineMatcher.find()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String taskDescription \u003d deadlineMatcher.group(2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String deadline \u003d deadlineMatcher.group(4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (taskDescription \u003d\u003d null || taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Task description cannot be empty\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else if (deadline \u003d\u003d null || deadline.isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Deadline cannot be empty\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new DeadlineCommand(taskDescription, parseDate(deadline)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e eventCommand() throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern eventPattern \u003d Pattern.compile(\"^event ?((.*?)( /at ?(.*))?)$\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher eventMatcher \u003d eventPattern.matcher(command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (eventMatcher.find()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String taskDescription \u003d eventMatcher.group(2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String eventTime \u003d eventMatcher.group(4);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (taskDescription \u003d\u003d null || taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Task description cannot be empty\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else if (eventTime \u003d\u003d null || eventTime.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Event time cannot be empty\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new EventCommand(taskDescription, parseDate(eventTime)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e findCommand() throws DukeException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^find( (.*))?\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (doneMatcher.find()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String searchString \u003d doneMatcher.group(2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (searchString \u003d\u003d null || searchString.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Search string cannot be empty\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new FindCommand(searchString));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e sortCommand() throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern listPattern \u003d Pattern.compile(\"^sort( .*)?$\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher listMatcher \u003d listPattern.matcher(command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (listMatcher.find()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.of(new SortCommand());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Optional\u003cCommand\u003e helpCommand() throws DukeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^help( (.*))?\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(command);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (doneMatcher.find()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            String commandString \u003d doneMatcher.group(2);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (commandString \u003d\u003d null || commandString.isEmpty()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                throw new DukeException(\"Command name cannot be empty\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return Optional.of(new HelpCommand(commandString));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 239
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates serialization and external storage of the task list state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static final String STORAGE_SAVE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private ArrayList\u003cTask\u003e loadTaskState()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        throws IOException, ClassNotFoundException, ClassCastException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        FileInputStream f \u003d new FileInputStream(STORAGE_SAVE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObjectInputStream out \u003d new ObjectInputStream(f);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        @SuppressWarnings(\"unchecked\") //necessary due to unchecked cast to ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d (ArrayList\u003cTask\u003e)out.readObject();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Object obj : tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            assert obj instanceof Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Loads the `ArrayList` of `Task`s from the path specified in `STORAGE_SAVE_PATH`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws FileNotFoundException  if the file containing the task lists does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws DukeException if the task list is malformed, or if an I/O error occured"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            return loadTaskState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Failed to load task list\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Malformed task list file\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void saveTaskState(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //recursively create directories to save path if they don\u0027t exist"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Files.createDirectories(Paths.get(STORAGE_SAVE_PATH).getParent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //save to file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        FileOutputStream f \u003d new FileOutputStream(STORAGE_SAVE_PATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ObjectOutputStream o \u003d new ObjectOutputStream(f);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        o.writeObject(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        o.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Saves the `ArrayList` of `Task`s to the path specified in `STORAGE_SAVE_PATH`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @throws DukeException if the `tasks` list cannot be saved to file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            saveTaskState(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            throw new DukeException(\"Failed to save task list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 85
    }
  },
  {
    "path": "src/main/java/duke/tasks/DatedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "//Adapted from https://nus-cs2103-ay1920s2.github.io/website/schedule/week2/project.html"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates an abstract dated task of the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Dated tasks have a date whose semantics is subclass-defined."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class DatedTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new DatedTask instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public DatedTask(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the date associated with the `DatedTask`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Associated `LocalDate` date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a deadline task which has both a description and a deadline date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Deadline extends DatedTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new Deadline instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param deadline Deadline for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the task deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Deadline for the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates an event task which has both a description and an event date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Event extends DatedTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private LocalDate eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new Event instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param eventTime Event time for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Event(String description, LocalDate eventTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert description !\u003d null \u0026\u0026 eventTime !\u003d null; //Precondition: non-null arguments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the event date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Event date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 40
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "//Adapted from https://nus-cs2103-ay1920s2.github.io/website/schedule/week2/project.html"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates an abstract task of the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The `Task` object minimally stores a task description,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * and a flag for whether the user has marked the task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new Task instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns a Unicode status icon representing if this task is marked as completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Icon string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Task description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String description() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns whether this task is marked as completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return whether task is marked as completed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Marks this task is marked as completed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 54
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Methods are provided to insert, get and remove tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs an empty `TaskList` object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a `TaskList` object representing an `ArrayList\u0026lt;Task\u0026gt;` list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the underlying list of tasks represented by this object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the 0-indexed index-th task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of task, 0-indexed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return index-th task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Adds a task to the bottom of the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Removes the 0-indexed index-th task from the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of task, 0-indexed to be removed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return The removed task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Marks the 0-indexed index-th task as completed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of task, 0-indexed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Number of tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Sorts the tasks in the list in ascending task date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Tasks without a date (e.g. `ToDo`) will be placed after all tasks with a date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Collections.sort(tasks, (taskA, taskB) -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (taskA instanceof DatedTask) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                if (taskB instanceof DatedTask) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    DatedTask u \u003d (DatedTask)taskA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    DatedTask v \u003d (DatedTask)taskB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    //return ((DatedTask)taskA).getDate().compare(((DatedTask)taskB).getDate());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return u.getDate().compareTo(v.getDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            if (taskB instanceof DatedTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                //Relative ordering of taskA and taskB is preserved"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                //since Collections.sort is a stable sort"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 107
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a todo task which has a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new ToDo instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 19
    }
  },
  {
    "path": "src/main/java/duke/ui/Cli.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.util.PrintUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates the (command line) user interface provided to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The `Cli` class provides utility methods to show various message types."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Messages will be displayed in standard output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * \u003cp\u003eHeader and footer lines are printed by Cli#startMessage() and Cli#endMessage(), respectively."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Cli implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: create and store a Message object instead of using a static buffer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Construct a new `Cli` instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This constructor creates a new `Scanner` reading from standard input,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * so race conditions may be possible if other `Scanner` objects also read from standard input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Cli() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the start of a new message to be printed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void startMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the end of a new message to be printed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void endMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        System.out.print(PrintUtil.flushBuffer());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Reads a single-line command string from the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return command string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String readCommandString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a horizontal line."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a numbered task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task to be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showNumberedEntry(int index, Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"%d.%s\\n\", index, task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the message of the provided `DukeException`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param e exception of type DukeException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Error: %s\\n\",e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message that the task list could not be found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param savePath Intended path of the file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSaveNotFoundMessage(String savePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Error: Task list not found\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"       Duke will create a new task list file at %s\\n\", savePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a greeting, separated by horizontal header lines."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the goodbye message."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Header lines are NOT printed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Goodbye\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showAddTaskMessage(Task task, int remainingCount) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Added task:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Now you have %d task(s).\\n\", remainingCount);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is removed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showRemoveTaskMessage(Task task, int remainingCount) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Removed task:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Now you have %d task(s).\\n\", remainingCount);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is marked as completed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task marked as complete"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showDoneTaskMessage(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Marked task as done:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays an error message when a command is not recognized."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param command Command string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showUnknownCommandMessage(String command) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Error: Unknown command: %s\\n\", command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message to indicate matching tasks from a query."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showMatchingTasksMessage() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message when tasks are sorted."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSortMessage() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Sorted tasks by date. Here are your tasks:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a help command for a given message name."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param commandName Command name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showHelpMessage(String commandName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: bye\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Saves task list to file and exits.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: deadline [task description] /by [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new Deadline task into the task list.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: delete [i]\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Removes the i-th task from the task list.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: done [i]\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Marks the i-th task in the task list as done.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: event [task description] /at [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new Event task into the task list.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: find [task description]\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Finds and displays tasks whose description matches the query string.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: list\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Displays the tasks in the task list.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: sort\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Sorts all tasks in chronological order, then lists the tasks.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: todo [task description]\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new ToDo task into the task list.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintf(\"Unknown command \\\"%s\\\"\\n\", commandName);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Closes and cleans up resources held by the UI."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method does nothing for the command-line interface."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 214
    }
  },
  {
    "path": "src/main/java/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "//Code for GUI is heavily adapted from the Duke JavaFX tutorials, available at"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "//https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart1.md"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.util.PrintUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a graphical user interface (GUI) frontend of Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The `Gui` class implements a GUI which allows the user to enter commands and view its responses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The task list is saved when the user enters the \"bye\" command,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * or when the user closes the window."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class Gui implements Ui {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private boolean isClosed \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Font font \u003d new Font(\"Liberation Mono\", 15.0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private ArrayList\u003cMessage\u003e messageBuffer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Constructs a new `Gui` instance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Each `Duke` object should construct at most one `Gui` instance using itself as the parameter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param duke The corresponding `Duke` instance"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public Gui(Duke duke) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        messageBuffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.setIndentLevel(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        textToAdd.setFont(font);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Receives control of the JavaFX `Application` from `Duke`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Sets up GUI components and callbacks, then runs the event loop until termination."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param stage `Stage` object received from `Duke#start`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert stage !\u003d null; //Precondition: `stage` is not null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        ScrollPane scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //stage.setResizable(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        startMessage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        showGreeting();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        endMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            duke.processCommand(readCommandString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            duke.processCommand(readCommandString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //Finally, add pending messages to the `dialogContainer`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        processMessageBuffer();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the start of a new message to be printed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void startMessage() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the end of a new message to be printed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void endMessage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String buffer \u003d PrintUtil.flushBuffer();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        messageBuffer.add(new Message(String.format(\"%s\", buffer)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (this.stage !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            processMessageBuffer();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void displayMessage(Message message) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assert stage !\u003d null \u0026\u0026 dialogContainer !\u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        Label label \u003d getDialogLabel(message.text);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        dialogContainer.getChildren().add(label);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private void processMessageBuffer() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        for (Message m : messageBuffer) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            displayMessage(m);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        messageBuffer.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Reads a single-line command string from the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return command string"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String readCommandString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String command \u003d userInput.getText();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        displayMessage(new Message(String.format(\"\u003e %s\", command)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a horizontal line."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a numbered task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of the task"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task to be displayed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showNumberedEntry(int index, Task task) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"%d.%s\\n\", index, task);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the message of the provided `DukeException`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param e exception of type DukeException"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Error: %s\\n\",e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message that the task list could not be found."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param savePath Intended path of the file"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSaveNotFoundMessage(String savePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Error: Task list not found\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"       Duke will create a new task list file at %s\\n\", savePath);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.printHeaderLine();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a greeting."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the goodbye message."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Header lines are not printed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Goodbye\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is added."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showAddTaskMessage(Task task, int remainingCount) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Added task:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Now you have %d task(s).\\n\", remainingCount);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is removed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showRemoveTaskMessage(Task task, int remainingCount) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Removed task:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Now you have %d task(s).\\n\", remainingCount);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is marked as completed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task marked as complete"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showDoneTaskMessage(Task task) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Marked task as done:\\n  %s\\n\", task);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays an error message when a command is not recognized."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param command Command string"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showUnknownCommandMessage(String command) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintf(\"Error: Unknown command: %s\\n\", command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message to indicate matching tasks from a query."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showMatchingTasksMessage() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message when tasks are sorted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSortMessage() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentedPrintln(\"Sorted tasks by date. Here are your tasks:\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a help command for a given message name."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param commandName Command name"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showHelpMessage(String commandName) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: bye\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Saves task list to file and exits.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: deadline [task description] /by [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new Deadline task into the task list.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: delete [i]\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Removes the i-th task from the task list.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: done [i]\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Marks the i-th task in the task list as done.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: event [task description] /at [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new Event task into the task list.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: find [task description]\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Finds and displays tasks whose description matches the query string.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: list\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Displays the tasks in the task list.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: sort\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Sorts all tasks in chronological order, then lists the tasks.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Usage: todo [task description]\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintln(\"Adds a new ToDo task into the task list.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            PrintUtil.indentedPrintf(\"Unknown command \\\"%s\\\"\\n\", commandName);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Closes and cleans up resources held by the UI."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method closes the only JavaFX `Stage`, thereby ending the GUI loop."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        if (!isClosed) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        isClosed \u003d true;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 352
    }
  },
  {
    "path": "src/main/java/duke/ui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates a deferred message to be displayed in the UI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * This is needed because the GUI may need to handle displayed errors"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * before it is initialized with `Gui#start()`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "class Message {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    String text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    Message(String text) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 14
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Encapsulates an abstract user interface provided to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * The `Ui` interface specifies methods displaying messages to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Implementations of the `Ui` interface are not required to buffer the printed message,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * but the whole message must be printed after Ui#endMessage() is called."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    //TODO: create and store a Message object instead of using a static buffer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the start of a new message to be printed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void startMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Denotes the end of a new message to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void endMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Reads a single-line command string from the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return command string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public String readCommandString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a horizontal line."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a numbered task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param index Index of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task to be displayed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showNumberedEntry(int index, Task task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the message of the provided `DukeException`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param e exception of type DukeException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showError(DukeException e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message that the task list could not be found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param savePath Intended path of the file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSaveNotFoundMessage(String savePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a greeting."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showGreeting();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays the goodbye message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Header lines are not printed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showBye();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showAddTaskMessage(Task task, int remainingCount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param remainingCount New number of tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showRemoveTaskMessage(Task task, int remainingCount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a message when a task is marked as completed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param task Task marked as complete"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showDoneTaskMessage(Task task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays an error message when a command is not recognized."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param command Command string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showUnknownCommandMessage(String command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message to indicate matching tasks from a query."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showMatchingTasksMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a header message when tasks are sorted."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This method only prints the header message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showSortMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Displays a help command for a given message name."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param commandName Command name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void showHelpMessage(String commandName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Closes and cleans up resources held by the UI."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 117
    }
  },
  {
    "path": "src/main/java/duke/util/PrintUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " * Class containing static methods for printing formatted text to the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class PrintUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static int indentLevel \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static String buffer \u003d \"\"; //TODO: replace with char buffer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Sets the indentation level of indented lines printed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param indentLevel Number of spaces of indentation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static void setIndentLevel(int indentLevel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        PrintUtil.indentLevel \u003d indentLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    private static String indentString(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        //https://stackoverflow.com/questions/15888934/how-to-indent-a-multi-line-paragraph-being-written-to-the-console-in-java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return s.replaceAll(\"(?m)^\", \" \".repeat(indentLevel));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Prints each line of the provided string indented with `indentLevel` spaces,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * followed by a new line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param s String to print"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static void indentedPrintln(String s) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        buffer +\u003d indentString(s) + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Formats the provided arguments with the given format string,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * then prints the result with indents, similar to `indentedPrintln`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param format Format string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @param args Arguments for format string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static void indentedPrintf(String format, Object... args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        buffer +\u003d indentString(String.format(format, args));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Prints the header line indented with `indentLevel` spaces."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * This is needed for printing the boxes seen in the UI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static void printHeaderLine() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        indentedPrintln(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * Flushes and returns the original contents of the internal buffer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     * @return Content of buffer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public static String flushBuffer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        String output \u003d buffer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        buffer \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 62
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void invalidCommandName() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(false, new Parser(\"invalid command\").parse().isPresent());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(false, new Parser(\"\").parse().isPresent());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void validCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, new Parser(\"done 1\").parse().isPresent());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, new Parser(\"event abc/def /at 2019-12-20\").parse().isPresent());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, new Parser(\"deadline efgdef /by 2019-12-20\").parse().isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, new Parser(\"list\").parse().isPresent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, new Parser(\"bye\").parse().isPresent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 22
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void addTasks() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"1\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"2\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"3\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void removeTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"2\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.removeTask(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.removeTask(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(0, taskList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    public void markTaskAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.addTask(new ToDo(\"2\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(false, taskList.getTask(0).isDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(false, taskList.getTask(1).isDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, taskList.getTask(0).isDone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(false, taskList.getTask(1).isDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        taskList.markTaskAsDone(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, taskList.getTask(0).isDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "        assertEquals(true, taskList.getTask(1).isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "invalidcommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "todo A"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event B /invalid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event B /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event B /by"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event B /by X"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "event B /at X"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "deadline C /invalid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "deadline C /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "deadline C /at Y"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "deadline C /by Y"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "delete"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 30
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thetruevincentchow"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "thetruevincentchow": 34
    }
  }
]
