[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    mainClassName \u003d \"dude.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    archiveBaseName \u003d \"dude\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    archiveVersion \u003d \"0.2.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 35,
      "-": 21
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "The official guide to using Dude to his full potential!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "--------------------"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "1. [Screenshot](#1-screenshot)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "2. [Installation](#2-installation)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "3. [Quick Start](#3-quick-start)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "4. [Command Guide](#4-command-guide)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    1. [Help](#41-help)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    2. [Bye](#42-bye)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    3. [List](#43-list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    4. [Todo](#44-todo)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    5. [Deadline](#45-deadline)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    6. [Event](#46-event)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    7. [Done](#47-done)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    8. [Delete](#48-delete)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    9. [Find](#49-find)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    10. [Check](#410-check)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    11. [Today](#411-today)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "5. [Dates In Dude](#5-dates-in-dude)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "6. [Storing your tasks](#6-storing-your-tasks)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "7. [Acknowledgements](#7-acknowledgements)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 1. Screenshot"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "----------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Ui.png)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 2. Installation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "------------------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Make sure you have [java](https://www.oracle.com/java/technologies/javase-downloads.html) installed on your computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Head over to the [releases](https://github.com/CornCobs/duke/releases) page and download the latest version of Dude!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "-----------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "To start Dude, double click the jar file. Alternatively, on the command prompt / terminal, navigate to the directory where the jar file is and run the following:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003e java -jar dude-0.2.2.jar"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "After Dude has started up, enter \"help\" to see the available commands, and enter \"bye\" to exit. That\u0027s all you need to get started!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 4. Command Guide "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "-------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.1 Help**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Dude lends you a helping hand! The help command can give you more information of how to use Dude, what kinds of input Dude understands and what the various commands do."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "If no arguments are given, Dude tells you the format of all of the commands he understands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "If the name of a command is specified, Dude gives more information about that command - the format, and what it does."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "If you ask for `help -date`, Dude explains the types of dates he can understand."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "help [command | -date]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Help.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.2 Bye**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Closes Dude. Before closing, Dude makes sure to save all of the tasks you have currently in ./data so when you start him up again, it\u0027s as if you never left!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "bye"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.3 List**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Shows all the tasks you currently have, and their completion status - unless you don\u0027t have any, of course!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](List.png)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.4 Todo**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Adds a todo task to your current list of tasks. Todos only have a description - no time associated with them! If your tasks are time-sensitive, look at [deadlines](#45-deadline)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Make sure your descriptions are not empty, or else Dude will complain!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "todo description"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Todo.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.5 Deadline**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Adds a deadline to your current list of tasks. Deadlines have a due date. To see what dates Dude understands, look [here](#5-dates-in-dude)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "deadline description /by date"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Deadline.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.6 Event**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Adds an event to your current list of tasks. Events have a start and end date. To see what dates Dude understands, look [here](#5-dates-in-dude)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "event description /from date /to date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Event.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.7 Done**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Marks a task as completed. You need to give the index of the task in Dude\u0027s list - you can use the list command to check the indices!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "done index_of_task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Done.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.8 Delete**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Deletes a task from the list. It could be completed, it could be over, or maybe you just can\u0027t be bothered to finish it anymore. Dude doesn\u0027t pry! Once again you refer to the task by its index."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "delete index_of_task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Delete.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.9 Find**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Sometimes you have too many tasks its difficult to find the one you were thinking of with list. Have no fear! Dude allows you to filter the list by giving him some keyword to match the task descriptions against."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "find word"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Find.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.10 Check**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "What if you need to see what things you have going on on some day? For example your friend just invited you out and you need to check if you have any homework due on that day? Dude allows you to check all the tasks you have that are due or are occurring on any date."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "check date"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Example Usage**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "![](Check.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "### **4.11 Today**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "A simple shortcut to check what you have on today. Why make you write \"check (today\u0027s date)\" when you can just say \"today\"?"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "**Format**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "today"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 5. Dates In Dude"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "-------------------"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Dude is all about *freedom* - he wants to let you express yourself as much as you like! So he accepts a whole variety of date formats:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "1. `yyyy-MM-dd` - the standard ISO format"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "   - Eg. 2020-12-31"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "2. `d MMM yyyy` - the kind of date we\u0027re more familiar with"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "   - Eg. 4 Apr 2021"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "3. `dayOfWeek [+number]` - Dude allows you to say something like \"Monday\" to refer to the coming Monday, and if you give an extra number at the back, like \"Tues +1\", Dude knows you mean the next Tuesday!"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "   - Eg. Wed +2 (Means Wednesday 2 weeks after this)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "4. `number [day(s) | week(s) | month(s) | year(s)]` - Dude also allows you to just say how far away this task is going to be from today. If you have something due tomorrow, just say \"deadline ... /by 1 day\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "   - Eg. 2 weeks (Means 14 days from today)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 6. Storing your tasks"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "------------------------"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Dude keeps your tasks safe between sessions. What good would a todo list be otherwise? Dude automatically stores your session data in a directory `data` in the directory you run Dude from, and attempts to find this directory when you start him up again. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "If he can\u0027t find this folder (or its empty), Dude will start with an empty list of tasks, so don\u0027t accidentally delete the `data` folder! "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Or do it if you actually want to delete everything. Please don\u0027t delete all the tasks 1 by 1."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "## 7. Acknowledgements"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "----------------------"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "Dude is a fork from the [duke project](https://github.com/nus-cs2103-AY1920S2/duke) by NUS, used for CS2103 - Software Engineering. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "A large amount of the javafx UI code is taken from the [tutorials](https://github.com/nus-cs2103-AY1920S2/duke/tree/master/tutorials) written by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 191,
      "-": 17
    }
  },
  {
    "path": "src/main/java/dude/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * @@author j-lum-reused"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Reused from tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 12,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dude/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.DukeFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @@author j-lum-reused"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Reused from tutorials/javaFxTutorialPart4.md with modifications"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // Set up the GUI Node hierarchy"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            stage.setTitle(\"Dude - your chillest taskbot\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            // Wire up Duke class (main application logic) and UI components"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            MainWindow mainWindow \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.duke \u003d DukeFactory.createDuke(mainWindow);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            mainWindow.setDuke(duke);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 42,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dude/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new AddTaskCommand object which adds given task to Dude\u0027s TaskList upon executing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param task the Task to be added (Todo, Deadline, Event)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Adds task to current session\u0027s tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Never throws CommandExecutionException."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save the changes to TaskList to disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        tasks.addTask(this.task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(\"I gotcha my dude. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                String.format(\"  %s\", this.task),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                String.format(\"Now you got %d tasks in your list\", tasks.taskCount()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        storage.saveSession(ui, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 37
    }
  },
  {
    "path": "src/main/java/dude/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Overrides default implementation of returning true as ByeCommand is supposed to cause Dude.serve() to exit."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true since ByeCommand causes Dude to exit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to save current session TaskList state to storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Bids farewell to users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Never throws CommandExecutionException."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk. Not used by ByeCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(\"See ya!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 31
    }
  },
  {
    "path": "src/main/java/dude/command/CheckDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class CheckDateCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new CheckDateCommand object which tells users what tasks occur on the given date upon executing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param date the date to check current tasks to see if any of them occur on date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CheckDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Shows the user a filtered TaskList for tasks that occur on date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Never throws CommandExecutionException."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk. Not used by CheckDateCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.speak(\"These are what you have on this day:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.showFilteredTasks(task -\u003e task.occursOn(date))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .forEachOrdered(ui::speak);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 37
    }
  },
  {
    "path": "src/main/java/dude/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns true if the command causes the program to exit, false otherwise."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if the command causes the program to exit, false otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Dispatches to command that user input (parsed by Parser) gave, to interact with user,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * and access and modify the current session\u0027s tasklist, and storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandExecutionException if command is an impossible task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public abstract void execute(TaskList tasks, IUserInterface ui, IStorage storage)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throws CommandExecutionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 28
    }
  },
  {
    "path": "src/main/java/dude/command/CommandExecutionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * An exception thrown when a command is syntactically correct but is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Eg. done given to a task that is already done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Eg. deleting a index which does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class CommandExecutionException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a CommandExecutionException with the given error message which can be accessed via getMessage()."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param message Error message describing how the command given was invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public CommandExecutionException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 18
    }
  },
  {
    "path": "src/main/java/dude/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new DeleteCommand object which removes the task at given index in Dude\u0027s TaskList upon executing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param index the index of the task to delete."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Removes task at given index and reports that task\u0027s information to users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandExecutionException If no task exists at that index (index \u0026lt; 1 or index \u0026gt; tasks.taskCount())."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) throws CommandExecutionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Task deleted \u003d tasks.removeTask(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"I gotcha my dude. I\u0027ve taken out this task:\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    String.format(\"  %s\", deleted),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    String.format(\"Now you got %d tasks in your list\", tasks.taskCount()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveSession(ui, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandExecutionException(\"You don\u0027t have such a task, dude!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 41
    }
  },
  {
    "path": "src/main/java/dude/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new DoneCommand object which marks task at given index in Dude\u0027s TaskList as done upon executing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param index the index of the task to mark as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Marks a previously incomplete task (!isDone) as complete and displays the task to users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandExecutionException If no task exists at that index (index \u0026lt; 1 or index \u0026gt; tasks.taskCount()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                                   or if the task at given index is already done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) throws CommandExecutionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Task completed \u003d tasks.getTask(this.index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (completed.isDone()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new CommandExecutionException(\"That task is already done dude!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            completed.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"Good job dude! I\u0027ve marked this task as done:\", \"  \" + completed);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            storage.saveSession(ui, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandExecutionException(\"You don\u0027t have such a task, dude!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 44
    }
  },
  {
    "path": "src/main/java/dude/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a new FindCommand object which tells users what tasks match the given keyword upon executing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param keyword the word(s) to match against the task descriptions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Shows the user a filtered TaskList for tasks that match the given keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Never throws CommandExecutionException."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk. Not used by FindCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.speak(\"These are the matching tasks I found:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.showFilteredTasks(task -\u003e task.getDetails().contains(keyword))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .forEachOrdered(ui::speak);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 35
    }
  },
  {
    "path": "src/main/java/dude/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.parser.IDateParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Mappings from commands to descriptions of their behavior. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final Map\u003cString, String\u003e COMMAND_INFO \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"help\", \"Summons these help pages\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"bye\", \"Exits the program\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"list\", \"Shows all current tasks\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"today\", \"Shows all tasks occurring on today\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"done\", \"Marks the indicated task as done.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"delete\", \"Deletes the indicated task from the list.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"check\", \"Shows all tasks occurring on the given date.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"todo\", \"Adds a new uncompleted todo task\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"deadline\", \"Adds a new uncompleted deadline with given due date\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"event\", \"Adds a new uncompleted event with given start and end dates\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        COMMAND_INFO.put(\"find\", \"Shows all tasks with descriptions that contain the given keyword\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String helpTopic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a HelpCommand which, when executed, displays usage information for all commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.helpTopic \u003d \"all\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a HelpCommand which, when executed, displays information about the topic given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param helpTopic the topic to receive help from. Can be a command or -date, specified in Parser.USAGES."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public HelpCommand(String helpTopic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.helpTopic \u003d helpTopic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Shows useful help messages to the user regarding the topic given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk. Not used by HelpCommand."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws CommandExecutionException if helpTopic is not a command or -date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) throws CommandExecutionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (helpTopic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            helpAll(ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"-date\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            helpDate(ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            helpCommand(helpTopic, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void helpAll(IUserInterface ui) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.speak(\"Hey man! I\u0027m Dude, the chillest taskbot you\u0027ve ever seen.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.speak(\"I can help you keep track of your tasks,\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    + \" just tell me what you want in one of these formats:\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            for (String usageMsg : Parser.USAGES.values()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.speak(\"  \" + usageMsg);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void helpCommand(String command, IUserInterface ui) throws CommandExecutionException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!COMMAND_INFO.containsKey(command)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new CommandExecutionException(\"I can\u0027t help you with that!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String additionalHelpMessage \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (isIndexedCommand(command)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            additionalHelpMessage \u003d \"Use list or filter the tasks via today, check or find to see each tasks\u0027 index.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } else if (isDateCommand(command)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            additionalHelpMessage \u003d \"Use \u0027help -date\u0027 to learn more about the different date formats.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(command, \"\", COMMAND_INFO.get(command), \"\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"USAGE: \", \"\", Parser.USAGES.get(command), \"\", additionalHelpMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void helpDate(IUserInterface ui) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(\"I\u0027m great at understanding my dates\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"Of course I\u0027m great at understanding your dates, too!\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"You can tell me your dates in any of these ways:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (int i \u003d 0; i \u003c Parser.DATE_PARSERS.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            IDateParser dateParser \u003d Parser.DATE_PARSERS.get(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(() -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.speak(String.format(\"%d. %s\\n\", index, dateParser.getFormat()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.speak(\"Examples:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                for (String example : dateParser.getExamples()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    ui.speak(example);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.speak(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.speak(dateParser.getExplanation());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private boolean isIndexedCommand(String command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return command.equals(\"done\") || command.equals(\"delete\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private boolean isDateCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 134
    }
  },
  {
    "path": "src/main/java/dude/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.IUserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays all current tasks to user in insertion order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Never throws CommandExecutionException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks the current TaskList before the command is executed. Can be modified by execute."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui the IUserInterface to report results of successful commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage the IStorage to save changes to the task list to disk. Not used by ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void execute(TaskList tasks, IUserInterface ui, IStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (tasks.taskCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"You got nothing to do, dude. Ain\u0027t that awesome??\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ui.respond(() -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.speak(\"These are your tasks, dude:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.showFilteredTasks(task -\u003e true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .forEachOrdered(ui::speak);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 30
    }
  },
  {
    "path": "src/main/java/dude/component/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @@author j-lum-reused"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Reused from tutorials/javaFxTutorialPart4.md with modifications"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Text dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Static Factory method for DialogBox to create a user DialogBox (image on the right)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param text the input of the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param img the user profile image."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the DialogBox Node to be displayed in the VBox in MainWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Static Factory method for DialogBox to create a Duke DialogBox (image on the left)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param text the reply of Duke to the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param img Duke\u0027s profile image."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the DialogBox Node to be displayed in the VBox in MainWindow."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        db.setStyle(\"-fx-background-color: #e8f1ff;\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 79,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dude/component/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.CommandExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.parser.ParsingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private IStorage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private IUserInterface ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes Duke chat bot with injected user interface, task list and storage services."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param storage object that manages persistence of Duke\u0027s tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param tasks initial tasks that Duke starts with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui object that manages interaction with user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Duke(IStorage storage, TaskList tasks, IUserInterface ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Takes user input and responds to commands appropriately."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Closes app when \"bye\" is given as input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void serve() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            String msg \u003d ui.readCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Command command \u003d Parser.parse(msg);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (ParsingException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respondParsingError(e.getMessage(), e.getUsageMsg());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (CommandExecutionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respondError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 45
    }
  },
  {
    "path": "src/main/java/dude/component/DukeFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DukeFactory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates a new Duke chat bot instance and injects Gui, TextStorage and TaskList instances into it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param mainWindow the actual GUI that Gui will connect to."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return a new Duke chat bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static Duke createDuke(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IUserInterface ui \u003d new Gui(mainWindow);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        IStorage storage \u003d new TextStorage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        TaskList tasks \u003d storage.restoreSession(ui);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new Duke(storage, tasks, ui);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 16
    }
  },
  {
    "path": "src/main/java/dude/component/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A class to handle dependencies/ownership between Duke which contains our application logic,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * and the JavaFX Application/actual GUI components."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Duke has ownership of the Gui class, which holds reference to MainWindow which exposes methods to read input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * and display output but does not own it (MainWindow is owned by JavaFX Application)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Duke and MainWindow thus contain references to each other without owning each other."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Gui implements IUserInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private StringBuilder responseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes the Gui component of the Duke class that handles communication with the actual GUI from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * within the Duke class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param mainWindow a reference to the MainWindow controller class so Gui can perform input/output by calling"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *                   the public methods exposed by the controller class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Gui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.responseBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        respond(\"Wassup dude!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Obtains input from user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return command user gives to Dude as a String to be parsed by Parser."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return mainWindow.getInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays Dude\u0027s response to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Accepts a Runnable that can execute arbitrary code to give maximum flexibility in calling code,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * such as being able to have a for loop for indeterminate number of lines of responses."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * However, the only primitive exposed to actually display output within respond is speak(String str)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param r Runnable that allows caller to execute arbitrarily complex code while creating a response."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void respond(Runnable r) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assert responseBuilder.length() \u003d\u003d 0 : \"Buffer should be empty\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        r.run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        mainWindow.displayResponse(responseBuilder.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        responseBuilder.setLength(0); // resets the buffer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Speaks a single sentence to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * The only primitive exposed to construct a response to pass to respond(Runnable r)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * In GUI, speak adds the sentence to a buffer which is cleared when one of the respond methods are called"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * so that multiple lines of input can be spoken at once."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param str the sentence to speak to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void speak(String str) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        responseBuilder.append(str).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Closes resources associated with the UI."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 76
    }
  },
  {
    "path": "src/main/java/dude/component/IStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public interface IStorage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Loads the TaskList from the previous Dude session from memory."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * If data from the previous session cannot be found, returns an empty TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui User Interface which Dude chatbot uses to report errors when loading data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return TaskList with all tasks from previous session if successful, else shows an error message,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         and returns TaskList with tasks that were successfully parsed from memory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    TaskList restoreSession(IUserInterface ui);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Saves the TaskList from the current session into some form of persistent memory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * If an error occurs in writing the data, reports the error and warns users that data may be lost."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui User Interface which Dude chatbot uses to report errors when saving data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param session TaskList containing Tasks to save to memory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void saveSession(IUserInterface ui, TaskList session);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 22
    }
  },
  {
    "path": "src/main/java/dude/component/IUserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public interface IUserInterface {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Obtains input from user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return command user gives to Dude as a String to be parsed by Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    String readCommand();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays Dude\u0027s response to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Accepts a Runnable that can execute arbitrary code to give maximum flexibility in calling code,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * such as being able to have a for loop for indeterminate number of lines of responses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * However, the only primitive exposed to actually display output within respond is speak(String str)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param r Runnable that allows caller to execute arbitrarily complex code while creating a response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void respond(Runnable r);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays variable number of sentences to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Exposes a more pleasant API than respond(Runnable r) when full flexibility is not needed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param responses a variable number of sentences for Dude to tell the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    default void respond(String... responses) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        respond(() -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            for (String response : responses) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                speak(response);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays an error message to the user when an incorrect command is given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Tells the user what was wrong and gives the proper usage of the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param errorMsg a message describing the problem with the user\u0027s input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param usageMsg a string describing the correct format of input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    default void respondParsingError(String errorMsg, String usageMsg) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        respond(errorMsg,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"Maybe you could try this:\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"  \" + usageMsg);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Displays an error message to the user when an invalid command is given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param errorMsg a message describing the problem with the user\u0027s input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    default void respondError(String errorMsg) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        respond(errorMsg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Speaks a single sentence to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * The only primitive exposed to construct a response to pass to respond(Runnable r)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param str the sentence to speak to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void speak(String str);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Closes resources associated with the UI."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 69
    }
  },
  {
    "path": "src/main/java/dude/component/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Exposes input and output methods for application logic classes (i.e. GUI) to interact with."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @@author j-lum-reused"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Reused from tutorials/javaFxTutorialPart4.md with modifications"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        DialogBox userMessage \u003d DialogBox.getUserDialog(getInput(), userImage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        dialogContainer.getChildren().add(userMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Obtains input from user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return what user typed into TextField after pressing Send or hitting Enter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates DialogBox containing Duke\u0027s response and pushes it onto the dialogContainer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param response the response to the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void displayResponse(String response) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        DialogBox reply \u003d DialogBox.getDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        dialogContainer.getChildren().add(reply);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 70,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dude/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * TaskList is a thin wrapper over an {@code ArrayList\u003cTask\u003e} to hide implementation details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Notably, it provides 1-based indexing to mirror user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** A nested class that carries both Task information and the Task\u0027s position in the TaskList. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static class TaskListEntry {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public Task task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public TaskListEntry(int index, Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Creates an empty TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Adds a task to the end of the current task list, with its index being the length of the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param task Task to be added to the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Retrieves the index-th task in the current task list, counting from 1 being the earliest task to be added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param index Index of task to be retrieved."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return Task at given index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IndexOutOfBoundsException If index \u0026lt; 1 or index \u0026gt; taskCount()."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Deletes the index-th task from the current task list, counting from 1 being the earliest task to be added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Decreases taskCount() by 1."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param index Index of task to be removed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the removed task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws IndexOutOfBoundsException If index \u0026lt; 1 or index \u0026gt; taskCount()."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Produces a stream of filtered and formatted Task entry Strings for calling methods to consume."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param formatter bifunction that takes the index and task and produces the formatted Task string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param predicate the filtering function."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return a stream of filtered and formatted Task entry Strings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Stream\u003cString\u003e formatFilteredTasks("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            BiFunction\u003cInteger, Task, String\u003e formatter,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return IntStream.rangeClosed(1, taskCount())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .mapToObj(index -\u003e new TaskListEntry(index, getTask(index)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .filter(entry -\u003e predicate.test(entry.task))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .map(entry -\u003e formatter.apply(entry.index, entry.task));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Produces a stream of filtered and formatted Task entry Strings for calling methods to consume."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Convenience method over \u003ccode\u003eformatFilteredTasks\u003c/code\u003e that uses default user-facing formatting"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * {@code \"\u003cindex\u003e.\u003ctask.toString()\u003e\" }."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param predicate the filtering function."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return a stream of filtered and formatted Task entry Strings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Stream\u003cString\u003e showFilteredTasks(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return formatFilteredTasks((index, task) -\u003e String.format(\"%d.%s\", index, task), predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the number of tasks currently in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return number of tasks currently in this list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public int taskCount() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 105
    }
  },
  {
    "path": "src/main/java/dude/component/TextStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.parser.ParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Hard-coded plaintext file-based implementation of IStorage interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Session TaskList data is saved to data/dude.txt relative to where the CLI is run from."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * Requires the app to have file and directory reading and writing permissions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class TextStorage implements IStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final File storeFile \u003d new File(\"data/dude.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Loads the TaskList from the previous Dude session from memory."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * If data from the previous session cannot be found, returns an empty TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui User Interface which Dude chatbot uses to report errors when loading data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return TaskList with all tasks from previous session if successful, else shows an error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         and returns TaskList with tasks that were successfully parsed from data/dude.txt."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public TaskList restoreSession(IUserInterface ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        TaskList session \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try (Scanner sc \u003d new Scanner(storeFile)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                String[] entry \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                parseEntry(ui, session, entry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"I didn\u0027t find any previous session, starting empty\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Saves the TaskList from the current session into some form of persistent memory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * If an error occurs in writing the data, reports the error and warns users that data may be lost."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param ui User Interface which Dude chatbot uses to report errors when saving data."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param session TaskList containing Tasks to save to data/dude.txt."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws SecurityException if a security violation occurs while attempting to create the directory or save file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void saveSession(IUserInterface ui, TaskList session) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // Create \"/data/\" directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!storeFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            boolean isMkdirSuccessful \u003d storeFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (!isMkdirSuccessful) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                ui.respond(\"Warning: Could not create /data/ directory to save tasks\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                        \"I won\u0027t be able to save your tasks\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try (PrintWriter pw \u003d new PrintWriter(storeFile)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            session.formatFilteredTasks((index, task) -\u003e task.storeFormat(), task -\u003e true)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .forEachOrdered(pw::println);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"Warning: An error occurred when saving your tasks. \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    + \"Some of your data may have been lost\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void parseEntry(IUserInterface ui, TaskList session, String[] entry) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            boolean isDone \u003d entry[1].equals(\"O\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            switch (entry[0]) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                session.addTask(new Todo(entry[2], isDone));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                LocalDate by \u003d LocalDate.parse(entry[3]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                session.addTask(new Deadline(entry[2], by, isDone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                LocalDate from \u003d LocalDate.parse(entry[3]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                LocalDate to \u003d LocalDate.parse(entry[4]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                session.addTask(new Event(entry[2], from, to, isDone));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new ParsingException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (DateTimeParseException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                | ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                | ParsingException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            ui.respond(\"Warning: An error occurred when reading your tasks. \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    + \"Some of your data may have been lost\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 101
    }
  },
  {
    "path": "src/main/java/dude/parser/DateOffsetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A parser of offsets from the current date in terms"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * of days, weeks, months or years."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DateOffsetParser implements IDateParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final String[] EXAMPLES \u003d {\"10 days\", \"4 weeks\", \"1 year\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final Pattern FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Pattern.compile(\"(?\u003cnumber\u003e\\\\d+) (?\u003cperiod\u003eday|week|month|year)s?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a format string demonstrating the use of this parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the format this parser accepts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return \"number [day(s) | week(s) | month(s) | year(s)]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a list of example strings that are parsable by this parser."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return array of strings of positive date examples."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String[] getExamples() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return EXAMPLES;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an explanation of the type of date format this parser understands,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * and the date it translates into."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an explanation string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return \"The given duration after today. Eg. If today is 2020-02-09, \u002710 days\u0027 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                + \"would be 2020-02-19\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to parse the given date string as an offset from the current date in terms"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * of days, weeks, months or years. Returns null otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param dateString the string to parse as a date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed LocalDate, null otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public LocalDate parse(String dateString) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Matcher m \u003d FORMAT.matcher(dateString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!m.matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int number \u003d Integer.parseInt(m.group(\"number\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            switch (m.group(\"period\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return LocalDate.now().plusDays(number);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return LocalDate.now().plusWeeks(number);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return LocalDate.now().plusMonths(number);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            case \"year\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return LocalDate.now().plusYears(number);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 82
    }
  },
  {
    "path": "src/main/java/dude/parser/DayOfWeekParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A parser of the day of the week, taken to be the next occurrence of said day"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * from current date. Additional week offsets can be optionally specified."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class DayOfWeekParser implements IDateParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final String[] EXAMPLES \u003d {\"Monday +4\", \"Tue\", \"Sun +3\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final Pattern FORMAT  \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Pattern.compile(\"(?\u003cday\u003e\\\\w+)( \\\\+(?\u003cnumber\u003e\\\\d+))?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a format string demonstrating the use of this parser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the format this parser accepts."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return \"dayOfWeek [+number]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a list of example strings that are parsable by this parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return array of strings of positive date examples."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String[] getExamples() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return EXAMPLES;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an explanation of the type of date format this parser understands,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * and the date it translates into."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an explanation string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return \"If just a day of the week is given, say Tue or Wed, the date is \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                + \"taken to be the next closest day from today. Eg. \u0027Tue\u0027 refers to next Tuesday.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                + \"If a number n is specified, the date is the given day n weeks from now. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                + \"Eg. \u0027Monday +4\u0027 refers to the Monday 4 weeks from now\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to parse the given day of week into the next occurrence of said day from the current"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * date, optionally with the specified week offset. Returns null otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param dateString the string to parse as a date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed LocalDate, null otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public LocalDate parse(String dateString) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Matcher m \u003d FORMAT.matcher(dateString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (!m.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (m.group(\"number\") !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            number \u003d Integer.parseInt(m.group(\"number\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            DayOfWeek day \u003d DateTimeFormatter.ofPattern(\"EEE\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .parse(m.group(\"day\").substring(0,3))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    .query(DayOfWeek::from);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return getNearestDate(day).plusWeeks(number);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private LocalDate getNearestDate(DayOfWeek day) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate currDay \u003d LocalDate.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return currDay.datesUntil(currDay.plusWeeks(1))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .filter(date -\u003e date.getDayOfWeek() \u003d\u003d day)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                .get(); // We are sure that within 1 week we will find the given day"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 90
    }
  },
  {
    "path": "src/main/java/dude/parser/FullDateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " * A parser of a fully specified date that can be parsed by Java\u0027s LocalDate#parse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class FullDateParser implements IDateParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String format;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String[] examples;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String explanation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes the parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param format the format this parser accepts."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param examples array of strings of positive date examples."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param explanation an explanation of the parser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public FullDateParser(String format, String[] examples, String explanation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.examples \u003d examples;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a format string demonstrating the use of this parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the format this parser accepts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.format;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a list of example strings that are parsable by this parser."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return array of strings of positive date examples."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String[] getExamples() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.examples;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an explanation of the type of date format this parser understands,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * and the date it translates into."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an explanation string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return this.explanation;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to parse the given date string into the parser\u0027s format. Returns null if the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * parse fails."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param dateString the string to parse as a date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed LocalDate, null otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public LocalDate parse(String dateString) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return LocalDate.parse(dateString, this.formatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 76
    }
  },
  {
    "path": "src/main/java/dude/parser/IDateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public interface IDateParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a format string demonstrating the use of this parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the format this parser accepts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    String getFormat();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a list of example strings that are parsable by this parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return array of strings of positive date examples."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    String[] getExamples();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns an explanation of the type of date format this parser understands,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * and the date it translates into."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an explanation string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    String getExplanation();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to parse the given date string into the parser\u0027s format. Returns null if the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * parse fails."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param dateString the string to parse as a date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed LocalDate, null otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    LocalDate parse(String dateString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 36
    }
  },
  {
    "path": "src/main/java/dude/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.CheckDateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Mappings from commands to their usage messages. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final Map\u003cString, String\u003e USAGES \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"help\", \"help [command | -date]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"bye\", \"bye\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"list\", \"list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"today\", \"today\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"done\", \"done index_of_task\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"delete\", \"delete index_of_task\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"check\", \"check date\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"todo\", \"todo description\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"deadline\", \"deadline description /by date\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"event\", \"event description /from date /to date\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        USAGES.put(\"find\", \"find word\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static final List\u003cIDateParser\u003e DATE_PARSERS \u003d List.of("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        new FullDateParser(\"yyyy-MM-dd\", new String[] {\"2020-02-02\"},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"ISO 8601 - the absolute gold standard. You can\u0027t go wrong with this!\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        new FullDateParser(\"d MMM yyyy\", new String[] {\"2 Feb 2020\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \"An easier format to remember and type!\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        new DayOfWeekParser(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        new DateOffsetParser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /** Regex for whitespace, for greater clarity. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static final String WHITESPACE \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Takes raw user input and attempts to parse it to dispatch to the relevant Command with the correct arguments."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Throws the custom checked exception ParsingException if user input is malformed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * The only valid messages are those that follow the usage messages in usages exactly."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param msg raw user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return Command that the user intends to execute."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws ParsingException if message is syntactically incorrect."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public static Command parse(String msg) throws ParsingException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String[] cmdAndBody \u003d msg.strip().split(WHITESPACE, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (cmdAndBody.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            command \u003d parseSingleWordCommand(cmdAndBody[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assert cmdAndBody.length \u003d\u003d 2 :"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    \"If length of array from String.split with limit 2 !\u003d 1, it should be 2\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                command \u003d parseCommandWithArguments(cmdAndBody[0], cmdAndBody[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                throw new ParsingException(\"Look\u0027s like your command is incomplete, mate\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                        USAGES.get(cmdAndBody[0]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new ParsingException(\"Sorry mate, I didn\u0027t catch your drift\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    USAGES.get(\"help\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to match the user\u0027s message with single word commands bye, list, today, help"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns null otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static Command parseSingleWordCommand(String command) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new CheckDateCommand(LocalDate.now());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Attempts to match the user\u0027s message with a complex command with arguments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * The possible commands are done, delete, check, todo, deadline, event, find and help."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns null otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param command the command name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param args the argument body"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return the parsed command or null if the command name does not match"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws ParsingException if the argument bodies are incorrect"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the incorrect argument count or format is given"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static Command parseCommandWithArguments(String command, String args) throws ParsingException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int indexDone \u003d parseNumericalArgument(args, \"done\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new DoneCommand(indexDone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            int indexDelete \u003d parseNumericalArgument(args, \"delete\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new DeleteCommand(indexDelete);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            LocalDate checkDate \u003d parseDate(args, \"check\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new CheckDateCommand(checkDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new AddTaskCommand(new Todo(args, false));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Deadline deadline \u003d parseDeadline(args);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new AddTaskCommand(deadline);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Event event \u003d parseEvent(args);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new AddTaskCommand(event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new FindCommand(args);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return new HelpCommand(args);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static int parseNumericalArgument(String arg, String command) throws ParsingException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return Integer.parseInt(arg);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            throw new ParsingException(\"That\u0027s not a number, dude!\", USAGES.get(command));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static LocalDate parseDate(String dateString, String command) throws ParsingException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (IDateParser parser : DATE_PARSERS) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            date \u003d parser.parse(dateString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            if (date !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        // If none of the parsers match, throw ParsingException"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String errorMsg \u003d \"I don\u0027t understand this date: \" + dateString"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                + \". Type \u0027help -date\u0027 to see the date formats I accept.\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        throw new ParsingException(errorMsg, Parser.USAGES.get(command));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static Event parseEvent(String args) throws ParsingException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String[] eventArgs \u003d args.split(WHITESPACE + \"/from\" + WHITESPACE, 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String[] eventDateStrings \u003d eventArgs[1].split(WHITESPACE + \"/to\" + WHITESPACE, 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate from \u003d parseDate(eventDateStrings[0], \"event\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate to \u003d parseDate(eventDateStrings[1], \"event\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new Event(eventArgs[0], from, to, false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private static Deadline parseDeadline(String args) throws ParsingException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String[] deadlineArgs \u003d args.split(WHITESPACE + \"/by\" + WHITESPACE, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate by \u003d parseDate(deadlineArgs[1], \"deadline\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return new Deadline(deadlineArgs[0], by, false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 192
    }
  },
  {
    "path": "src/main/java/dude/parser/ParsingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class ParsingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private String usageMsg;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a ParsingException when one need not report the cause of the Exception to users,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * thus no information is stored."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ParsingException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes the ParsingException carrying information of the error in parsing as well as the proper usage,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * for users to learn the proper commands to communicate with Dude."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param errorMsg message explaining what went wrong in parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param usageMsg message(s) showing possible commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public ParsingException(String errorMsg, String usageMsg) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.usageMsg \u003d usageMsg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns all proper usages of the command that lead to this ParsingException."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return an array of Strings of proper usage messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getUsageMsg() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return usageMsg;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 34
    }
  },
  {
    "path": "src/main/java/dude/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a Deadline task with given details, due date and completion status indicated by isDone."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param details description of the deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param dueDate due date of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param isDone completion status of the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Deadline(String details, LocalDate dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(details, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates if this Task occurs on the given date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param date date of interest as to whether the Task occurs on that date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if date is exactly the dueDate of this Deadline, false otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean occursOn(LocalDate date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return date.isEqual(this.dueDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be understood by users."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return String displaying Task type, isDone status, Task description and dueDate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         in the format: [D][isDone] description (by: dueDate)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                dueDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be written to a plain text file and easily parsed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return formatted string in the format: D|isDone|description|dueDate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", getStatusIcon(), getDetails(), this.dueDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 53
    }
  },
  {
    "path": "src/main/java/dude/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private LocalDate eventStart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private LocalDate eventEnd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a Event task with given details, start date, end date and completion status indicated by isDone."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param details description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param eventStart Date which the event starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param eventEnd Date which the event ends."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param isDone completion status of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Event(String details, LocalDate eventStart, LocalDate eventEnd, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(details, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.eventStart \u003d eventStart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.eventEnd \u003d eventEnd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates if this Task occurs on the given date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param date date of interest as to whether the Task occurs on that date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if date is within the range from eventStart to eventEnd, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean occursOn(LocalDate date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return (date.isAfter(this.eventStart) || date.isEqual(this.eventStart))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u0026\u0026 (date.isBefore(this.eventEnd) || date.isEqual(this.eventEnd));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be understood by users."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return String displaying Task type, isDone status, Task description, eventStart and eventEnd,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         in the format: [E][isDone] description (eventStart to eventEnd)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"[E]%s (%s to %s)\", super.toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                eventStart.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                eventEnd.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be written to a plain text file and easily parsed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return formatted string in the format: E|isDone|description|eventStart|eventEnd."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"E|%s|%s|%s|%s\", getStatusIcon(), getDetails(), this.eventStart, this.eventEnd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 58
    }
  },
  {
    "path": "src/main/java/dude/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private final String details;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a Task object with given details and completion status indicated by isDone."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param details description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param isDone completion status of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Task(String details, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns the task details supplied by user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates whether the task is completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if Task is complete, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates if this Task occurs on the given date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param date date of interest as to whether the Task occurs on that date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return true if this Task occurs on the given date, false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public abstract boolean occursOn(LocalDate date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be understood by users."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return String displaying isDone status and Task description in the format: [isDone] description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), details);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be written to a plain text file and easily parsed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return formatted string with pipe character \u0027|\u0027 between each field."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public abstract String storeFormat();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the completion status of the task, meant to be understood by users."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return \"O\" if this Task is complete, \"X\" otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 78
    }
  },
  {
    "path": "src/main/java/dude/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Initializes a Todo task with given details and completion status indicated by isDone."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param details description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param isDone completion status of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public Todo(String details, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        super(details, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Indicates if this Task occurs on the given date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @param date date of interest as to whether the Task occurs on that date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return false since Todos do not have a specified date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public boolean occursOn(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be understood by users."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return String displaying Task type, isDone status and Task description,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *         in the format: [T][isDone] description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * Returns a string representation of the Task, meant to be written to a plain text file and easily parsed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     * @return formatted string in the format: T|isDone|description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        return String.format(\"T|%s|%s\", getStatusIcon(), getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 47
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--@@author j-lum-reused --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c!--Reused from tutorials/javaFxTutorialPart4.md with modifications --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"388.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "      \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"241.826171875\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \u003cInsets left\u003d\"12.0\" right\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 25,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--@@author j-lum-reused --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c!--Reused from tutorials/javaFxTutorialPart4.md with modifications --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dude.component.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" focusTraversable\u003d\"false\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" focusTraversable\u003d\"true\" prefHeight\u003d\"552.0\" prefWidth\u003d\"386.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 18,
      "-": 1
    }
  },
  {
    "path": "src/test/java/dude/component/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private StubUI ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private StubStorage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private void setup(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.ui \u003d new StubUI(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.storage \u003d new StubStorage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.tasks \u003d storage.restoreSession(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        this.duke \u003d new Duke(storage, tasks, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void serve_byeInput_uiClosed() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setup(\"bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(ui.isClosed);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void serve_byeWithOtherInput_uiErrorMessageNotClosed() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setup(\"bye dude\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertFalse(ui.isClosed);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(ui.isParseError);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertFalse(ui.isCommandError); // should not be a command error"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void serve_doneWithInvalidIndex_uiErrorMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setup(\"done 5\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertFalse(ui.isParseError);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(ui.isCommandError);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void serve_doneRepeatedIndex_uiErrorMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        setup(\"done 1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        duke.serve();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(tasks.getTask(1).isDone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(ui.isCommandError);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    class StubStorage implements IStorage {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public TaskList restoreSession(IUserInterface ui) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.addTask(new Todo(\"1st item\", false));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.addTask(new Todo(\"2nd item\", true));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            tasks.addTask(new Deadline(\"3rd item\", LocalDate.of(2000, 1, 20), true));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void saveSession(IUserInterface ui, TaskList session) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    class StubUI implements IUserInterface {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        private String input;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public boolean isClosed;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public boolean isParseError;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public boolean isCommandError;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public StubUI(String input) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.input \u003d input;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isClosed \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isParseError \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isCommandError \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public String readCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void respond(Runnable r) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void respondParsingError(String errorMsg, String usageMsg) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isParseError \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void respondError(String errorMsg) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isCommandError \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void speak(String str) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        public void close() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            this.isClosed \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 116
    }
  },
  {
    "path": "src/test/java/dude/component/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Task task1 \u003d new Todo(\"dude\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private Task task2 \u003d new Todo(\"blah blah\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void taskCount_equalToSizeOfGetAllTasks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        TaskList x \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        x.addTask(task1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        x.addTask(task2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(x.showFilteredTasks(task -\u003e true).count(), x.taskCount());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        for (int i \u003d 0; i \u003c 144; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            x.addTask(task1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(x.showFilteredTasks(task -\u003e true).count(), x.taskCount());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void addTask_increaseTaskCountByOne() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        TaskList x \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int initialSize \u003d x.taskCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        x.addTask(task1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(initialSize + 1, x.taskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void removeTask_decreaseTaskCountByOne() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        TaskList x \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        x.addTask(task1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        int initialSize \u003d x.taskCount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        x.removeTask(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(initialSize - 1, x.taskCount());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 41
    }
  },
  {
    "path": "src/test/java/dude/parser/DateOffsetParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class DateOffsetParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_offsetPeriodFormat_correctDateParsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate date \u003d new DateOffsetParser().parse(\"14 days\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(14), date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 16
    }
  },
  {
    "path": "src/test/java/dude/parser/DayOfWeekParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class DayOfWeekParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_dayOfWeekFormat_correctDateParsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate date \u003d new DayOfWeekParser().parse(\"Monday +3\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate threeWeeks \u003d LocalDate.now().plusWeeks(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate fourWeeks \u003d LocalDate.now().plusWeeks(4);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(date.isAfter(threeWeeks) || date.isEqual(threeWeeks));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(date.isBefore(fourWeeks) || date.isEqual(fourWeeks));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 20
    }
  },
  {
    "path": "src/test/java/dude/parser/FullDateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class FullDateParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    private FullDateParser parser \u003d new FullDateParser(\"yyyy-MM-dd\", new String[0], \"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_isoFormat_correctDateParsed() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate date \u003d parser.parse(\"2103-01-01\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertEquals(LocalDate.of(2103, 1, 1), date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_wrongIsoFormat_null() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        LocalDate date \u003d parser.parse(\"2103/02/02\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertNull(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 24
    }
  },
  {
    "path": "src/test/java/dude/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "package dude.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.CheckDateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import dude.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_emptyString_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Parser.parse(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (ParsingException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"Sorry mate, I didn\u0027t catch your drift\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_singleWordCommandWithWhiteSpace_correctCommandClassReturned() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command byeCommand \u003d assertDoesNotThrow(() -\u003e Parser.parse(\"    bye\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command todayCommand \u003d assertDoesNotThrow(() -\u003e Parser.parse(\"  today  \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command listCommand \u003d assertDoesNotThrow(() -\u003e Parser.parse(\" list          \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(byeCommand instanceof ByeCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(todayCommand instanceof CheckDateCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(listCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_incorrectDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        String dateString \u003d \"2000/01/01\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Parser.parse(\"deadline xxx /by \" + dateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (ParsingException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"I don\u0027t understand this date: \" + dateString"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                    + \". Type \u0027help -date\u0027 to see the date formats I accept.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"deadline description /by date\", e.getUsageMsg());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_correctDateFormat_correctCommandClassReturned() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        Command eventCommand \u003d assertDoesNotThrow(() -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "                Parser.parse(\"event blah blah /from 2060-12-31 /to 2070-01-14\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        assertTrue(eventCommand instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    void parse_incorrectArgumentOrder_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            Parser.parse(\"event todo /to 2000-01-01 /from 2001-12-31\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        } catch (ParsingException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"Look\u0027s like your command is incomplete, mate\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "            assertEquals(\"event description /from date /to date\", e.getUsageMsg());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 69
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "  todo feed cats"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "todo "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "todo feed   cats "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "deadline feed hamsters /by 2020-01-24"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "event    feed mice  from 5oclock"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "event    feed mice /from    1999-"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "event feed mice /from 2020-01-01 /to 2020-01-01"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "today"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "  list "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "BYE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "deadline eat lunch /by 2020-01-30"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "event eat anything /from 1997-03-04 /to 2060-12-31"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "today"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "check 2050-01-01"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "check 2000 09 03"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "   delete 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "delete    foo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "delete   1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "done   4"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "done feed   cats"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 26
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "REM delete storage in dude.txt"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "del ..\\data\\dude.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "gradlew run --console\u003dplain --quiet \u003c text-ui-test\\input.txt \u003e text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CornCobs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CornCobs"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "CornCobs": 18
    }
  }
]
