[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/0b3ba0aec1ab488c936a7bddd93950e2)](https://www.codacy.com/manual/yapdianhao/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dyapdianhao/main\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 2,
      "-": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \u0027Main-Class\u0027: \u0027Launcher\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        )"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 36,
      "-": 13
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "E | 1 | sleep | tmr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "E | 1 | meet orbital prof | Jan 31 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "D | 1 | apply NOC | Jan 31 2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "T | 0 | submit 3230"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Create tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Show tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Delete tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Set tasks as done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Find tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Save tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Prevents duplicate tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "* Exits Duke"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 0: Learning to use duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Duke is a personal chatbot assistant to help you manage your tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "For first time users, enter \"start\" for a tutorial."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 1 : Create tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Tasks can be further categorized into deadlines and events, "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "each with a specific format. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 2: Show tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "To ease the user in deciding what to do, duke is able to show a series"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "of tasks created chronologically to the user. Each task is shown with its"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "description, the status of completion, and the time to complete if the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "is a deadline or an event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 3: Delete tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users are able to delete certain tasks after completion or the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "is no longer needed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 4: Set tasks as done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "After a user has finished a task, he will receive a congratulate message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "from the duke, and the duke will update the task\u0027s status accordingly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 5: Find tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users may have a number of tasks which is relevant to a subject, and may "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "have confusion of which task is needed for completion first. The duke is"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "able to filter tasks, and show relevant task based on the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 6: Save tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Duke is also memorable. If the user has unfinished task, the duke will"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "record it and remind the user again the next time duke is called."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 7: Prevents duplicate task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "To avoid having the same tasks in the list, duke is equipped with a "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "detector such that he will warn the user if the user attempts to create"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "the exact same task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 8: Clears tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "If users haven\u0027t used duke for a while, and all the tasks are no longer "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "invalid, the users can choose to clear all the tasks rather than "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "delete them manually."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### Feature 9: Exits Duke"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "The duke will sent a goodbye message should the user requests to turn it"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "off."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `start` - Shows a list of valid commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "The duke is able to show a list of valid commands for first time users."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`start`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"375\" src\u003d\"./images/start.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `list` - Shows a list of current pending tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "The duke not only shows newly created tasks by the user in the current"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "session, but also loads previously uncompleted tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/list.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `todo \u003ctask description\u003e` - Creates a new todo task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "A todo is a task which contains only the description, and its "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "completion status."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`todo print CS2103T textbook`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/todo.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `deadline \u003cdeadline description\u003e /by \u003cdeadline\u003e` - Creates a new deadline."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "A deadline is a task that needs to be done before the specified time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "The time can be in any valid time phrase, or a format with YYYY-MM-DD."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`deadline CS3230 assignment /by 2020-03-06` or "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`deadline CS3230 assignment /by next week`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/deadline-time.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/deadline-any.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `event \u003cevent description\u003e /at \u003ctime\u003e` - Creates a new event."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "An event is a task that is taking place at the specified time. The time "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "can be in any valid time phrase, or a format with YYYY-MM-DD."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`event CS3243 midterm /at 2020\u003d03-07` or "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`event CS3243 midterm /at March`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/event-time.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/event-any.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `find \u003ckeyword\u003e` - Locates all relevant tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users can filter tasks by selecting a keyword to search."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`find textbook`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/find.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `delete \u003cindex number of task to delete\u003e` - Deletes the current task at that index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users can delete tasks after completing that task or that task\u0027s "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "deadline is over."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/delete.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `done \u003cindex number of task to set done\u003e` - Sets the task at that index to be completed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users can mark certain tasks as done upon completion."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cimg height\u003d\"300\" src\u003d\"./images/done.jpg\" width\u003d\"475\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "### `clear` - Clears all tasks."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Users can delete all their tasks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Empties the list of task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 168,
      "-": 18
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 51
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * CS2103T AY 19/20 S2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Individual Project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * @author Yap Dian Hao"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * @since 2020-01-30"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Duke is a personal chatbot assistant to help you organize your tasks. Especially helpful"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * for people who love to procrastinate. Or procrastinate to procrastinate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.filepath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.storage \u003d new Storage(this.filepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String toReturn \u003d ui.start(this.taskList, input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        storage.write(this.taskList.getAllTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.out.println(duke.getResponse(input));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            input \u003d ui.getInput();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"Bye! See you again!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 48,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String startText \u003d \"Hello! I am Duke. What can I do for you? If you need assistance, enter \" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \"\\\"start\\\" for a list of commands!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                DialogBox.getDukeDialog(startText, dukeImage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String dukeText \u003d duke.getResponse(userInput.getText());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                //DialogBox.getDukeDialog(startText, dukeImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                DialogBox.getUserDialog(userText, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (dukeText.equals(\"Bye! See you again!\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 60
    }
  },
  {
    "path": "src/main/java/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "T | 1 | sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "T | 0 | tutorial"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 2
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Deadline is a special kind of task that needs to be done before a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String by \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected LocalDate todoDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of a deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description A string with the details of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param by A string that represents a time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor overloading, with a date as time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description A string with the details of the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param todoDate The best before date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Deadline(String description, LocalDate todoDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the time of this deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that represents a time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.by.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return this.by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Gives a string representation of the deadline, with the details and the time best before."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.by.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[D]\" + getDescription() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String dateToPrint \u003d this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[D]\" + getDescription() + \" (by: \" + dateToPrint + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 58
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * An event is a special kind of task that needs to be done at a specific point of time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String at \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected LocalDate todoDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of an event, similar to a Tasks\u0027s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The description of an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param at the specific time or date that this event takes place."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * An overloading constructor with a special date parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The description of an event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param todoDate The date that this event takes place."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Event(String description, LocalDate todoDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the time of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denoting the event\u0027s time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (this.at.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Shows the string representation of the event, with the description and the time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.at.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[E]\" + getDescription() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String dateToPrint \u003d this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[E]\" + getDescription() + \" (at: \" + dateToPrint + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 56
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InsufficientInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidDeadlineException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidTodoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Parser is the logic handling agent of the user\u0027s commands and database inputs when loading from it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * The powerful thing of a parser is it does not rely on any external"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * agent to perform the processing of inputs, just with pure logic."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Processes every command line entered by the user. Users are able to enter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * bye, list, done x, find key, delete x, todo description, event description /at time,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * deadline description /by time, and any other inputs are deemed as invalid entries."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param command  The string of command entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param taskList The TaskList to process CRUD operations based on user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output denoting the success / failure of an operation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InsufficientInputException Not enough to arguments to find/delete/done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException      Wrong indexes from TaskList\u0027s delete and done operations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidTodoException       Invalid format of Task entered by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidEventException      Invalid format of Event entered by the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidDeadlineException   Invalid format of Deadline entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidInputException      Invalid commands entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String processCommand(String command, TaskList taskList) throws"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InsufficientInputException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidIndexException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidTodoException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidEventException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidDeadlineException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assert !command.equals(\"shit\") || !command.equals(\"shut up\") : \"Please don\u0027t be rude to me TT\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.equals(\"bye\")) { // exit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.equals(\"start\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.equals(\"clear\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"find\")) { //find"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"done\")) { // done"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"delete\")) { // delete"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"todo\")) { // add todo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"deadline\")) { // add deadline"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"event\")) { // add event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return processParsedCommand(command, taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String sendHelp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String bye \u003d \"bye\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String clear \u003d \"clear\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String list \u003d \"list\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String find \u003d \"find \u003ckeyword\u003e\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String done \u003d \"done \u003cindex\u003e\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String delete \u003d \"delete \u003cindex\u003e\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String createTask \u003d \"task \u003cdescription\u003e\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String createDeadline \u003d \"deadline \u003cdescription\u003e /by \u003cdeadline\u003e\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String createEvent \u003d \"event \u003cdescription\u003e /at \u003ctime\u003e\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return bye + clear + list + find + done + delete + createTask + createDeadline + createEvent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String findTask(String command) throws InsufficientInputException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InsufficientInputException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return command.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public int setTaskDone(String command) throws InsufficientInputException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InsufficientInputException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Task createNewTask(String command) throws InvalidTodoException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidTodoException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return new Task(command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public int getDeleteIndex(String command) throws InsufficientInputException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InsufficientInputException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Deadline createNewDeadline(String command) throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length()).trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\"/by\").length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidDeadlineException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    \"Format: description /by time\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\"/by\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (command.split(\"/by\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidDeadlineException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \"Format: description /by time\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidDeadlineException(\"OOPS! The time is missing. \" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \"Format: description /by time\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\"/by\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (command.split(\"/by\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidDeadlineException(\"OOPS! The description is missing. \" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \"Format: description /by time\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String name \u003d command.split(\" /by\")[0].trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String time \u003d command.split(\" /by\")[1].trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (isValidDate(time)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            LocalDate todoDate \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            deadline \u003d new Deadline(name, todoDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            deadline \u003d new Deadline(name, time);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Event createNewEvent(String command) throws InvalidEventException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length()).trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.split(\"/at\").length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidEventException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    \"Format: description /at time\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\"/at\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (command.split(\"/at\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidEventException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \"Format: description /at time\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidEventException(\"OOPS! The time is missing. \" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \"Format: description /at time\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else if (command.split(\"/at\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (command.split(\"/at\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidEventException(\"OOPS! The description is missing.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String name \u003d command.split(\" /at\")[0].trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String time \u003d command.split(\" /at\")[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (isValidDate(time)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            LocalDate todoDate \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            event \u003d new Event(name, todoDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            event \u003d new Event(name, time);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String processParsedCommand(String command, TaskList taskList) throws"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InsufficientInputException,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidIndexException,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidTodoException,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidEventException,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidDeadlineException,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assert command !\u003d null || !command.equals(\" \") : \"Command should not be an empty string\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        int idx;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String front \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        switch (front) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return \"Bye! See you again!\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"clear\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.clear();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"start\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return sendHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.list();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String key \u003d findTask(command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.find(key);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                idx \u003d setTaskDone(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.done(idx);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                idx \u003d getDeleteIndex(command);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.delete(idx);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task task \u003d createNewTask(command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.addTask(task);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Deadline deadline \u003d createNewDeadline(command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.addDeadline(deadline);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Event event \u003d createNewEvent(command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return taskList.addEvent(event);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidInputException();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Process tasks from the database to a list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param line        Every line of task from the database."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param storedTasks The list of task to load with."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void processInputFromFile(String line, List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String[] split \u003d line.split(\"\\\\ \\\\|\\\\ \");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String type \u003d split[0];"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task task \u003d new Task(split[2]);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (Integer.parseInt(split[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                storedTasks.add(task);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String eventTime \u003d split[3];"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String eventDescription \u003d split[2];"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int eventStatus \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(eventTime)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate eld \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(eventDescription, eld);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (eventStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        event.setDone();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(event);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(eventDescription, eventTime);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (eventStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        event.setDone();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(event);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String deadlineTime \u003d split[3];"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String deadlineDescription \u003d split[2];"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int deadlineStatus \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(deadlineTime)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate dld \u003d LocalDate.parse(deadlineTime);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(deadlineDescription, dld);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (deadlineStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        deadline.setDone();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(deadline);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(deadlineDescription, deadlineTime);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (deadlineStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        deadline.setDone();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(deadline);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A logic function to determine the validity of a date entered."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A date is a string in special format entered by the user to create deadlines/events.\\"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * with the format YYYY-MM-DD"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param str The string of date to be tested with."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A boolean to denote this string is a date."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static boolean isValidDate(String str) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            LocalDate.parse(str);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 297
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.DukeIOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A storage class that manages the accessing of all the tasks from the database."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static private String path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructs a Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param path the path that points to the location of the database, a text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Loads all the previous tasks from the database into a temporary list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The list after the tasks are loaded."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws DukeIOException The database is not found or a wrong location."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeIOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            BufferedReader bfr \u003d new BufferedReader(new FileReader(this.path));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String line \u003d bfr.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                parser.processInputFromFile(line, storedTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                line \u003d bfr.readLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DukeIOException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return storedTasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Uploads the updated list of all files to the database upon Duke\u0027s termination."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param toStore The list of tasks that needs to be stored into the database."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void write(List\u003cTask\u003e toStore) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            for (int i \u003d 0; i \u003c toStore.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task curr \u003d toStore.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (curr instanceof Deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"D | \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon() + \" | \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(((Deadline) curr).getDeadline());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (curr instanceof Event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"E | \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon() + \" | \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(((Event) curr).getTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"T | \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (i !\u003d toStore.size() - 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 81
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Task is something that needs to be done by the user, at anytime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The information about the task that needs to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Gets a status icon, a check or a cross based on the task\u0027s completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An icon of a check or a cross."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return (isDone ? \"\\u2714\" : \"\\u2718\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A setter method for the task. Sets the task as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        assert !getStatus(): \"task already done\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the description of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The description of the task, without the status icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDescriptionWithoutIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the status of completion of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return Boolean value to determine if the task has been completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the full description of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denotes the description of the task, including the status icon."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A complete information of the task, with a T prefix to denote that this is a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the task, with description and status icon."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"[T]\" + getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 67
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Stores a temporary list of current tasks of the user. TaskList is able to perform various"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * operations, such as adding, updating, deleting, and even show all of them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor. Starts with an empty list, if no previous tasks is left by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Overriding constructor. If the user has any leftover incomplete tasks, includes them"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * for every operations later."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param tasks The previous incomplete list of tasks by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds a task to the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param task The current task that needs to be added into the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addTask (Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (hasDuplicateTask(task)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"This task has been added!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private boolean hasDuplicateTask(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task added : this.tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (added.getDescriptionWithoutIcon().equals(task.getDescriptionWithoutIcon())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private boolean hasDuplicateDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task added : this.tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (added instanceof Deadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (added.getDescriptionWithoutIcon().equals(deadline.getDescriptionWithoutIcon())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u0026\u0026 ((Deadline) added).getDeadline().equals(deadline.getDeadline())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private boolean hasDuplicateEvent(Event event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task added : this.tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (added instanceof Event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (added.getDescriptionWithoutIcon().equals(event.getDescriptionWithoutIcon())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        \u0026\u0026 ((Event) added).getTime().equals(event.getTime())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds a deadline to the current list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param deadline The deadline that needs to be added into the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (hasDuplicateDeadline(deadline)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"This deadline is already added!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(deadline);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this deadline:\" + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d deadline + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds an event to the current list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param event The event that needs to be added into the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addEvent(Event event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (hasDuplicateEvent(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"This event is already added!\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this deadline:\" + \"\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d event + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Shows all the tasks, including those that are done or incomplete, to the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that includes every task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String list()  {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (this.tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"You have no pending tasks!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            res +\u003d (i + 1) + \".\" + this.tasks.get(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (i !\u003d this.tasks.size() - 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                res +\u003d \"\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String clear() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"All tasks have been cleared!\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Finds the task with a keyword requested by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param key The keyword the user wants to search with."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that includes all the tasks with the entered keyword."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String find(String key) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Here are the matching tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (task.getDescriptionWithoutIcon().contains(key)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            res +\u003d (i + 1) + \".\" + filteredTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Marks a certain task as done upon completion."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param idx The index of the task that needs to be marked done."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that shows the status of the updated task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException incorrect index, i.e. a negative number."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String done(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String message \u003d \"OOPS! Invalid task number. You only have \" + this.tasks.size()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidIndexException(message);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task curr \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        curr.setDone();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d curr;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Removes a task from the list as requested by the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param idx The index of the task that needs to be removed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denotes the number of tasks the user have after the deletion."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException incorrect index, i.e. a large number when tasks are only a few."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String delete(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String message \u003d \"OOPS! Invalid task number. You only have \" + this.tasks.size()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidIndexException(message);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task toDelete \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.remove(idx);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (toDelete + \"\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (\"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + \" \" + (this.tasks.size() \u003e 1 ? \"tasks\" : \"task\") + \" in the list\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the list by the TaskList class."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A list of all the tasks."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 206
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.DukeTerminateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * This is the User Interface of the Duke. Accepts keyboard input from user,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * and shows the output after the operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Ui Constructor. Has a Parser attribute to process inputs,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * and a Scanner to accept inputs. Shows a logo to greet the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Starts the UI. The UI will continue to receive inputs, and terminates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * when the user wishes to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String start(TaskList taskList, String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        //showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String command \u003d input.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            output \u003d parser.processCommand(command, taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            output \u003d e.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            output \u003d e.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Prints a goodbye message to the user upon shutdown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"See you again!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 71
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A special exception used by the Duke to alert its users."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception which warns about input and output errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! Something is wrong with the input/output.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTerminateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception which shuts down the Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DukeTerminateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InsufficientInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke Exception which warns the users that arguments are not enough."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InsufficientInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS, the arguments are not enough!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception to warn users that deadline format are invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor that warns the user with a message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The string to be shown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception with the message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users that the event format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A constructor that warns the user with a mesage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The string to be shown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception with the message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users when entering invalid indexes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of this exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The message to be shown to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception as a message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users when entering invalid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A specific message to warn the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! I\u0027m sorry, but I don\u0027t know what that means :/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception to warn the users when creating invalid tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidTodoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of the exception as a message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A specific message to warn the user about invalid task constructors."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! Description of Todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 16
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\"  minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #000167\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" style\u003d\"-fx-background-color: #000167; -fx-border-color: #ffffff; -fx-text-fill: #ffffff\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" style\u003d\"-fx-background-color: #000167; -fx-border-color: #ffffff\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#ffffff\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" style\u003d\"-fx-background-color: #000167\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #000167\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 23
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A class that tests the TaskList class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Test class driver function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param args Command line arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) throws InvalidIndexException{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testTaskListAdd(testTaskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testTaskListDone(testTaskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the adding function of the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param testTaskList the TaskList that needs to be tested."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testTaskListAdd(TaskList testTaskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Task testTask \u003d new Task(\"test case \" + i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(testTaskList.list());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the done function of the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param testTaskList the TaskList that needs to be tested."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException the invalid index to delete."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testTaskListDone(TaskList testTaskList) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            testTaskList.done(i + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(testTaskList.list());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 45
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A class that tests the UI class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Driver function of the test class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param args Command line arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testUiLine(testUi);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testUiEnd(testUi);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the printing line function of the UI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param ui the Ui that needs to be tested."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testUiLine(Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the terminating message function of the UI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param ui the UI that needs to be tested."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testUiEnd(Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.end();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 33
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[T][✘] apply for job"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 1 task in the list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✘] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[D][✘] submit IP (by: thursday)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "1.[T][✘] apply for job"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "2.[E][✘] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "3.[D][✘] submit IP (by: thursday)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✘] revise CS3243 (at: 2359)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✓] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "todo apply for job"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "event revise CS2100 /at 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "deadline submit IP /by thursday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "event revise CS3243 /at 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 34
    }
  }
]
