[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 11,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "E | 0 | sleep | tmr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "E | 0 | meet orbital prof | Jan 31 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "D | 0 | apply NOC | Jan 31 2020"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 3
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * CS2103T AY 19/20 S2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Individual Project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * @author Yap Dian Hao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * @since 2020-01-30"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Duke is a personal chatbot assistant to help you organize your tasks. Especially helpful"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * for people who love to procrastinate. Or procrastinate to procrastinate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of the Duke chatbot assistant."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Duke is able to perform CRUD operations (Create, Read, Update, Destroy) to manage tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param filePath A text file which functions as a database to store all tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Starts the Duke bot by receiving user input, and stores all the data to the database"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * upon shutting down."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.start(this.taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        storage.write(this.taskList.getAllTasks());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.end();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * The main driver function of Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param args The command line arguments entered by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 69,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 10
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Deadline is a special kind of task that needs to be done before a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String by \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected LocalDate todoDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of a deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description A string with the details of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param by A string that represents a time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor overloading, with a date as time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description A string with the details of the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param todoDate The best before date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Deadline(String description, LocalDate todoDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the time of this deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that represents a time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.by.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return this.by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Gives a string representation of the deadline, with the details and the time best before."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.by.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[D]\" + getDescription() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String dateToPrint \u003d this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[D]\" + getDescription() + \" (by: \" + dateToPrint + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 58
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A special exception used by the Duke to alert its users."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 7
    }
  },
  {
    "path": "src/main/java/duke/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception which warns about input and output errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! Something is wrong with the input/output.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 11
    }
  },
  {
    "path": "src/main/java/duke/DukeTerminateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception which shuts down the Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class DukeTerminateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 7
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * An event is a special kind of task that needs to be done at a specific point of time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String at \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected LocalDate todoDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of an event, similar to a Tasks\u0027s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The description of an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param at the specific time or date that this event takes place."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * An overloading constructor with a special date parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The description of an event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param todoDate The date that this event takes place."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Event(String description, LocalDate todoDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the time of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denoting the event\u0027s time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (this.at.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Shows the string representation of the event, with the description and the time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (!this.at.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[E]\" + getDescription() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String dateToPrint \u003d this.todoDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return \"[E]\" + getDescription() + \" (at: \" + dateToPrint + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 56
    }
  },
  {
    "path": "src/main/java/duke/InsufficientInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke Exception which warns the users that arguments are not enough."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InsufficientInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS, the arguments are not enough!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 11
    }
  },
  {
    "path": "src/main/java/duke/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception to warn users that deadline format are invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor that warns the user with a message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The string to be shown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception with the message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users that the event format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A constructor that warns the user with a mesage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The string to be shown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception with the message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users when entering invalid indexes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of this exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param message The message to be shown to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of this exception as a message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The message to warn the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 25
    }
  },
  {
    "path": "src/main/java/duke/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception that warns users when entering invalid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A specific message to warn the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! I\u0027m sorry, but I don\u0027t know what that means :/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 15
    }
  },
  {
    "path": "src/main/java/duke/InvalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Duke exception to warn the users when creating invalid tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class InvalidTodoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A string representation of the exception as a message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A specific message to warn the user about invalid task constructors."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"OOPS! Description of Todo cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Parser is the logic handling agent of the user\u0027s commands and database inputs when loading from it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * The powerful thing of a parser is it does not rely on any external"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * agent to perform the processing of inputs, just with pure logic."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Processes every command line entered by the user. Users are able to enter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * bye, list, done x, find key, delete x, todo description, event description /at time,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * deadline description /by time, and any other inputs are deemed as invalid entries."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param command The string of command entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param taskList The TaskList to process CRUD operations based on user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output denoting the success / failure of an operation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws DukeTerminateException Shuts down the Duke by entering \"bye\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InsufficientInputException Not enough to arguments to find/delete/done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException Wrong indexes from TaskList\u0027s delete and done operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidTodoException Invalid format of Task entered by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidEventException Invalid format of Event entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidDeadlineException Invalid format of Deadline entered by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidInputException Invalid commands entered by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String processCommand(String command, TaskList taskList) throws DukeTerminateException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InsufficientInputException, InvalidIndexException, InvalidTodoException, InvalidEventException, InvalidDeadlineException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (command.equals(\"bye\")) { // exit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new DukeTerminateException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                output \u003d taskList.list();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"find\")) { //find"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InsufficientInputException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String key \u003d command.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                output \u003d taskList.find(key);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"done\")) { // done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InsufficientInputException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int idx \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                output \u003d taskList.done(idx);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"delete\")) { // delete"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InsufficientInputException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int idx \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                output \u003d taskList.delete(idx);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"todo\")) { // add todo"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InvalidTodoException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task task \u003d new Task(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                output \u003d taskList.addTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"deadline\")) { // add deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length()).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\"/by\").length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InvalidDeadlineException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \"Format: description /by time\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (command.split(\"/by\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (command.split(\"/by\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidEventException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \"Format: description /by time\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidEventException(\"OOPS! The time is missing. \" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \"Format: description /by time\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (command.split(\"/by\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (command.split(\"/by\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidDeadlineException(\"OOPS! The description is missing. \" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \"Format: description /by time\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String name \u003d command.split(\" /by\")[0].trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String time \u003d command.split(\" /by\")[1].trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(time)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate todoDate \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(name, todoDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    output \u003d taskList.addDeadline(deadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(name, time);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    output \u003d taskList.addDeadline(deadline);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else if (command.split(\" \")[0].equals(\"event\")) { // add event"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                command \u003d command.substring(command.split(\" \")[0].length() + 1, command.length()).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (command.split(\"/at\").length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    throw new InvalidEventException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                            \"Format: description /at time\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (command.split(\"/at\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (command.split(\"/at\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidEventException(\"OOPS! The description and time is missing. \" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \"Format: description /at time\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidEventException(\"OOPS! The time is missing. \" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                                \"Format: description /at time\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (command.split(\"/at\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (command.split(\"/at\")[0].equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        throw new InvalidEventException(\"OOPS! The description is missing.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String name \u003d command.split(\" /at\")[0].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String time \u003d command.split(\" /at\")[1].trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(time)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate todoDate \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(name, todoDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    output \u003d taskList.addEvent(event);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(name, time);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    output \u003d taskList.addEvent(event);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                throw new InvalidInputException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Process tasks from the database to a list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param line Every line of task from the database."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param storedTasks The list of task to load with."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void processInputFromFile(String line, List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String[] split \u003d line.split(\"\\\\ \\\\|\\\\ \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String type \u003d split[0];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task task \u003d new Task(split[2]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (Integer.parseInt(split[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                storedTasks.add(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String eventTime \u003d split[3];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String eventDescription \u003d split[2];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int eventStatus \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(eventTime)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate eld \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(eventDescription, eld);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (eventStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        event.setDone();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(event);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Event event \u003d new Event(eventDescription, eventTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (eventStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        event.setDone();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(event);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String deadlineTime \u003d split[3];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String deadlineDescription \u003d split[2];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                int deadlineStatus \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (isValidDate(deadlineTime)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    LocalDate dld \u003d LocalDate.parse(deadlineTime);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(deadlineDescription, dld);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (deadlineStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        deadline.setDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(deadline);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    Deadline deadline \u003d new Deadline(deadlineDescription, deadlineTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    if (deadlineStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                        deadline.setDone();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    storedTasks.add(deadline);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A logic function to determine the validity of a date entered."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A date is a string in special format entered by the user to create deadlines/events.\\"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * with the format YYYY-MM-DD"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param str The string of date to be tested with."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A boolean to denote this string is a date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static boolean isValidDate(String str) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            LocalDate.parse(str);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 205
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A storage class that manages the accessing of all the tasks from the database."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static private String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructs a Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param path the path that points to the location of the database, a text file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Loads all the previous tasks from the database into a temporary list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The list after the tasks are loaded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws DukeIOException The database is not found or a wrong location."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeIOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            BufferedReader bfr \u003d new BufferedReader(new FileReader(this.path));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String line \u003d bfr.readLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                parser.processInputFromFile(line, storedTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                line \u003d bfr.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new DukeIOException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            return storedTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Uploads the updated list of all files to the database upon Duke\u0027s termination."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param toStore The list of tasks that needs to be stored into the database."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void write(List\u003cTask\u003e toStore) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            for (int i \u003d 0; i \u003c toStore.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                Task curr \u003d toStore.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (curr instanceof Deadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"D | \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon() + \" | \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(((Deadline) curr).getDeadline());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else if (curr instanceof Event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"E | \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon() + \" | \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(((Event) curr).getTime());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(\"T | \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write((curr.getStatus() ? \"1\" : \"0\") + \" | \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(curr.getDescriptionWithoutIcon());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (i !\u003d toStore.size() - 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 79
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A Task is something that needs to be done by the user, at anytime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor of a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param description The information about the task that needs to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Gets a status icon, a check or a cross based on the task\u0027s completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An icon of a check or a cross."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return (isDone ? \"\\u2714\" : \"\\u2718\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A setter method for the task. Sets the task as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the description of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return The description of the task, without the status icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDescriptionWithoutIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the status of completion of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return Boolean value to determine if the task has been completed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the full description of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denotes the description of the task, including the status icon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A complete information of the task, with a T prefix to denote that this is a task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string representation of the task, with description and status icon."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return \"[T]\" + getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 66
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * Stores a temporary list of current tasks of the user. TaskList is able to perform various"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * operations, such as adding, updating, deleting, and even show all of them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Constructor. Starts with an empty list, if no previous tasks is left by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Overriding constructor. If the user has any leftover incomplete tasks, includes them"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * for every operations later."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param tasks The previous incomplete list of tasks by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds a task to the current list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param task The current task that needs to be added into the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addTask (Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds a deadline to the current list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param deadline The deadline that needs to be added into the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this deadline:\" + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d deadline + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Adds an event to the current list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param event The event that needs to be added into the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return An output specifying how many tasks the user has, after the adding."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String addEvent(Event event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.add(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this deadline:\" + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d event + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Shows all the tasks, including those that are done or incomplete, to the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that includes every task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            res +\u003d (i + 1) + \".\" + this.tasks.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (i !\u003d this.tasks.size() - 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                res +\u003d \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Finds the task with a keyword requested by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param key The keyword the user wants to search with."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that includes all the tasks with the entered keyword."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String find(String key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"Here are the matching tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            if (task.getDescriptionWithoutIcon().contains(key)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            res +\u003d (i + 1) + \".\" + filteredTasks.get(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Marks a certain task as done upon completion."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param idx The index of the task that needs to be marked done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string that shows the status of the updated task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException incorrect index, i.e. a negative number."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String done(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String message \u003d \"OOPS! Invalid task number. You only have \" + this.tasks.size()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidIndexException(message);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task curr \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        curr.setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d curr;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Removes a task from the list as requested by the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param idx The index of the task that needs to be removed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A string denotes the number of tasks the user have after the deletion."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException incorrect index, i.e. a large number when tasks are only a few."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public String delete(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            String message \u003d \"OOPS! Invalid task number. You only have \" + this.tasks.size()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + (this.tasks.size() \u003e 1 ? \" tasks\" : \" task\") + \" in the list\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            throw new InvalidIndexException(message);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Task toDelete \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.tasks.remove(idx);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (toDelete + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        res +\u003d (\"Now you have \" + this.tasks.size()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    + \" \" + (this.tasks.size() \u003e 1 ? \"tasks\" : \"task\") + \" in the list\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * A getter method to access the list by the TaskList class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @return A list of all the tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public List\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 154
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * This is the User Interface of the Duke. Accepts keyboard input from user,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * and shows the output after the operations."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Ui Constructor. Has a Parser attribute to process inputs,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * and a Scanner to accept inputs. Shows a logo to greet the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Starts the UI. The UI will continue to receive inputs, and terminates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * when the user wishes to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void start(TaskList taskList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        while (true){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String command \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                String output \u003d parser.processCommand(command, taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                if (!output.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                    System.out.println(output);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } catch (DukeTerminateException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                System.out.println(\"Bye\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Prints a goodbye message to the user upon shutdown."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(\"See you again!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 66
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A class that tests the TaskList class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Test class driver function."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param args Command line arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) throws InvalidIndexException{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testTaskListAdd(testTaskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testTaskListDone(testTaskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the adding function of the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param testTaskList the TaskList that needs to be tested."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testTaskListAdd(TaskList testTaskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            Task testTask \u003d new Task(\"test case \" + i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(testTaskList.list());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the done function of the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param testTaskList the TaskList that needs to be tested."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @throws InvalidIndexException the invalid index to delete."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testTaskListDone(TaskList testTaskList) throws InvalidIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "            testTaskList.done(i + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        System.out.println(testTaskList.list());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 45
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " * A class that tests the UI class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Driver function of the test class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param args Command line arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testUiLine(testUi);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        testUiEnd(testUi);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the printing line function of the UI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param ui the Ui that needs to be tested."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testUiLine(Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * Tests the terminating message function of the UI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     * @param ui the UI that needs to be tested."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    static void testUiEnd(Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "        ui.end();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 33
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[T][✘] apply for job"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 1 task in the list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✘] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[D][✘] submit IP (by: thursday)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "1.[T][✘] apply for job"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "2.[E][✘] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "3.[D][✘] submit IP (by: thursday)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✘] revise CS3243 (at: 2359)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Now you have 4 tasks in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "[E][✓] revise CS2100 (at: 2359)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "todo apply for job"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "event revise CS2100 /at 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "deadline submit IP /by thursday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "event revise CS3243 /at 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yapdianhao"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "yapdianhao": 34
    }
  }
]
