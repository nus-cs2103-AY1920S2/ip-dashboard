[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "tingalinga": 41
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "D | 1 | cs3230 assignment | Feb 6 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "T | 1 | javafx"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "T | 0 | dance"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "D | 1 | citi | Feb 28 2020"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "T | 0 | halol"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 5
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * AddCommand class handles user\u0027s request to add a task to the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a new AddCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param type type of task (todo, deadline, event)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AddCommand(String type, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the add command. Creates a task according to the task type and adds it to the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the add command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Task t \u003d new Task(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            t \u003d new Todo(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkDateException(\"deadline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            t \u003d new Deadline(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkDateException(\"event\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            t \u003d new Event(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            storage.writeToFile(tasks.saveList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            result \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + t + \"\\n\" + tasks.printSizeString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Checks task (deadline or event) for the presence of date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param deadlineOrEvent indicates whether method checks the event or deadline for"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *                        presence of date in task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void checkDateException(String deadlineOrEvent) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (deadlineOrEvent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            String[] deadlineArr \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            // error: task is missing deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (deadlineArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Deadline of task cannot be empty.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            String[] eventArr \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            // error: event is missing time"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (eventArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 92
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * ByeCommand class handles user\u0027s request to exit program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the exit command and ends the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the bye command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 30
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Abstract Command class handles user\u0027s request."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Abstract execute method that handles user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 23
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Deadline class represents an deadline task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public LocalDate localDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an incomplete deadline task with given description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] arr \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d arr[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d arr[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(arr[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Deadline(String description, int done) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] arr \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d arr[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d arr[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(arr[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date deadline of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Deadline(String description, int done, String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats deadline task for save to database."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"D | \" + 1 + \" | \" + this.description + \" | \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"D | \" + 0 + \" | \" + this.description + \" | \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats deadline task for printing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[D][✓] \" + this.description + \" (by: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[D][✗] \" + this.description + \" (by: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 80
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * DeleteCommand class handles user\u0027s request to delete a task from the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param index index position of task that user wants to delete."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the delete command. Deletes specified task from the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the delete command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return tasks.delete(this.index, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns boolean true if command exits the program, false if otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Checks command for valid index number."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void checkDeleteException(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        // list has 5 items, tasks.size() \u003d 5, this.index max \u003d 4"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (tasks.size() \u003c\u003d this.index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Task \" + this.index + \" does not exist.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 52
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns Duke\u0027s dialog."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param text text."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param img image."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return duke\u0027s dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 68
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * DoneCommand class handles user\u0027s request to mark a task in the task list as completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param index index position of task that user wants to mark as completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the done command. Marks specified task from the task list as completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the delete command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        checkDoneException(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return tasks.done(this.index, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Checks command for valid index number."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void checkDoneException(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        // list has 5 items, tasks.size() \u003d 5, this.index max \u003d 4"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (tasks.size() \u003c\u003d this.index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Task \" + this.index + \" does not exist.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 52
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Duke, a Personal Assistant Chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a Duke chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param filePath path to file that stores a list of user\u0027s tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            File file \u003d new File(\"data\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                //create new data dir and duke.file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new File(filePath).createNewFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a Duke chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        storage \u003d new Storage(\"/Users/HuiTing/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Runs Duke program."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        });"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        });"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private void handleUserInput() throws IOException, DukeException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        );"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String getResponse(String input) throws DukeException, IOException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            result \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            result \u003d e.getMessage();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 233,
      "-": 1
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * DukeException class handles errors in user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Event class represents an event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public LocalDate localDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an incomplete event task with given description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] arr \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d arr[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d arr[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(arr[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Event(String description, int done) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] arr \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d arr[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d arr[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(arr[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date date of event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Event(String description, int done, String date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats event task for save to database."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"E | \" + 1 + \" | \" + this.description + \" | \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"E | \" + 0 + \" | \" + this.description + \" | \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats event task for printing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[E][✓] \" + this.description + \" (at: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[E][✗] \" + this.description + \" (at: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    + this.localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 77
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * FindCommand class handles user\u0027s request to find all tasks contain a search key."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a new FindCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description keyword that users want to find"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the find command. Searches all tasks in task list for tasks that contain the keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the find command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return tasks.find(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 38
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * ListCommand class handles user\u0027s request to list and print all tasks in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Executes the list command. Prints all tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param ui user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the list command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return tasks.printListString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that determines if command exits the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 30
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private void handleUserInput() throws IOException, DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 52
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Parser class takes in and parses user input to return commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static String[] tasksCommandList \u003d {\"todo\", \"deadline\", \"event\"};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Parses user input to return a command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param command user\u0027s input to specify command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] split \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String commandType \u003d split[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkInputException(split, commandType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new DoneCommand(Integer.parseInt(split[1]) - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkInputException(split, commandType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(split[1]) - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkInputException(split, commandType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new FindCommand(split[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            checkInputException(split, commandType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new AddCommand(commandType, split[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Checks correctness of user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Done and delete command must have index number input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Add task command must have task description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param split command split into respective keywords."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param commandType type of command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static void checkInputException(String[] split, String commandType) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (split.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Task number cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Task description cannot be empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Search keyword cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 67
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Makeshift database that stores all task list in a file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a makeshift database in file at specified filepath."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param filePath path to file that stores the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Loads list of tasks from the database."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws FileNotFoundException if file annot be found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public List\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        File f \u003d new File(this.filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            String[] parts \u003d s.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            switch (parts[0]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                list.add(new Todo(parts[2], Integer.parseInt(parts[1])));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                list.add(new Deadline(parts[2], Integer.parseInt(parts[1]), convertDateFormat(parts[3])));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                list.add(new Event(parts[2], Integer.parseInt(parts[1]), convertDateFormat(parts[3])));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts string indicating month to its corresponding integer as a string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param month string of month."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return integer of month formatted as a string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String convertMonthToInt(String month) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jan\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"01\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Feb\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"02\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Mar\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"03\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Apr\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"04\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"May\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"05\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jun\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"06\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jul\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"07\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Aug\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"08\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Sep\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"09\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Oct\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"10\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Nov\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"11\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"12\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts format of date that can be parsed by java.time.LocalDateTime."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date string of date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that can be parsed by java.time.LocalDateTime."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String convertDateFormat(String date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] parts \u003d date.split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String year \u003d parts[2];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String month \u003d convertMonthToInt(parts[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String day \u003d String.format(\"%02d\", Integer.parseInt(parts[1]));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return year + \"-\" + month + \"-\" + day;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Writes string to file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param textToAdd test to be written to file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void writeToFile(String textToAdd) throws IOException  {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats and write task list to file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param list list of tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void rewriteFile(TaskList list) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            String text \u003d list.get(i).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            fw.write(text + \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Appends string to the back of file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param textToAppend string to be added to back of file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void appendToFile(String textToAppend) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        fw.write(textToAppend + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 139
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Task class represents a task indicated by user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an incomplete task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Task(String description, int done) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true of description of task contains keyword, and false if otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param keyword keyword specified by user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean indicating if description contains keyword."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean contains(String keyword) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this.description.contains(keyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats task for save to database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"T | \" + 1 + \" | \" + this.description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"T | \" + 0 + \" | \" + this.description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Marks task as completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats task for printing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[✓] \" + this.description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[✗] \" + this.description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 70
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Task list that stores all tasks specified by user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an empty task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param list list of tasks to be stored in the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Adds task to the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param task task to be added to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns task in task list requested by user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param index index position of task in the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return Task requested by user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Return formatted string that contains all tasks in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string message containing all tasks in task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String saveList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String toSave \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            toSave +\u003d list.get(i).toPrint();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            toSave +\u003d \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return toSave;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns number of tasks in the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return integer representing number of tasks in task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints all tasks in the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (list.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            System.out.println(\"     There are no tasks in your list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                System.out.println(\"     \" + (i + 1) + \". \" + list.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns formatted list of all tasks in the task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the list command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String printListString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String printString \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (list.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            printString +\u003d \"There are no tasks in your list.\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            printString +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                printString +\u003d (i + 1) + \". \" + list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return printString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints the number of tasks present in task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void printSize() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"     Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a string indicating size of task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string containing size of task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String printSizeString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"Now you have \" + list.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Marks task in task list as completed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param index index position of task in task list to be marked as completed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the done command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String done(int index, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        list.get(index).markDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        storage.writeToFile(saveList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String doneResult \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + list.get(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return doneResult;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Deletes task from task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param index index position of task to be deleted from task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param storage makeshift database for tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the delete command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *     does not exist but cannot be created, or cannot be open for any other reason."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DukeException if user input does not follow input format."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String delete(int index, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! There is no task \" + (index + 1) + \".\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String deleteResult \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        deleteResult +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        deleteResult +\u003d list.get(index) + \"\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        storage.writeToFile(saveList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return deleteResult;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Searches and returns a list of tasks containing a keyword."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param keyword keyword specified by user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string indicating completion of the find command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        List\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (list.get(i).contains(keyword)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                matchedTasks.add(list.get(i));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String findResult \u003d \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (matchedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            findResult +\u003d \"There are no matching tasks in your list.\\n\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            findResult +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                findResult +\u003d (i + 1) + \". \" + matchedTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return findResult;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 173
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Todo class represents a todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates an incomplete todo task with given description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a todo task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param done boolean indicating if task is completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Todo(String description, int done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats todo task for save to database."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"T | \" + 1 + \" | \" + this.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"T | \" + 0 + \" | \" + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Formats todo task for printing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that represents task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[T][✓] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"[T][✗] \" + this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 46
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Ui class handles user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a Ui (user interface) that handles user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String tinga \u003d \"       _    _  \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"     _| |_ (_)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"    |_   _\\\\ _  _ __   ____   __ _\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      | |  | \\\\| \u0027  \\\\ / _  \\\\ / _` |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      | |  | || || || |_| || (_| |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      |_|  |_||_||_| \\\\__  | \\\\__,_|\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"                     /\\\\_| |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"                     \\\\____/\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(tinga);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"    Hey there! I\u0027m tinga :)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"    What can I do for you?\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns string with welcome message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string containing welcome message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static String showWelcomeString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String tinga \u003d \"       _    _  \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"     _| |_ (_)\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"    |_   _\\\\ _  _ __   ____   __ _\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      | |  | \\\\| \u0027  \\\\ / _  \\\\ / _` |\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      | |  | || || || |_| || (_| |\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"      |_|  |_||_||_| \\\\__  | \\\\__,_|\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"                     /\\\\_| |\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"                     \\\\____/\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        tinga +\u003d \"Hey there! I\u0027m tinga :)\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        tinga +\u003d \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return tinga;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints a line."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if scanner has a next line, and false if otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return string of user\u0027s input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints loading error where file is not loaded."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! File not loaded.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Prints error."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param error error message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! \" + error);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 91
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "D | 0 | finish cs3230 assignment | Feb 6 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "T | 1 | complete ger quiz"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "E | 0 | hello | Apr 3 2020"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 4
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" text\u003d\"What can I do for you?\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 10
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void testConvertMonthToInt() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(\"03\", storage.convertMonthToInt(\"Mar\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void testConvertDateFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(\"2020-02-02\", storage.convertDateFormat(\"Feb 2 2020\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 17
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(0, list.size());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 11
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "      ____        _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     |  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Hey there! I\u0027m Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [T][✗] read book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [D][✗] return book (by: June 6th)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [E][✗] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [T][✗] join sports club"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     1. [T][✓] read book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     2. [D][✗] return book (by: June 6th)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     3. [E][✗] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     4. [T][✓] join sports club"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [T][✗] borrow book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [D][✗] return book (by: Sunday)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "       [E][✗] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 64
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 11
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 34
    }
  }
]
