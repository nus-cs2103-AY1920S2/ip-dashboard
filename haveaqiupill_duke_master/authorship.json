[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version\u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    testCompile \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    compile \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    toolVersion \u003d \"8.23\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 44,
      "-": 20
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "T | 0 | read book"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The Deadline Class extends the Task Class to store objects with a description with a time and date attached."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected LocalDateTime ldt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static TaskType type \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a Deadline object with a description and specific start and end time and date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param description details of the Deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param time start and end time and date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        TimeParser tp \u003d new TimeParser(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ldt \u003d tp.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the type of the Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return TaskType.DEADLINE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + ldt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\")) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 39
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a dialog box when Duke wants to send a message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param text The message that Duke wants to show."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param img  The Duke image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return The DialogBox instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 66
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The Main Class initialises all important objects for the program to run."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Eevee ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a Main object from a filepath."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param filepath filepath"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui \u003d new Eevee();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            tasks \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Empty constructor for launcher to work."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String run(String command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return ui.echo(tasks, storage, command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Duke eevee \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return eevee.run(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 45,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(\"D: OOPS!!! \" + error);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 5
    }
  },
  {
    "path": "src/main/java/Eevee.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * UI Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Eevee {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Initialises the scanner and Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param storage storage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String echo(TaskList tasks, Storage storage, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//        sb.append(\"~Hello I am Eevee.~\\n\" + \"~What can I do for you?~\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//        sb.append(\"                                      |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                     /|\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                   ,\u0027 |\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                  .   |\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                    | |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                 \u0027 \u0027| |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                / / | |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"       _,.-\\\"\\\"--._              / /  | |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"     ,\u0027          `.           j \u0027   \u0027 \u0027\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"   ,\u0027              `.         ||   / ,                         ___..--,\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"  /                  \\\\        \u0027 `.\u0027`.-.,-\\\".  .       _..---\\\"\\\"\u0027\u0027 __, ,\u0027\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \" /                    \\\\        \\\\` .\\\"`      `\\\"\u0027\\\\   ,\u0027\\\"_..--\u0027\u0027\\\"\\\"\\\"\u0027.\u0027.\u0027\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \".                      .      .\u0027-\u0027             \\\\,\u0027 ,\u0027         ,\u0027,\u0027\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"|                      |      ,`               \u0027 .`         .\u0027 /\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"|                      |     /          ,\\\"`.  \u0027 `-. _____.-\u0027 .\u0027\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"\u0027                      |..---.|,\\\".      | | .  .-\u0027\\\"\\\"   __.,-\u0027\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \" .                   ,\u0027       ||,|      |.\u0027 |    |\\\"\\\"`\u0027\\\"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"  `-._   `._.._____  |        || |      `._,\u0027    |\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"      `.   .       `\\\".     ,\u0027\\\"| \\\"  `\u0027           ,+.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"        \\\\  \u0027         |    \u0027   |   .....        .\u0027  `.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"         .\u0027          \u0027     7  \\\".              ,\u0027     \\\\\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                   ,\u0027      |    `..        _,\u0027      F\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                  .        |,      `\u0027----\u0027\u0027         |\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                  |      ,\\\"j  /                   | \u0027\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                  `     |  | .                 | `,\u0027\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                   .    |  `.|                 |/\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                    `-..\u0027   ,\u0027                .\u0027\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                            | \\\\             ,\u0027\u0027\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                            |  `,\u0027.      _,\u0027 /\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                            |    | ^.  .\u0027   /\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                             `-\u0027.\u0027 j` V    /\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                   |      /\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                   |     /\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                   |   ,\u0027\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                + \"                                    `\\\"\\\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Lister lister \u003d new Lister(tasks, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "             sb.append(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "             return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            sb.append(lister.record(command));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        System.out.println(\"The text file is empty...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 69
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The Event Class extends the Task Class to store objects with a description with a time but no date attached."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected LocalDateTime ldt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskType type \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates an Event object with a description and specific start and end time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param description details of the Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param time start and end time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        TimeParser tp \u003d new TimeParser(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ldt \u003d tp.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the type of the Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return TaskType.EVENT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + ldt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\")) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 40
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 10
    }
  },
  {
    "path": "src/main/java/Lister.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The Lister Class parses commands and references TaskList and Storage Classes to store and retrieve Tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Lister {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a Lister object to reference to TaskList and Storage objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param tasks initial TaskList stores Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param storage initial storage with filepath to store data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Lister(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses commands from command line."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param command input to identify relevant Task objects to create and their description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String record(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            sb.append(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                sb.append((i + 1) + \".\" + taskList.retrieveTask(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                int x \u003d getIndex(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                switch (command.substring(0, x)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int b \u003d Integer.valueOf(command.substring(x + 1)) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    taskList.removeTask(b);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(\"Noted. I\u0027ve removed this task:\\n\" + taskList.retrieveTask(b).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(\"Now you have \" + taskList.getSize() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int y \u003d Integer.valueOf(command.substring(x + 1)) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    taskList.retrieveTask(y).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.retrieveTask(y).toString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int z \u003d command.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    Task newDeadline \u003d new Deadline(command.substring(x + 1, z - 1), command.substring(z + 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    taskList.addTask(newDeadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(stringTask(newDeadline));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int a \u003d command.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    Task newEvent \u003d new Event(command.substring(x + 1, a - 1), command.substring(a + 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(stringTask(newEvent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    Task newToDo \u003d new ToDo(command.substring(x + 1), \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    taskList.addTask(newToDo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(stringTask(newToDo));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    TaskList tempList \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String description \u003d command.substring(x + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        Task tempTask \u003d taskList.retrieveTask(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        if (tempTask.description.equals(description)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            tempList.addTask(tempTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        tempList.retrieveTask(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        sb.append(\"Sorry there are no such tasks.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    for (int i \u003d 0; i \u003c tempList.getSize(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        sb.append((i + 1) + \".\" + tempList.retrieveTask(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    throw new IllegalStateException(\"Unexpected value: \" + command.substring(0, x));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                sb.append(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage.storeData(taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private int getIndex(String command) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int x;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            x \u003d command.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//            if (x \u003c 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//                throw new StringIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            assert x \u003e\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new DukeException(\"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry but I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return x \u003e 0 ? x : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String stringTask(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\\n\" + task.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        sb.append(\"\\nNow you have \" + taskList.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 121
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private void handleUserInput() throws IOException, DateTimeParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 53
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ArrayList\u003cTask\u003e store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private PrintWriter writer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Stores data through storage class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param t task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void storeData(TaskList t) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        store \u003d t.getStore();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c store.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            Task curr \u003d store.get(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            switch (curr.getType()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                sb.append(\"T | \" + (curr.isDone ? 1 : 0) + \" | \" + curr.description + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                sb.append(\"E | \" + (curr.isDone ? 1 : 0) + \" | \" + curr.description + \" | \" + curr.time + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                sb.append(\"D | \" + (curr.isDone ? 1 : 0) + \" | \" + curr.description + \" | \" + curr.time + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new IllegalStateException(\"Unexpected value: \" + curr.getType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            writer \u003d new PrintWriter(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            writer.write(sb.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            System.out.println(fnfe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Loads data from store."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return ArrayList of tasks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ArrayList loadData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                int x \u003d line.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                String command \u003d line.substring(0, x - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    ToDo task \u003d new ToDo(line.substring(8), \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    if (line.substring(4, 5).equals(\"1\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    this.store.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String details \u003d line.substring(8);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int y \u003d details.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    System.out.println(details);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    Event event \u003d new Event(details.substring(0, y - 1), details.substring(y + 2));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    if (line.substring(4, 5).equals(\"1\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    this.store.add(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String detail \u003d line.substring(8);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    int z \u003d detail.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    System.out.println(detail);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    Deadline deadline \u003d new Deadline(detail.substring(0, z - 1), detail.substring(z + 2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    if (line.substring(4, 5).equals(\"1\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    this.store.add(deadline);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    throw new IllegalStateException(\"Unexpected value: \" + command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 100
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The Task Class is the parent class to ToDo, Deadline and Event Classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskType type \u003d TaskType.TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a Task object with a description and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param description details of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param time time of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Task(String description, String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts boolean isDone to a tick or cross."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return a tick or cross as a String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Changes the boolean isDone to true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the type of the Task (ToDo, Event or Deadline)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return type of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 50
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ArrayList\u003cTask\u003e storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a TaskList from existing storage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param storage storage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws DukeException if storage is null"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskList(ArrayList storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (storage \u003d\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DukeException(\"empty file\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.storage \u003d storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ArrayList\u003cTask\u003e getStore() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage.add(t);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage.remove(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Task retrieveTask(int i) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return storage.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return storage.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 44
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    DEADLINE"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String timeString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TimeParser(String timeString) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        format();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private void format() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            time \u003d LocalDateTime.parse(timeString, dtf);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            System.out.println(dtpe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 27
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The ToDo Class extends the Task Class to store objects with a description but no time and date attached."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @author qiujingying"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskType type \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected String time \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a ToDo object with a description and empty time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param description details of the ToDo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param time empty string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ToDo(String description, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the type of the Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return TaskType.TODO"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 33
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 19
    }
  },
  {
    "path": "src/test/java/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ArrayList\u003cTask\u003e dummy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void dukeTaskTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        dummy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        dummy.add(new Task(\"read book\", \"\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            taskList \u003d new TaskList(dummy);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            System.out.println(d);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(\"[✘] read book\", taskList.retrieveTask(0).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void dukeTodoTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ToDo test \u003d new ToDo(\"go out\", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(\"[T][✘] go out\", test.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 29
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Hello I am Duke."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "[T][✘] borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "1.[T][✘] borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "[D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "Now you have 2 tasks in the list."
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "deadline return book /by Sunday"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "if [ ! -d \"../bin\" ]; then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]; then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  rm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin $(find ../src/main/java/* | grep .java); then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "fi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "java -classpath ../bin Main \u003cinput.txt \u003eACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "if [ $? -eq 0 ]; then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "else"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 30
    }
  }
]
