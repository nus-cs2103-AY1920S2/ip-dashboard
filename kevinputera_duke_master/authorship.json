[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    mainClassName \u003d \u0027com.duke.bot.Duke\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        showStandardStreams \u003d true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 26,
      "-": 18
    }
  },
  {
    "path": "src/main/java/com/duke/bot/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.util.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * A personal note-taking assistant."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final View view;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final PersistentStorage persistentStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Initialize a Duke instance with a custom path to a flat-file database."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param storagePath Path to the file intended to be used as a flat-file database"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Duke(Path storagePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        view \u003d new View();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        persistentStorage \u003d new PersistentStorage(storagePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            tasks \u003d persistentStorage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        view.print(List.of(\"Hello! I\u0027m Duke\", \"What can I do for you?\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Runs Duke\u0027s request-response cycle. Requests are given from the standard input, while"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * responses are printed out to the standard output."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        boolean hasNext \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                Command.ExecuteResult result \u003d command.execute(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                tasks \u003d result.getTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                hasNext \u003d result.hasNextCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                view.print(result.getMessages());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                persistentStorage.save(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            } catch (DukeException exception) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                view.print(List.of(exception.getMessage() + \"!\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                view.print(List.of(\"Failed to persist data!\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } while (hasNext);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Duke duke \u003d new Duke(Path.of(System.getProperty(\"user.dir\"), \"data.txt\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 67
    }
  },
  {
    "path": "src/main/java/com/duke/bot/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 7
    }
  },
  {
    "path": "src/main/java/com/duke/bot/PersistentStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class PersistentStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final Path storagePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public PersistentStorage(Path storagePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.storagePath \u003d storagePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Saves the tasks provided to the disk as a flat file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param tasks Tasks to be saved to the disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws IOException Throws when there is any problem with the writing process"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Files.write("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            storagePath,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            tasks.getUnderlyingList().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .map(this::serializeTask)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    .collect(Collectors.toUnmodifiableList()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            StandardCharsets.UTF_8"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private String serializeTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return String.format(\"T,%s,%b\", todo.getTitle(), todo.isDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \"E,%s,%b,%s\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    event.getTitle(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    event.isDone(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    event.getDateAt().format(DateTimeFormatter.ISO_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return String.format("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    \"D,%s,%b,%s\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    deadline.getTitle(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    deadline.isDone(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    deadline.getDateBy().format(DateTimeFormatter.ISO_DATE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new RuntimeException(\"Unknown task type\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Loads tasks from the disk (from a flat-file database)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Tasks loaded from the disk"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws IOException Throws when there is any problem with the reading process"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList load() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new TaskList(Files.readAllLines(storagePath).stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                .map(this::deserializeTask)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                .collect(Collectors.toUnmodifiableList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    } "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private Task deserializeTask(String serialized) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String[] tokens \u003d serialized.split(\",\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[2]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (tokens[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new Todo(tokens[1], isDone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (tokens[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            LocalDate dateAt \u003d LocalDate.parse(tokens[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new Event(tokens[1], isDone, dateAt);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (tokens[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            LocalDate dateBy \u003d LocalDate.parse(tokens[3]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new Deadline(tokens[1], isDone, dateBy);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new RuntimeException(\"Unknown serialized task type\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 90
    }
  },
  {
    "path": "src/main/java/com/duke/bot/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * This method is immutable; thus, it returns a newly created list instead of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * mutating the current instance."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param task Task to be added to the list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return A newly created list with the added task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        newTasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new TaskList(newTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Removes a task from the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * This method is immutable; thus, it returns a newly created list instead of"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * mutating the current instance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param index Index of the task to be deleted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return A newly created list without the deleted task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList remove(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        newTasks.remove(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new TaskList(newTasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Replaces the task at a specific index with another task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * This method is immutable; thus, it returns a newly created list instead of"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * mutating the current instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param index Index of the task to be replaced"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param task A task that will occupy the specified index at the end of the operation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return A newly created list with the task replaced"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public TaskList set(int index, Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        newTasks.set(index, task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new TaskList(newTasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cTask\u003e getUnderlyingList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 72
    }
  },
  {
    "path": "src/main/java/com/duke/bot/View.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class View {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Formats and prints the lines of strings supplied into the standard output."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param lines Lines of strings to be printed to the standard output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void print(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        lines.forEach(line -\u003e System.out.println(\"     \" + line));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 16
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final Task addTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public AddCommand(Task addTask) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.addTask \u003d addTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new ExecuteResult("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                tasks.add(addTask),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        \"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        \"  \" + addTask,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        String.format(\"Now you have %d tasks in the list.\", tasks.size() + 1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 26
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static class ExecuteResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        private final TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        private final List\u003cString\u003e messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        private final boolean hasNextCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * Instantiates an data structure containing the results of calling"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * the {@link #execute(TaskList, List, boolean) execute} method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * @param tasks Updated tasks after executing the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * @param messages Lines of messages given as a response to executing the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * @param hasNextCommand Whether or not the current command is terminal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        public ExecuteResult(TaskList tasks, List\u003cString\u003e messages, boolean hasNextCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            this.messages \u003d messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            this.hasNextCommand \u003d hasNextCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        public TaskList getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        public List\u003cString\u003e getMessages() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        public boolean hasNextCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return hasNextCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public abstract ExecuteResult execute(TaskList tasks) throws DukeException; "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 41
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final int deleteIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (deleteIndex \u003e\u003d 0 \u0026\u0026 deleteIndex \u003c tasks.size()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new ExecuteResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    tasks.remove(deleteIndex),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    List.of("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            \"Noted. I\u0027ve removed this task:\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            \"  \" + tasks.get(deleteIndex),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            String.format(\"Now you have %d tasks in the list\", tasks.size() - 1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, delete index is out of bounds\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 30
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final int doneIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (doneIndex \u003e\u003d 0 \u0026\u0026 doneIndex \u003c tasks.size()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Task doneTask \u003d tasks.get(doneIndex).setDone(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new ExecuteResult("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    tasks.set(doneIndex, doneTask),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    List.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            \"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            \"  \" + doneTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    ),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, done index is out of bounds\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 31
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new ExecuteResult(tasks, List.of(\"Bye. Hope to see you again soon!\"), false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 11
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new ExecuteResult("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                tasks,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                Stream.concat("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        Stream.of(\"Here are the matching tasks in your list:\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        tasks.getUnderlyingList().stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                                .map(Object::toString)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                                .filter(taskString -\u003e taskString.matches(\".*\" + keyword + \".*\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                ).collect(Collectors.toUnmodifiableList()),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 27
    }
  },
  {
    "path": "src/main/java/com/duke/bot/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ExecuteResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new ExecuteResult("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                tasks,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                Stream.concat("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        Stream.of(\"Here are the tasks in your list:\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                        IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                                .boxed()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                                .map(index -\u003e String.format(\"%d.%s\", index + 1, tasks.get(index)))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                ).collect(Collectors.toUnmodifiableList()),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 22
    }
  },
  {
    "path": "src/main/java/com/duke/bot/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private LocalDate dateBy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Deadline(String title, boolean isDone, LocalDate dateBy) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Deadline(String title, LocalDate dateBy) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(title, false, dateBy);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public LocalDate getDateBy() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return dateBy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Deadline setDone(boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new Deadline(getTitle(), isDone, dateBy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"[D][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                isDone() ? \"\\u2713\" : \"\\u2717\", // \\u2713 \u003d tick, \\u2717 \u003d cross"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getTitle(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                dateBy.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(obj instanceof Deadline)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Deadline other \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return dateBy.equals(other.getDateBy()) \u0026\u0026 super.equals(obj);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 45
    }
  },
  {
    "path": "src/main/java/com/duke/bot/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private LocalDate dateAt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Event(String title, boolean isDone, LocalDate dateAt) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.dateAt \u003d dateAt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Event(String title, LocalDate dateAt) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(title, false, dateAt);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public LocalDate getDateAt() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return dateAt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Event setDone(boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new Event(getTitle(), isDone, dateAt);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"[E][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                isDone() ? \"\\u2713\" : \"\\u2717\", // \\u2713 \u003d tick, \\u2717 \u003d cross"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getTitle(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                dateAt.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(obj instanceof Event)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Event other \u003d (Event) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return dateAt.equals(other.getDateAt()) \u0026\u0026 super.equals(obj);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 45
    }
  },
  {
    "path": "src/main/java/com/duke/bot/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Task(String title, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public abstract Task setDone(boolean isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(obj instanceof Task)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Task other \u003d (Task) obj;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return isDone \u003d\u003d other.isDone \u0026\u0026 Objects.equals(title, other.title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 37
    }
  },
  {
    "path": "src/main/java/com/duke/bot/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Todo(String title, boolean isDone) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Todo(String title) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(title, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Todo setDone(boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new Todo(getTitle(), isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"[T][%s] %s\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                isDone() ? \"\\u2713\" : \"\\u2717\", // \\u2713 \u003d tick, \\u2717 \u003d cross"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                getTitle()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(obj instanceof Todo)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 33
    }
  },
  {
    "path": "src/main/java/com/duke/bot/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.util; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Parses a string input and return the command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * (one of the subclasses of {@link com.duke.bot.command.Command}) the input represents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param input String input to be parsed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return A command the string input represents"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @throws DukeException Throws if invalid input string is received"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (input.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseDoneInput(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseDeleteInput(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseFindInput(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseTodoInput(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseEventInput(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return parseDeadlineInput(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(String.format(\"Oops, \u0027%s\u0027 is an invalid input\", input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseDoneInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern donePattern \u003d Pattern.compile(\"^done\\\\s+(\\\\d+)$\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher doneMatcher \u003d donePattern.matcher(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (doneMatcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int doneIndex \u003d Integer.parseInt(doneMatcher.group(1)) - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid done command\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseDeleteInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern deletePattern \u003d Pattern.compile(\"^delete\\\\s+(\\\\d+)$\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher deleteMatcher \u003d deletePattern.matcher(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (deleteMatcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(deleteMatcher.group(1)) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid delete command\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    } "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseFindInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern findPattern \u003d Pattern.compile(\"^find\\\\s+(.+)$\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher findMatcher \u003d findPattern.matcher(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (findMatcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new FindCommand(findMatcher.group(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid find command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseTodoInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern todoPattern \u003d Pattern.compile(\"^todo\\\\s+(.+)$\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher todoMatcher \u003d todoPattern.matcher(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (todoMatcher.matches()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Todo newTodo \u003d new Todo(todoMatcher.group(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new AddCommand(newTodo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid todo command\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseEventInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern eventPattern \u003d Pattern.compile(\"^event\\\\s+(.+)\\\\s+/at\\\\s+(\\\\d{4}-\\\\d{2}-\\\\d{2})$\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher eventMatcher \u003d eventPattern.matcher(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (eventMatcher.matches()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            LocalDate dateAt \u003d LocalDate.parse(eventMatcher.group(2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Event newEvent \u003d new Event(eventMatcher.group(1), dateAt);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new AddCommand(newEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid event command\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static Command parseDeadlineInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Pattern deadlinePattern \u003d Pattern.compile(\"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(\\\\d{4}-\\\\d{2}-\\\\d{2})$\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Matcher deadlineMatcher \u003d deadlinePattern.matcher(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (deadlineMatcher.matches()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            LocalDate dateBy \u003d LocalDate.parse(deadlineMatcher.group(2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(deadlineMatcher.group(1), dateBy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new AddCommand(newDeadline);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new DukeException(\"Oops, invalid deadline command\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 115
    }
  },
  {
    "path": "src/test/java/com/duke/bot/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.Command.ExecuteResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void execute_emptyTaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String TODO_TITLE \u003d \"Complete Level 9\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final Todo TODO \u003d new Todo(TODO_TITLE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final TaskList EMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final TaskList EXPECTED_TASK_LIST \u003d new TaskList(List.of(TODO));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e EXPECTED_MESSAGES \u003d List.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"  [T][\\u2717] \" + TODO_TITLE, // \\u2717 \u003d cross"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"Now you have 1 tasks in the list.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(TODO);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ExecuteResult result \u003d addCommand.execute(EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(EXPECTED_TASK_LIST.getUnderlyingList(), result.getTasks().getUnderlyingList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(EXPECTED_MESSAGES, result.getMessages());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 30
    }
  },
  {
    "path": "src/test/java/com/duke/bot/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.duke.bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.command.Command.ExecuteResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.duke.bot.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void execute_indexOutOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int DONE_INDEX \u003d 500;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final TaskList EMPTY_TASK_LIST \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(DONE_INDEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e doneCommand.execute(EMPTY_TASK_LIST));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void execute_normal_workCorrectly() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int DONE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String TODO_TITLE \u003d \"Complete Level 9\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final Todo TODO \u003d new Todo(TODO_TITLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final TaskList TASK_LIST \u003d new TaskList(List.of(TODO));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final TaskList EXPECTED_TASK_LIST \u003d new TaskList(List.of(TODO.setDone(true)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e EXPECTED_MESSAGES \u003d List.of("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \"  [T][\\u2713] \" + TODO_TITLE // \\u2713 \u003d tick"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(DONE_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        ExecuteResult result \u003d doneCommand.execute(TASK_LIST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(EXPECTED_TASK_LIST.getUnderlyingList(), result.getTasks().getUnderlyingList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(EXPECTED_MESSAGES, result.getMessages());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 42
    }
  }
]
