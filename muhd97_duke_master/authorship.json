[
  {
    "path": ".gitignore",
    "fileType": "gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "bin/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "desktop.ini"
      }
    ],
    "authorContributionMap": {
      "muhd97": 1,
      "-": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 29,
      "-": 18
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "D/true/return book/by 2020-02-02 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "T/true/read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "E/false/project meeting/at 2020-02-05 2-4pm"
      }
    ],
    "authorContributionMap": {
      "muhd97": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents a Deadline task which has a description, a deadline date and a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new Deadline instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param date Date when the task is due."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param time Time when the task is due."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Deadline(String description, LocalDate date, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the Task\u0027s toString method"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and it contains the mark, the description, as well as"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * the due date and time of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String that represents the deadline\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 37
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The Duke class is the main class,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * where the command processing happens."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static Ui uI \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Construct a new Duke instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    PrintStream helper;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    Boolean hasStart \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected String getResponse(String input) throws DukeException, DateTimeParseException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // Create a stream to hold the output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // IMPORTANT: Save the old System.out!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        // Tell Java to use your special stream"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        tasks \u003d storage.loadFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (!hasStart) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            uI.greet();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            hasStart \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            uI.printBye();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            run(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return baos.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Parses the input entered by the client."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * The following are valid commands that Duke can process:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * list - lists all the tasks that are stored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * done [index] - marks the task of a particular index as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * delete [index] - deletes the task of a particular index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * todo [description] - adds the Todo task to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * deadline [description] /by [date] [time] - adds the Deadline task to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * event [description] /at [date] [time] - adds the Event task to the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * If an exit command is entered, it is processed,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * then the goodbye message is printed and the program exits from the loop."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeException If the command is invalid or the task enquired doesn\u0027t exists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DateTimeParseException If the date of the deadline or event is not formatted properly."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static void run(String input) throws DukeException, DateTimeParseException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String command \u003d input;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            uI.displayTasks(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            uI.displayFoundTasks(taskList.findTask(parser.trimCommand(\"find\", command)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            switch (parser.checkCommand(command)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks \u003d taskList.markAsDone(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks \u003d taskList.deleteTask(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks \u003d taskList.addTask(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        storage.saveFile(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 92,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The DukeException class extends the Exception class and"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * it handles the input error by the client, such as invalid"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * command, as well as non-existent task enquired"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * by the client."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new DukeException instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param message User-friendly error message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the toString method to show the error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 27
    }
  },
  {
    "path": "src/main/java/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The DukeInvalidCommandException class extends the DukeException"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * class and it handles the invalid command format entered by the client."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new DukeInvalidCommandException instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param message User-friendly error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the toString method to show the error message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 26
    }
  },
  {
    "path": "src/main/java/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The DukeInvalidTaskException class extends the DukeException"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * class and it handles the non-existent task enquired by the client."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new DukeInvalidTaskException instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param message User-friendly error message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public DukeInvalidTaskException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the toString method to show the error message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 26
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents an Event task which has a description, a date and a time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new Event instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param date Date when the task is due."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param time Time when the task is due."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Event(String description, LocalDate date, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the Task\u0027s toString method"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and it contains the mark, the description, as well as"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * the due date and time of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String that represents the event\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 37
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 10
    }
  },
  {
    "path": "src/main/java/META-INF/MANIFEST.MF",
    "fileType": "MF",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Manifest-Version: 1.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Main-Class: Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 3
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void handleUserInput() throws IOException, DukeException, DateTimeParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 53
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Parser class describes the behaviour of a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * parser that parses commands entered by the client."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a Parser instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Verifies whether the string entered"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * is a valid command. It will throw an exception if"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * the command is not valid (i.e. if the argument has no description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * or the format of the command is not proper)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param command The command string entered by the client."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String, regarding the type of the command entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidCommandException If the command is not valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String checkCommand(String command) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (command.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            String wrongCmd \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            if (wrongCmd.equals(\"todo\") || wrongCmd.equals(\"deadline\") || wrongCmd.equals(\"event\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                throw new DukeInvalidCommandException(\"☹ OOPS!!! The description of a \" + wrongCmd"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        + \" cannot be \" + \"empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                throw new DukeInvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return command.split(\" \")[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Removes redundant blank spaces before and/or after a string command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param command The command string entered by the client."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String, regarding the command entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String trimCommand(String excepted, String command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return command.replace(excepted, \"\").trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhd97": 53
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Storage class abstracts the I/O method of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * reading and writing tasks from a file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private static List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a Storage instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Loads the tasks from the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The List of all the tasks loaded from the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws IOException If an I/O error occurred."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Path path \u003d Paths.get(System.getProperty(\"user.dir\"), \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        File file \u003d new File(path.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            String[] task \u003d sc.nextLine().split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            switch (task[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                Task toDo \u003d new ToDo(task[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                if (task[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    toDo.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks.add(toDo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                Task deadLine \u003d new Deadline(task[2],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        LocalDate.parse(task[3].substring(3, 13)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        task[3].substring(14));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                if (task[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    deadLine.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks.add(deadLine);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                Task event \u003d new Event(task[2],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        LocalDate.parse(task[3].substring(3, 13)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        task[3].substring(14));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                if (task[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    event.markAsDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Saves the List of tasks to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws IOException If an I/O error occurred."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void saveFile(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Path path \u003d Paths.get(System.getProperty(\"user.dir\"), \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        File file \u003d new File(path.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                writer.write(\"T/\" + task.isDone + \"/\" + task.description + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                writer.write(\"D/\" + task.isDone + \"/\" + task.description + \"/by \" + ((Deadline) task).date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        + \" \" + ((Deadline) task).time + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                writer.write(\"E/\" + task.isDone + \"/\" + task.description + \"/at \" + ((Event) task).date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                        + \" \" + ((Event) task).time + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 103
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The Task class defines some basic properties"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * and behaviors that every task have. The tasks are set to be not done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * initially."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a Task instance with isDone variable set to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param description The description or the details of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Gets the appropriate icon of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * the task based on whether the task is done or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The appropriate icon. A / if the task is done, an X, otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return (isDone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                ? \"/\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Marks the task to be done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * by setting the isDone property of a task to be true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the Object\u0027s toString method"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and it contains the mark and the description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String that represents the deadline\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 53
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * TaskList class defines the task management behaviors."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a TaskList instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param tasks The List of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void print(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void printLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"____________________________________________________\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Deletes the task from the tasks list,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * then return the updated list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param command The string containing the index of the task in the list to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The updated task list after the task deletion."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidTaskException If the task doesn\u0027t exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public List\u003cTask\u003e deleteTask(String command) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        int i \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (i \u003e\u003d tasks.size() || i \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidTaskException(\"There is no such task in the list!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"  \" + tasks.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            tasks.remove(tasks.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Finds the tasks in the tasks list matching the entered keyword,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * then return the list containing those tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param keyword The string containing the description of the task in the list to be found."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The list of tasks with the matching keyword description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidTaskException If the task doesn\u0027t exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public List\u003cTask\u003e findTask(String keyword) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        List\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (temp.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidTaskException(\"There are no matching tasks in your list\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Adds the task with the corresponding type,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and the description provided by the client."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param command The string containing the description of the task to be added in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The updated task list after the addition of the given task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DateTimeParseException      If the date provided in the task description is in an invalid format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidCommandException If the description of the command entered is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public List\u003cTask\u003e addTask(String command) throws DateTimeParseException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String taskType \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        command \u003d command.substring(command.indexOf(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            task \u003d new ToDo(command.trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            task \u003d new Event(command.split(\"/at \")[0].trim(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    LocalDate.parse(command.split(\"/at \")[1].trim().split(\" \")[0]),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    command.split(\"/at \")[1].split(\" \")[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            task \u003d new Deadline(command.split(\"/by \")[0].trim(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    LocalDate.parse(command.split(\"/by \")[1].trim().split(\" \")[0]),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                    command.split(\"/by \")[1].split(\" \")[1].trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"  \" + task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Marks the task as done in the tasks list,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * then return the updated list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param command The string containing the index of the task in the list to be marked as done."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The updated task list after marking the task as done."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidTaskException If the task doesn\u0027t exist in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public List\u003cTask\u003e markAsDone(String command) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        int i \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (i \u003e\u003d tasks.size() || i \u003c 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidTaskException(\"There is no such task in the list!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            tasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(tasks.get(i).toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 132
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Represents a ToDo task which has a description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a new ToDo instance."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Overrides the Task\u0027s toString method"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * and it contains the mark and the description of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * todo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @return The String that represents the todo\u0027s details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 26
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Handles the (command line) user interface provided to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * The Ui class provides utility methods to show various message types."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * Messages will be displayed in standard output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Constructs a Ui instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints the string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param s The string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void print(String s) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    private void printLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"____________________________________________________\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Displays a greeting, separated by horizontal header lines."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"What can I do for you?\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints all the tasks stored in the given list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param tasks The list containing all the tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidTaskException If the list of tasks is empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void displayTasks(List\u003cTask\u003e tasks) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                print(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidTaskException(\"There are no remaining tasks in the list\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints the list of all the tasks matching a string keyword."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param tasks The list containing all the tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @throws DukeInvalidTaskException If the task is not found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void displayFoundTasks(List\u003cTask\u003e tasks) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            print(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                print(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            throw new DukeInvalidTaskException(\"There are no matching tasks in your list\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * @param e The error that is being raised."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void printError(Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.err.println(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Please try again.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Prints the invalid date format error message."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void printInvalidDateFormatError() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.err.println(\"Please enter the date as yyyy-mm-dd followed by the time e.g. 2020-01-01 2359\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Try again.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Displays the goodbye message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * followed by a horizontal line."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 111
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "muhd97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "muhd97": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": " * DukeTest class is a test class for Duke class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Tests the deadline\u0027s toString method for the valid format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-02-02\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Task deadLine \u003d new Deadline(\"return book\", date, \"1800\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String expectedFormat \u003d \"[D][X] return book (by: Feb 2 2020 1800)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedFormat, deadLine.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Tests the todo\u0027s toString method for the valid format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Task toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String expectedFormat \u003d \"[T][X] read book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedFormat, toDo.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     * Tests the event\u0027s toString method for the valid format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhd97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-02-05\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        Task event \u003d new Event(\"project meeting\", date, \"2-4pm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        String expectedFormat \u003d \"[E][X] project meeting (at: Feb 5 2020 2-4pm)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhd97"
        },
        "content": "        assertEquals(expectedFormat, event.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhd97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhd97": 45
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "  [T][✘] borrow book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Now you have 1 task(s) in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "1.[T][✘] borrow book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "  [D][✘] return book (by Sunday)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Now you have 2 task(s) in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "  [E][✘] project meeting (at Mon 2-4pm)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Now you have 3 task(s) in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhd97"
        },
        "content": "Program terminated."
      }
    ],
    "authorContributionMap": {
      "muhd97": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "muhd97": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhd97"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhd97"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhd97"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM added stuff to compile all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhd97"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhd97"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhd97"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhd97"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhd97"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhd97"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhd97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhd97"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhd97"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "muhd97": 27
    }
  }
]
