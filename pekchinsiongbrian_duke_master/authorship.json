[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    mainClassName \u003d \"duke.main.Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 37,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Custom exception to be thrown when there is an error parsing user input, or if task list fails to load or save."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 10
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027bye\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027bye\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of goodbye message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, true is returned."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 12
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027deadline\u0027."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String[] deadlineDesc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeadlineCommand(String[] deadlineDesc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.deadlineDesc \u003d deadlineDesc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027deadline\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after a deadline is added to the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Deadline newDeadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (deadlineDesc.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            newDeadline \u003d new Deadline(deadlineDesc[0], LocalDate.parse(deadlineDesc[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e \u003cHH:mm\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            newDeadline \u003d new Deadline(deadlineDesc[0], LocalDate.parse(deadlineDesc[1]),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalTime.parse(deadlineDesc[2]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        tasks.addToTaskList(newDeadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showSuccessMessage(newDeadline.toString(), tasks.getTaskList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027delete\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027delete\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after task is deleted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Task toDelete \u003d tasks.getTaskList().get(deleteIndex - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        tasks.deleteFromTaskList(deleteIndex - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showDelete(toDelete.toString(), tasks.getTaskList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027done\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027done\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after task is marked as done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Task doneTask \u003d tasks.getTaskList().get(doneIndex - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        doneTask.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showDone(doneTask.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 45
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027event\u0027."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String[] eventDesc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EventCommand(String[] eventDesc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.eventDesc \u003d eventDesc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027event\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after an event is added to the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Event newEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (eventDesc.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            newEvent \u003d new Event(eventDesc[0], LocalDate.parse(eventDesc[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (eventDesc.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            newEvent \u003d new Event(eventDesc[0], LocalDate.parse(eventDesc[1]),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalTime.parse(eventDesc[2]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e to \u003cend HH:mm\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            newEvent \u003d new Event(eventDesc[0], LocalDate.parse(eventDesc[1]),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalTime.parse(eventDesc[2]), LocalTime.parse(eventDesc[3]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        tasks.addToTaskList(newEvent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showSuccessMessage(newEvent.toString(), tasks.getTaskList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 59
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isTimerOn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FindCommand(String keywords, boolean isTimerOn) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isTimerOn \u003d isTimerOn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027find\u0027 command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of a list consisting of tasks that contain the keyword(s)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (tasks.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // List is empty"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return ui.showEmptyListMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // List is NOT empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cTask\u003e listOfMatchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (task.toString().toLowerCase().contains(keywords.toLowerCase())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    listOfMatchingTasks.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (isTimerOn) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return ui.showFindListTimerOn(listOfMatchingTasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return ui.showFindListTimerOff(listOfMatchingTasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 57
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027/help\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027help\u0027 command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of list of commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showHelp();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027list\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String listCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isTimerOn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ListCommand(String listCommand, boolean isTimerOn) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.listCommand \u003d listCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isTimerOn \u003d isTimerOn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027list\u0027 command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (tasks.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // List is empty"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!listCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Change display timer settings if necessary"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                isTimerOn \u003d listCommand.equals(\"/showtimer\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return ui.showEmptyListMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // List is NOT empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (listCommand.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // No arguments given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (isTimerOn) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return ui.showListTimerOn(tasks.getTaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return ui.showListTimerOff(tasks.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Arguments given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (listCommand.equals(\"/showtimer\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    isTimerOn \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return ui.showListTimerOn(tasks.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    isTimerOn \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return ui.showListTimerOff(tasks.getTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isTimerOn() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return isTimerOn;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 71
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.main.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Command that is executed when user inputs \u0027to-do\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    String todoDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public TodoCommand(String todoDesc) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.todoDesc \u003d todoDesc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Executes the \u0027to-do\u0027 command and saves latest version of the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param tasks Task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ui Current user interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param storage Current storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after a task is added to the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list fails to save"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Todo newTodo \u003d new Todo(todoDesc);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        tasks.addToTaskList(newTodo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ui.showSuccessMessage(newTodo.toString(), tasks.getTaskList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Updates main function if it should exit the programme or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return True if \u0027bye\u0027 command is called, false otherwise. In this case, false is returned."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 45
    }
  },
  {
    "path": "src/main/java/duke/main/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private enum Sender {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        USER,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DUKE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DialogBox(Label l, ImageView iv, Sender sender) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        text.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        text.setMaxWidth(300);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        displayPicture.setFitHeight(100);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        displayPicture.setFitWidth(100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Circle circleClip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        displayPicture.setClip(circleClip);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.setSpacing(10);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (sender.equals(Sender.DUKE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.setStyle(\"-fx-background-color:POWDERBLUE\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.setStyle(\"-fx-background-color:PINK\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.setPadding(new Insets(0, 10, 0, 10));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static DialogBox getUserDialog(String l, Image iv) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Label label \u003d new Label(l);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        label.setPadding(new Insets(0, 15, 0, 0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        var db \u003d new DialogBox(label, new ImageView(iv), Sender.USER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static DialogBox getDukeDialog(String l, Image iv) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Label label \u003d new Label(l);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        label.setPadding(new Insets(0, 0, 0, 15));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        label.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new DialogBox(label, new ImageView(iv), Sender.DUKE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 70
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Main class of the duke programme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Duke {//extends Application {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isTimerOn \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Loads existing task list by searching in filePath. If this path does not exist, programme will create a new file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * in this path where tasks will be automatically saved to. Also sets up user interface and command parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param filePath path of existing task list to load or path of new task list to create."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            tasks \u003d new TaskList(storage.load(), parser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String commandType \u003d parser.getCommandType(userInput, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Command command \u003d parser.selectCommand(commandType, userInput, isTimerOn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            response \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (command instanceof ListCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                isTimerOn \u003d ((ListCommand) command).isTimerOn();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            response \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean getExitStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 9
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String FILE_PATH \u003d System.getProperty(\"user.home\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"/Downloads/Y2S2/CS2103T - Software Engineering/duke-master/task-list.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Duke duke \u003d new Duke(FILE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static Stage stg;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stg \u003d stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static void closeWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stg.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 41
    }
  },
  {
    "path": "src/main/java/duke/main/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Steve Jobs.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bill Gates.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        dialogContainer.setSpacing(20);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Creates dialog boxes, one displaying the user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the user inputs the \u0027bye\u0027 command, application will shut down after 2.5 seconds."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(2.5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (duke.getExitStatus()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            delay.setOnFinished(event -\u003e Main.closeWindow());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 67
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses user commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String EVENT_USE \u003d \"Use:\\n1) event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n2) event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n3) event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e to \u003cend HH:mm\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n\\nNote: Input time in 24h format.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String DEADLINE_USE \u003d \"Use:\\n1) deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n2) deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e \u003cHH:mm\u003e\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n\\nNote: Input time in 24h format.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String TODO_USE \u003d \"Use: todo \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String DONE_USE \u003d \"Use:\\ndone \u003cindex of item to mark as done\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String DELETE_USE \u003d \"Use:\\ndelete \u003cindex of item to delete\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String LIST_USE \u003d \"Use:\\n1) list (displays list with current settings)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n2) list /showtimer (displays list with timer toggled on)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"\\n3) list /hidetimer (displays list with timer toggled off)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String FIND_USE \u003d \"Use:\\nfind \u003ckeyword(s)\u003e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks the validity of the user input and returns the command type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Type of command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If user input (command and/or arguments) is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String getCommandType(String userInput, TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] userInputSplit \u003d userInput.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String firstWord \u003d userInputSplit[0].toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"/HELP\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003e 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"\u0027/help\u0027 command has no arguments!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(TODO_USE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(DEADLINE_USE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (!userInput.toLowerCase().contains(\"/by\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Please use the \u0027/by\u0027 keyword to specify a deadline.\\n\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + DEADLINE_USE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (userInputSplit[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Please enter a task.\\n\\n\" + DEADLINE_USE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (Arrays.asList(userInputSplit).indexOf(\"/by\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    \u003d\u003d Arrays.asList(userInputSplit).size() - 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Please enter a deadline for the task.\\n\\n\" + DEADLINE_USE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (Arrays.asList(userInputSplit).indexOf(\"/by\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    !\u003d Arrays.asList(userInputSplit).lastIndexOf(\"/by\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Only one \u0027/by\u0027 keyword can be used!\\n\\n\" + DEADLINE_USE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(EVENT_USE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (!userInput.toLowerCase().contains(\"/at\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Please use the \u0027/at\u0027 keyword to specify the event date/time.\\n\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + EVENT_USE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (userInputSplit[1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"The description of an event cannot be empty.\\n\\n\" + EVENT_USE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (Arrays.asList(userInputSplit).indexOf(\"/at\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    \u003d\u003d Arrays.asList(userInputSplit).size() - 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Please enter the event date/time.\\n\\n\" + EVENT_USE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (Arrays.asList(userInputSplit).indexOf(\"/at\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    !\u003d Arrays.asList(userInputSplit).lastIndexOf(\"/at\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Only one \u0027/at\u0027 keyword can be used!\\n\\n\" + EVENT_USE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DONE\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Enter index of item to mark it as done. \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \"Type \u0027list\u0027 to see all items.\\n\\n\" + DONE_USE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (Integer.parseInt(userInputSplit[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        throw new DukeException(\"Argument must be a positive integer.\\n\\n\" + DONE_USE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else if (Integer.parseInt(userInputSplit[1]) \u003e list.getTaskList().size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        throw new DukeException(\"Argument exceeds number of items on the list!\\n\\n\" + DONE_USE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        return firstWord;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new DukeException(\"Argument must be a positive integer.\\n\\n\" + DONE_USE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DELETE\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Enter index of item to delete it. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \"Type \u0027list\u0027 to see all items.\\n\\n\" + DELETE_USE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (Integer.parseInt(userInputSplit[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        throw new DukeException(\"Argument must be a positive integer.\\n\\n\" + DELETE_USE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else if (Integer.parseInt(userInputSplit[1]) \u003e list.getTaskList().size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        throw new DukeException(\"Argument exceeds number of items on the list!\\n\\n\" + DELETE_USE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        return firstWord;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new DukeException(\"Argument must be a positive integer.\\n\\n\" + DELETE_USE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"LIST\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003e 2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(LIST_USE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (userInputSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!userInputSplit[1].equals(\"/showtimer\") \u0026\u0026 !userInputSplit[1].equals(\"/hidetimer\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new DukeException(LIST_USE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return firstWord;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"BYE\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003e 1) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"\u0027bye\u0027 command has no arguments!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"FIND\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(\"Enter a keyword to search!\\n\" + FIND_USE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return firstWord;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Invalid command!\\nFor list of commands, type: /help\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Selects the command to execute based on the command type that is input."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param commandType Type of command"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param isTimerOn Whether the user has set timer on or timer off"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If command is invalid"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Command selectCommand(String commandType, String userInput, boolean isTimerOn) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"/HELP\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseTodoCommand(userInput);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseDeadlineCommand(userInput);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseEventCommand(userInput);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DONE\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseDoneCommand(userInput);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"DELETE\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseDeleteCommand(userInput);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"LIST\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseListCommand(userInput, isTimerOn);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"BYE\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case \"FIND\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parseFindCommand(userInput, isTimerOn);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Invalid command!\\nFor list of commands, type: /help\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a to-do command if user input is valid."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return TodoCommand"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public TodoCommand parseTodoCommand(String userInput) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new TodoCommand(userInput.substring(5));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a deadline command if user input is valid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return DeadlineCommand"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If user input is invalid"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeadlineCommand parseDeadlineCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String desc \u003d userInput.substring(9, userInput.toLowerCase().indexOf(\"/by\") - 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String by \u003d userInput.substring(userInput.indexOf(\"/by\") + 4);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] byComponents \u003d by.split(\" \");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (byComponents.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalDate.parse(byComponents[0]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return new DeadlineCommand(new String[]{desc, byComponents[0]});"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (byComponents.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e \u003cHH:mm\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalDate.parse(byComponents[0]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalTime.parse(byComponents[1]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return new DeadlineCommand(new String[]{desc, byComponents[0], byComponents[1]});"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(DEADLINE_USE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Error reading date and/or time.\\n\\n\" + DEADLINE_USE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns an event command if user input is valid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return EventCommand"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If user input is invalid"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EventCommand parseEventCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String desc \u003d userInput.substring(6, userInput.toLowerCase().indexOf(\"/at\") - 1);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String at \u003d userInput.substring(userInput.indexOf(\"/at\") + 4);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String[] atComponents \u003d at.split(\" \");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (atComponents.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalDate.parse(atComponents[0]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return new EventCommand(new String[]{desc, atComponents[0]});"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (atComponents.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalDate.parse(atComponents[0]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                LocalTime.parse(atComponents[1]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return new EventCommand(new String[]{desc, atComponents[0], atComponents[1]});"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (atComponents.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e to \u003cend HH:mm\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!atComponents[2].toLowerCase().equals(\"to\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    // Check if the \u0027to\u0027 keyword is used"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new DukeException(EVENT_USE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalDate.parse(atComponents[0]);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalTime.parse(atComponents[1]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    LocalTime.parse(atComponents[3]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return new EventCommand(new String[]{desc, atComponents[0], atComponents[1], atComponents[3]});"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new DukeException(EVENT_USE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Error reading date and/or time.\\n\\n\" + EVENT_USE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a list command if user input is valid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param isTimerOn Whether the user has set timer on or timer off"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return ListCommand"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ListCommand parseListCommand(String userInput, boolean isTimerOn) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] userInputSplit \u003d userInput.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new ListCommand(userInputSplit[1], isTimerOn);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new ListCommand(\"\", isTimerOn);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a delete command if user input is valid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteCommand parseDeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] userInputSplit \u003d userInput.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new DeleteCommand(Integer.parseInt(userInputSplit[1]));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a done command if user input is valid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return DoneCommand"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DoneCommand parseDoneCommand(String userInput) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] userInputSplit \u003d userInput.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new DoneCommand(Integer.parseInt(userInputSplit[1]));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses user input and returns a find command if user input is valid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param isTimerOn Whether the user has set timer on or timer off"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return FindCommand"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FindCommand parseFindCommand(String userInput, boolean isTimerOn) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new FindCommand(userInput.substring(5), isTimerOn);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts the input list from strings to task objects."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Array list of task objects"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ArrayList\u003cTask\u003e parseSavedFile(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArrayList\u003cTask\u003e parsedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (list.size() !\u003d 0) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (String s : list) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String taskType \u003d s.substring(1, 2);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String description \u003d s.substring(7);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String status \u003d s.substring(4, 5);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    parsedList.add(new Todo(description));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String by \u003d description.substring(description.indexOf(\"by:\") + 4);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String[] byComponents \u003d by.split(\" \");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String deadlineDateToParse \u003d byComponents[0] + \" \" + byComponents[1] + \" \""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + byComponents[2].substring(0, 4);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (Integer.parseInt(deadlineDateToParse.split(\" \")[0]) \u003c 10) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        deadlineDateToParse \u003d \"0\" + deadlineDateToParse;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (byComponents.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalDate deadlineDate \u003d LocalDate.parse("
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                LocalDate.parse(deadlineDateToParse, formatter).toString());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.add(new Deadline(description.substring(0, description.indexOf(\"(by:\") - 1),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                deadlineDate));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else if (byComponents.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        // Case: deadline \u003ctask\u003e /by \u003cYYYY-MM-DD of deadline\u003e \u003cHH:mm\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalDate deadlineDate \u003d LocalDate.parse("
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                LocalDate.parse(deadlineDateToParse, formatter).toString());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime deadlineTime \u003d LocalTime.parse(byComponents[3].substring(0,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                byComponents[3].indexOf(\")\")));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.add(new Deadline(description.substring(0, description.indexOf(\"(by:\") - 1),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                deadlineDate, deadlineTime));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String at \u003d description.substring(description.indexOf(\"at:\") + 4);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String[] atComponents \u003d at.split(\" \");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String eventDateToParse \u003d atComponents[0] + \" \" + atComponents[1] + \" \""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + atComponents[2].substring(0, 4);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (Integer.parseInt(eventDateToParse.split(\" \")[0]) \u003c 10) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        eventDateToParse \u003d \"0\" + eventDateToParse;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    if (atComponents.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalDate eventDate \u003d LocalDate.parse("
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                LocalDate.parse(eventDateToParse, formatter).toString());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.add(new Event(description.substring(0, description.indexOf(\"(at:\") - 1),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                eventDate));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else if (atComponents.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalDate eventDate \u003d LocalDate.parse("
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                LocalDate.parse(eventDateToParse, formatter).toString());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime eventTime \u003d LocalTime.parse(atComponents[3].substring(0,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                atComponents[3].indexOf(\")\")));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.add(new Event(description.substring(0, description.indexOf(\"(at:\") - 1),"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                eventDate, eventTime));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else if (atComponents.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        // Case: event \u003cdesc\u003e /at \u003cYYYY-MM-DD of event\u003e \u003cstart HH:mm\u003e to \u003cend HH:mm\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalDate eventDate \u003d LocalDate.parse("
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                LocalDate.parse(eventDateToParse, formatter).toString());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime eventTimeStart \u003d LocalTime.parse(atComponents[3]);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime eventTimeEnd \u003d LocalTime.parse(atComponents[5].substring(0,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                atComponents[5].indexOf(\")\")));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        parsedList.add(new Event(description.substring(0, description.indexOf(\"(at:\") - 1),"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                eventDate, eventTimeStart, eventTimeEnd));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        if (status.equals(\"V\")) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            parsedList.get(parsedList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return parsedList;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 449
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Loads the contents of the task list into an array list of strings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Array list of tasks (as strings) loaded from the task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If task list does not exist or failed to load"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArrayList\u003cString\u003e taskListInString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                taskListInString.add(sc.nextLine());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Task list does not exist, has been moved, or failed to load.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return taskListInString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Saves the latest state of the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DukeException If failed to save the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(f);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String toWrite \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                outputStream.write(toWrite.getBytes());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new DukeException(\"Failed to save the list!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 59
    }
  },
  {
    "path": "src/main/java/duke/main/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains the task list. Has operations to add and delete tasks in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e list, Parser parser) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.taskList \u003d parser.parseSavedFile(list);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param t Task to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void addToTaskList(Task t) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.taskList.add(t);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index Index of the item in the task list to be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void deleteFromTaskList(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Gets the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Array list of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 46
    }
  },
  {
    "path": "src/main/java/duke/main/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates welcome message when user first enters app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of welcome message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static String showWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"Hello! I\u0027m Brian-bot :)\\nWhat can I do for you?\\nFor list of commands, type: /help\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates goodbye message after user calls \u0027bye\u0027 to close the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of goodbye message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"Goodbye! See you again soon! :)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates this bare bones manual page when user calls \u0027/help\u0027."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of list of commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showHelp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"You called for help? Help is here!\\nList of commands:\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                + \"\\n\\ntodo, deadline, event, done, delete, list, find, bye\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                + \"\\n\\nEnter any command to see its use\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates this message after a task is marked as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param task Name of task to be marked as done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after task is marked as done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showDone(String task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\\t\" + task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates this message after a task is deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param task Name of task to be deleted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param sizeOfList Size of the task list after deletion"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after task is deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showDelete(String task, int sizeOfList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\\t\" + task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                + \"\\nNow you have \" + sizeOfList + \" tasks in the list.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates this message after a to-do task, deadline, or event is added to the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param task Name of task that was added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param sizeOfList Size of the task list after adding"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of success message after a task is added to the task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showSuccessMessage(String task, int sizeOfList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\\t\" + task + \"\\nNow you have \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                + sizeOfList + \" tasks in the list.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Turns on countdown timer and generates task list for list command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of task list with countdown timer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showListTimerOn(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String toAppend;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (list.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + ((Deadline) list.get(i)).displayDeadline();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else if (list.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + ((Event) list.get(i)).displayEventTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + list.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"\\n\\nTip: Try using \u0027list /showtimer\u0027 or list \u0027/hidetimer\u0027!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Turns off countdown timer and generates task list for list command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of task list without countdown timer"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showListTimerOff(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String toAppend;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + list.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"\\n\\nTip: Try using \u0027list /showtimer\u0027 or list \u0027/hidetimer\u0027!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Turns on countdown timer and generates task list for find command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of a list consisting of tasks that contain the keyword(s) (with countdown timer)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showFindListTimerOn(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(\"\\n\\tNo matches found!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String toAppend;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (list.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + ((Deadline) list.get(i)).displayDeadline();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else if (list.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + ((Event) list.get(i)).displayEventTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + list.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(toAppend);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Turns off countdown timer and generates task list for find command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of a list consisting of tasks that contain the keyword(s) (without countdown timer)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showFindListTimerOff(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(\"\\n\\tNo matches found!\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String toAppend;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                toAppend \u003d \"\\n\\t\" + (i + 1) + \". \" + list.get(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(toAppend);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates this message when task list is empty and user wants to view list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of an empty task list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showEmptyListMessage() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"\\tHere are the tasks in your list:\\n\\n\\tYou have no tasks \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                + \"right now.\\n\\tUse \u0027todo\u0027, \u0027deadline\u0027, or \u0027event\u0027 to add task!\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Generates error message."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param errorMessage Error message to display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return String representation of an error message"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String showError(String errorMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 184
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Task object of type Deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected LocalDate byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected LocalTime byTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructor for Deadline with description and deadline date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param byDate Deadline date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Deadline(String description, LocalDate byDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructor for Deadline with description, deadline date, and deadline time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param byDate Deadline date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param byTime Deadline time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Deadline(String description, LocalDate byDate, LocalTime byTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.byTime \u003d byTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the Deadline object to a default string representation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Default string representation of the Deadline object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (byTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    + \", \" + byTime.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the Deadline object to a special string representation which includes the number of days to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * the deadline (if deadline has not passed), or the number of days since the deadline (if deadline has passed)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Formatted string representation of the Deadline object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String displayDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (byTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \") - \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + LocalDate.now().datesUntil(byDate).count() + \" day(s) to go!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \", \" + byTime.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + LocalDate.now().datesUntil(byDate).count() + \" day(s) to go!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (byTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \") - \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \"it\u0027s \" + byDate.datesUntil(LocalDate.now()).count() + \" day(s) past the deadline!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \", \" + byTime.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \"it\u0027s \" + byDate.datesUntil(LocalDate.now()).count() + \" day(s) past the deadline!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Task object of type Event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected LocalDate atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected LocalTime atTimeStart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected LocalTime atTimeEnd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructor for Event with description and deadline date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atDate Event date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Event(String description, LocalDate atDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructor for Event with description, event date, and event start time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atDate Event date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atTimeStart Event start time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Event(String description, LocalDate atDate, LocalTime atTimeStart) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atTimeStart \u003d atTimeStart;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructor for Event with description, event date, event start time, and event end time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atDate Event date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atTimeStart Event start time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param atTimeEnd Event end time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Event(String description, LocalDate atDate, LocalTime atTimeStart, LocalTime atTimeEnd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atTimeStart \u003d atTimeStart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atTimeEnd \u003d atTimeEnd;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the Event object to a default string representation."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Default string representation of the Event object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (atTimeStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (atTimeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\"))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \" to \" + atTimeEnd.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the Event object to a special string representation which includes the number of days to"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * the event (if event has not passed), or the number of days since the event (if event has passed)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Formatted string representation of the Event object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String displayEventTime() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (atTimeStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \") - \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + LocalDate.now().datesUntil(atDate).count() + \" day(s) to go!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (atTimeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + LocalDate.now().datesUntil(atDate).count() + \" day(s) to go!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \" to \" + atTimeEnd.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + LocalDate.now().datesUntil(atDate).count() + \" day(s) to go!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (atTimeStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \") - \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        + \"it\u0027s \" + atDate.datesUntil(LocalDate.now()).count() + \" day(s) past the event!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (atTimeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \"it\u0027s \" + atDate.datesUntil(LocalDate.now()).count() + \" day(s) past the event!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + atDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \", \" + atTimeStart.format(DateTimeFormatter.ofPattern(\"HH:mm\"))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \" to \" + atTimeEnd.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \") - \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            + \"it\u0027s \" + atDate.datesUntil(LocalDate.now()).count() + \" day(s) past the event!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parent Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Gets the status icon."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Tick (V) if done, cross (X) if not done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return (isDone ? \"V\" : \"X\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Marks a task as done by changing its isDone status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Gets the status of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Status of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the Task object to a default string representation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Default string representation of a Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Task object of type To-do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stringifies the To-do object to a default string representation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @return Default string representation of the To-do object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 19
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestDeadlineWithoutTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[D][X] Read book (by: 1 Feb 2020)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Deadline(\"Read book\", LocalDate.parse(\"2020-02-01\")).toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestDeadlineWithTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[D][X] Finish homework (by: 2 Feb 2020, 18:00)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Deadline(\"Finish homework\", LocalDate.parse(\"2020-02-02\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime.parse(\"18:00\")).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 24
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestEventWithoutTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[E][X] Read book (at: 1 Feb 2020)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Event(\"Read book\", LocalDate.parse(\"2020-02-01\")).toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestEventWithStartTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[E][X] Finish homework (at: 2 Feb 2020, 18:00)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Event(\"Finish homework\", LocalDate.parse(\"2020-02-02\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime.parse(\"18:00\")).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestEventWithStartAndEndTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[E][X] Finish homework (at: 2 Feb 2020, 18:00 to 19:00)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Event(\"Finish homework\", LocalDate.parse(\"2020-02-02\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        LocalTime.parse(\"18:00\"), LocalTime.parse(\"19:00\")).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 30
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestDeadlineDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[D][V] Read book (by: 1 Feb 2020)\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                testMarkAsDone(new Deadline(\"Read book\", LocalDate.parse(\"2020-02-01\"))).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestEventDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[E][V] Read book (at: 1 Feb 2020)\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                testMarkAsDone(new Event(\"Read book\", LocalDate.parse(\"2020-02-01\"))).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestTodoDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[T][V] Play computer\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                testMarkAsDone(new Todo(\"Play computer\")).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Task testMarkAsDone(Task t) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 32
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setTestTodo() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(\"[T][X] Play computer\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new Todo(\"Play computer\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tHello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t\t[T][✘] read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t\t[D][✘] homework (by: Sunday, 26 Jan 2020)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t\t[E][✘] CNY gathering (at: Monday, 12pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t1.[T][✘] read book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t2.[D][✘] homework (by: Sunday, 26 Jan 2020)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t3.[E][✘] CNY gathering (at: Monday, 12pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t  [D][✓] homework (by: Sunday, 26 Jan 2020)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t  [E][✓] CNY gathering (at: Monday, 12pm)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t1.[T][✘] read book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t2.[D][✓] homework (by: Sunday, 26 Jan 2020)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t3.[E][✓] CNY gathering (at: Monday, 12pm)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 50
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "deadline homework /by Sunday, 26 Jan 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "event CNY gathering /at Monday, 12pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 21
    }
  }
]
