[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 19,
      "-": 22
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "#Tue Jan 28 13:43:52 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.5.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "alushingg": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the Duke for the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The Duke will run the program that interact with user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Duke with Storage, TaskList and Ui being initialised."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param filePath The file path to store data of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Starts the program running."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                ui.showLine(); // show the divider line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 53,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Thrown when any error occurs in Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a DukeException with the specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param errorMessage The specified detail error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Parser in Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The Parser makes sense of user commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Parses the user command and returns the appropriate Command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param fullCommand The user command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The appropriate Command object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the command is invalid or in wrong format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String[] temp \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String cmd \u003d temp[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Command command \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createDeleteCommand(temp);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createDoneCommand(temp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createAddCommand(temp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createAddCommand(temp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createAddCommand(temp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                command \u003d createFindCommand(temp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the Command object of DeleteCommand type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param temp The array containing command and description of the command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The Command object of DeleteCommand type."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the command has missing information or in wrong format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static Command createDeleteCommand(String[] temp) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (temp[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of delete cannot be empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String body \u003d temp[1].trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(body) - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of delete cannot be empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of delete have to be a number.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the Command object of DoneCommand type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param temp The array containing command and description of the command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The Command object of DoneCommand type."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the command has missing information or in wrong format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static Command createDoneCommand(String[] temp) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (temp[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of done cannot be empty.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String body \u003d temp[1].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new DoneCommand(Integer.parseInt(body) - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of done cannot be empty.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of done have to be a number\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the Command object of AddCommand type."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param temp The array containing command and description of the command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The Command object of AddCommand type."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the command has missing information or in wrong format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static Command createAddCommand(String[] temp) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String body \u003d temp[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (body.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new AddCommand(temp[0], temp[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the Command object of FindCommand type."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param temp The array containing command and description of the command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The Command object of FindCommand type."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the command has missing information or in wrong format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static Command createFindCommand(String[] temp) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String body \u003d temp[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (body.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new FindCommand(body);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 139
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the Storage that deals with loading tasks from the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * It also deals with saving tasks in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Storage with the specified file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param filePath The file path to store data of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Loads the tasks from the file and returns the list of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The list of tasks loaded from the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If an error occur in creating a file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                String[] task \u003d s.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                Task temp \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                switch (task[0]) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    temp \u003d new ToDo(task[2]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    temp \u003d new Deadline(task[2], task[3]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    temp \u003d new Event(task[2], task[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    temp.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                list.add(temp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            createNewFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Creates a file to store the data of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If an error occur in creating the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private void createNewFile() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Path parent \u003d path.getParent();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Files.createDirectories(parent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Could not create file for data.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Saves tasks in the file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList which contains tasks to be saved in the file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If fail to save tasks in the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void saveTasksToStorage(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/duke.txt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                fw.write(task.toSaveName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Fail to save tasks to storage.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 108
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a TaskList that contains a list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a TaskList with given list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The given list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a TaskList with the list of tasks being initialised."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Adds a task to the end of the list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param task The task to be added to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Removes the task at the specified position in the list of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param index The specified position of the task to be removed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The task that was removed from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the index is out of range."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Task removeTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return tasks.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index is out of bounds.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the task at the specified position in the list of tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param index The specified position of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The task at the specified position in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the index is out of range."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Task getTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index is out of bounds.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The number of tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the list of tasks which match the keyword."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param keyword The keyword to match."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The list of tasks which match the keyword."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyword) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ArrayList\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                filtered.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 102
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the Ui that deals with interactions with user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Ui with Scanner being initialised."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     What can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param msg The error message to be shown to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showError(String msg) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     \" + msg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Prints the error message if failure to load tasks from storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     OOPS!!! Fail to load data.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Reads the user input command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The user input command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Prints a horizontal dotted line."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"    ----------------------------------------------------------\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Print the messages that is properly formatted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param messages The array of messages to be formatted and printed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showMessages(String[] messages) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (String s : messages) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            System.out.println(\"     \" + s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Print the list of tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            System.out.println(\"     \" + (i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Print the list of matching tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The list of matching tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void showMatchingList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        System.out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            System.out.println(\"     \" + (i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 115
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a add command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with adding tasks to the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs an AddCommand with specified type of task and its description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param type The type of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public AddCommand(String type, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Adds the task to the list of tasks and print the relevant messages."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If description of the task is missing or in wrong format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String[] taskDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String[] messages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            messages \u003d new String[] {\"Got it. I\u0027ve added this task:\", \" \" + task.toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                        \"Now you have \" + tasks.getSize() + \" tasks in the list.\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            ui.showMessages(messages);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            taskDate \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (taskDate.length \u003d\u003d 1 || taskDate[0].trim().equals(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    || taskDate[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description or by of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            task \u003d new Deadline(taskDate[0], taskDate[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            messages \u003d new String[] {\"Got it. I\u0027ve added this task:\", \" \" + task.toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                        \"Now you have \" + tasks.getSize() + \" tasks in the list.\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            ui.showMessages(messages);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            taskDate \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (taskDate.length \u003d\u003d 1 || taskDate[0].trim().equals(\"\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    || taskDate[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description or at of an event cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            task \u003d new Event(taskDate[0], taskDate[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            messages \u003d new String[] {\"Got it. I\u0027ve added this task:\", \" \" + task.toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                        \"Now you have \" + tasks.getSize() + \" tasks in the list.\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            ui.showMessages(messages);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 81
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a command that is to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Command with the isExit being initialised as false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *Returns true if the command is exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return True if the command is exit command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If description of the task is missing or in wrong format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with removing tasks from the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a DeleteCommand with specified index of a task in the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param index The specified index of the task in the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Removes the task from the list of tasks and print relevant messages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If index of out of range of the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Task task \u003d tasks.removeTask(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String[] messages \u003d new String[] {\"Noted. I\u0027ve removed this task:\", \" \" + task.toString(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                          \"Now you have \" + tasks.getSize() + \" tasks in the list.\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showMessages(messages);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a done command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with marking tasks as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a DoneCommand with specified index of a task in the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param index The specified index of the task in the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Marks a task as done and print relevant messages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If index is out of range of the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String[] messages \u003d new String[] {\"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                          \" \" + task.toString()};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showMessages(messages);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with saving the resulting list of tasks to storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs an ExitCommand with isExit initialised as true."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Saves the resulting list of tasks in file and print relevant messages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            storage.saveTasksToStorage(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 38
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a find command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with filtering the list of tasks to match keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a FindCommand with specified keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param keyword The specified keyword."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Filter the list of tasks that match keyword and print relevant messages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ArrayList\u003cTask\u003e matchingList \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showMatchingList(matchingList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The command deals with listing the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Print the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param tasks The TaskList that contains list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param ui The Ui that deals with interactions with user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param storage The Storage deals with loading and saving tasks in file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ui.showList(tasks.getTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected LocalTime byTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Deadline with the specified description and date and/or time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param description The specified description of the deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param by The specified date and/or time of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the date or time are wrongly formatted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String[] temp \u003d by.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            this.by \u003d LocalDate.parse(temp[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (temp.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                this.byTime \u003d LocalTime.parse(temp[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                this.byTime \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the deadline that will be saved in storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the deadline that will be saved in storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toSaveName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"D\" + super.toSaveName() + \" | \" + this.by"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + (byTime !\u003d null ? \" \" + byTime : \"\") + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the deadline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[MMM d yyyy][h:mma]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +  by.format(formatter)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + (byTime !\u003d null ? \" \" + byTime.format(formatter) : \"\") + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected LocalTime atTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs an Event with the specified description and date and/or time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param description The specified description of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param at The specified date and/or time of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws DukeException If the date or time are wrongly formatted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            String[] temp \u003d at.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            this.at \u003d LocalDate.parse(temp[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (temp.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                this.atTime \u003d LocalTime.parse(temp[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                this.atTime \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new DukeException(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the event that will be saved in storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the event that will be saved in storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toSaveName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"E\" + super.toSaveName() + \" | \" + this.at"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + (atTime !\u003d null ? \" \" + atTime : \"\") + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[MMM d yyyy][h:mma]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +  at.format(formatter)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + (atTime !\u003d null ? \" \" + atTime.format(formatter) : \"\") + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a Task with the specified description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param description The specified description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the status icon that determine if a task is done (Y or N)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return Y if the task is done or N if the task is not done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return (isDone ? \"Y\" : \"N\"); //return Y or N symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the task that will be saved in storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the task that will be saved in storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toSaveName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return \" | 1 | \" + this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return \" | 0 | \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alushingg": 70
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a ToDo with the specified description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param description The specified description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the todo that will be saved in storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the todo that will be saved in storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toSaveName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"T\" + super.toSaveName() + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns a string representation of the todo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return The string representation of the todo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 36
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void parse_wrongCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //wrong delete command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! The description of delete cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"delete abc\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! The description of delete have to be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //wrong done command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"done  \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! The description of done cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"done abc\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! The description of done have to be a number\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //wrong add command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"todo \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //invalid command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Parser.parse(\"help\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 58
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testGetTasks() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), new TaskList().getTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.addTask(new ToDo(\"read book\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(1, tasks.getSize());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.addTask(new ToDo(\"join CCA\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(2, tasks.getSize());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void removeTask_validIndex_success() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.addTask(new ToDo(\"read book\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.removeTask(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void removeTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.removeTask(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Index is out of bounds.\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void getTask_validIndex_success() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.addTask(new ToDo(\"read book\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Task task \u003d tasks.getTask(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(\"[T][N] read book\", task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void getTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.getTask(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Index is out of bounds.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testFind() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.add(new ToDo(\"read book\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.add(new ToDo(\"join CCA\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        tasks.add(new ToDo(\"borrow book\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        TaskList tasklist \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(2, tasklist.find(\"book\").size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(1, tasklist.find(\"join\").size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(0, tasklist.find(\"sports\").size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 79
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            tasks.addTask(new ToDo(\"read book\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Command cmd \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            cmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"Y\", tasks.getTask(0).getStatusIcon());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Index is out of bounds.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 29
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructorDeadline_validDateTime_success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(\"[D][N] return book (by: Aug 7 2020 1:00PM)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                new Deadline(\"return book\", \"2020-08-07 13:00\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(\"[D][N] return book (by: Aug 7 2020)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                new Deadline(\"return book\", \"2020-08-07\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructorDeadline_invalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"[D][N] return book (by: Aug 7 2020 1:00PM)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Deadline(\"return book\", \"2020-08-07 13:\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testToSaveName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"D | 0 | return book | 2020-08-07 13:00\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Deadline(\"return book\", \"2020-08-07 13:00\").toSaveName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"[D][N] meeting (by: Aug 8 2020 1:15PM)\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Deadline(\"meeting\", \"2020-08-08 13:15\").toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 49
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructorEvent_validDateTime_success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(\"[E][N] meeting (at: Aug 7 2020 1:00PM)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                new Event(\"meeting\", \"2020-08-07 13:00\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertEquals(\"[E][N] meeting (at: Aug 7 2020)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                new Event(\"meeting\", \"2020-08-07\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructorEvent_invalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"[E][N] meeting (at: Aug 7 2020 1:00PM)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Event(\"meeting\", \"2020-08-07 13:\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testToSaveName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"E | 0 | meeting | 2020-08-07 13:00\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Event(\"meeting\", \"2020-08-07 13:00\").toSaveName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"[E][N] meeting (at: Aug 8 2020 1:15PM)\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    new Event(\"meeting\", \"2020-08-08 13:15\").toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            assertEquals(\"OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional.\", e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 49
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [T][N] read book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [T][Y] read book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [D][N] return book (by: Jun 6 2020)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [E][N] project meeting (at: Aug 7 2020 1:00PM)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [T][N] join sports club"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [T][Y] join sports club"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [T][N] borrow book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     1. [T][Y] read book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     2. [D][N] return book (by: Jun 6 2020)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     3. [E][N] project meeting (at: Aug 7 2020 1:00PM)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     4. [T][Y] join sports club"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     5. [T][N] borrow book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     OOPS!!! Format is yyyy-mm-dd HH:mm. Time is optional."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "      [E][N] project meeting (at: Jan 28 2020 2:00PM)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     OOPS!!! Index is out of bounds."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    ----------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "alushingg": 66
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "deadline return book /by 2020-06-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "event project meeting /at 2020-08-07 13:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "deadline return book /by Monday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "event project meeting /at 2020-01-28 14:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "alushingg": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "alushingg": 21
    }
  }
]
