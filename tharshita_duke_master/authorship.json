[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "group \u0027seedu.Launcher\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    mainClassName \u003d \"Launcher\" "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 38,
      "-": 18
    }
  },
  {
    "path": "data/archive.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "T,false,hello"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "T,true,borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "D,false,return book,2019-10-15"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    LocalDate by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Deadline(String description, LocalDate time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.by \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns deadline task in string format with a proper date format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to save in storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"D\" + super.saveFormat() + \",\" + by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns deadline task in string format with a proper date format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to show user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                + by.getMonth() + \" \" + by.getDayOfMonth() + \" \" + by.getYear() + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 34
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * formats dialogue between user and duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param text in each dialogue box."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param img img of speaker."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return dialogue box with text and image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Creates an instance of storage, ui, tasklist and parser in the main."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Starts running the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Initialises variables and loads data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile(), ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            parser \u003d new Parser(ui, tasks, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            tasks \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns response of duke based on user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param input from user in GUI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return duke functionalities."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return parser.parse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return ui.sayHi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 45,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents exceptions that Duke throws."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents event task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.by \u003d time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns event task in string format with a date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to save in storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"E\" + super.saveFormat() + \",\" + by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns event task in string format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to show user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + by + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 29
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Overrides the Application#start() method and provide a concrete implementation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param stage primary stage that JavaFX provides."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            stage.setTitle(\"Dobby SPEWs\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greeting();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 36
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/Hermione.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Image dukePic \u003d new Image(this.getClass().getResourceAsStream(\"/images/Dobby.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.greeting(), dukePic));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                DialogBox.getDukeDialog(response, dukePic)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 54
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Handles user commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructor for Parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param ui ui instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param taskList tasklist instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param storage storage instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Parser(Ui ui, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Runs actions invoked by user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws DukeException  If invalid command such as empty command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String parse(String lines) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String[] inputArr \u003d lines.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String instr \u003d inputArr[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (instr.toLowerCase().contains(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //exit when \"bye\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            storage.writeToFile(taskList.tasksToString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str \u003d ui.sayBye();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (instr.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //loop through tasks array to list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str \u003d String.format(\"%s%s\", ui.list(), taskList.list());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (instr.contains(\"delete\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            int eventNum \u003d Integer.parseInt(inputArr[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            assert eventNum \u003e 0 : \"invalid task index\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d taskList.delete(eventNum);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d (\"OOPS! Task number does not exist! Try again?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (instr.contains(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //get task number and change isDone to true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            int eventNum \u003d Integer.parseInt(inputArr[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            assert eventNum \u003e 0 : \"invalid task index\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d taskList.done(eventNum);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d (\"OOPS! Task number does not exist! Try again?\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (instr.contains(\"find\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            String[] arr \u003d instr.split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            String keyword \u003d inputArr[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (instr.contains(\"archive\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //store in separate file and clear current"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            storage.archive(taskList.tasksToString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str \u003d \"archived!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            taskList.clearTasks();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                assert lines.length() \u003e 4 : \"invalid input!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String input \u003d lines.substring(5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                //add items to tasks array"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                if (instr.equalsIgnoreCase(\"todo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (!input.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        str \u003d taskList.addTodo(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else if (instr.equalsIgnoreCase(\"deadline\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (!input.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        str \u003d taskList.addDeadline(input.substring(4));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else if (instr.equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (!input.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        str \u003d taskList.addEvent(input.substring(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    //instruction does not exist"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str +\u003d String.format(\"\\nNow you have %d tasks in the list.\\n\", taskList.getSize());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                //catch exceptions thrown and print out message for user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d ex.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } catch (AssertionError err) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                str \u003d err.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 115
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private String directory \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private String fileName \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Path path \u003d Paths.get(directory, \"Desktop\", \"duke\", \"data\", fileName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Writes to storage in hard disk to store tasks added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param content data that is to be written to the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IOException  If invalid path or file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void writeToFile(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            writer.write(content);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            // exception handling"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void archive(String content){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //move file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Path newPath \u003d Paths.get("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    directory, \"Desktop\", \"duke\", \"data\", \"archive.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Files.createFile(newPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //write to file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(newPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            writer.write(content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Reads from storage in hard disk to get tasks previously added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IOException  If invalid path or file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            List\u003cString\u003e lines \u003d Files.readAllLines(path, Charset.defaultCharset());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String curr \u003d lines.get(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String[] data \u003d curr.split(\",\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    Task ntodo \u003d new Todo(data[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (data[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        ntodo.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    tasks.add(ntodo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    Task deadline \u003d new Deadline(data[2], LocalDate.parse(data[3]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (data[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else if (data[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    Task event \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    if (data[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DukeException(\"IO Exception\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 99
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents the parent class of ttodo, Deadline and Event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns status icon: tick if done and cross if not done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return icon"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets flag isDone to true to indicate completion of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns description of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns task in string format with a date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to save in storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \",\" + this.isDone + \",\" + getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns status of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return true if done, false if incomplete."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Return task in string format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to show user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 59
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents tasklist that contains list of tasks and actions to modify list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks, Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public TaskList(Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Lists all tasks in chronological order."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //print out everything one by one"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Task curr \u003d (Task) tasks.get(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str +\u003d String.format(\"%d. %s\\n\", i + 1, curr.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Deletes specified task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param index specifies the task to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String delete(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        //get task number and delete task from arraylist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task deleted \u003d (Task) tasks.remove(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert deleted !\u003d null : \"invalid task index\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return ui.delete(deleted, tasks.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Concatenates all tasks in string format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String tasksToString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String taskStr \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            taskStr +\u003d task.saveFormat() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return taskStr;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Checks the task specified and marks it as completed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param eventNum specified task that has been completed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String done(int eventNum) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task curr \u003d (Task) tasks.get(eventNum - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert curr !\u003d null : \"invalid task index\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        curr.markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return ui.done(curr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds atodo task to the tasklist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param input description of task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String addTodo(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task newTodo \u003d new Todo(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n%s\", newTodo.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a deadline task to the tasklist."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param input description of task including date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String addDeadline(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String[] inputArr \u003d input.split(\" /by \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task newDeadline \u003d new Deadline(inputArr[0], LocalDate.parse(inputArr[1])); //catch indexoutofboundserror"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        tasks.add(newDeadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n%s\", newDeadline.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds an event task to the tasklist."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param input description of task including date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String addEvent(String input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String[] inputArr \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task newEvent \u003d new Event(inputArr[0], inputArr[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        tasks.add(newEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n%s\", newEvent.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns number of items in the task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Finds tasks with matching keyword and lists them."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param keyword to match."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                foundList.add(t);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        str +\u003d ui.found(foundList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c foundList.size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Task t \u003d foundList.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            str +\u003d String.format(\"%d. %s\", i + 1,t.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void clearTasks() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 128
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns atodo task in string format with a date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to save in storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"T\" + super.saveFormat();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns atodo task in string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format to show user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 24
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private String logo \u003d \"   _   _   _   _   _  \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"  / \\\\ / \\\\ / \\\\ / \\\\ / \\\\ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \" ( D | O | B | B | Y )\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"  \\\\_/ \\\\_/ \\\\_/ \\\\_/ \\\\_/ \\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Greets user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format of greeting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String sayHi() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Hello I\u0027m \\n%s\\nWhat can I do for you?\", logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Greets user and ends session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format of goodbye"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String sayBye() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"Dobby has no master. Dobby is freeee now!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Introduces list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format of list intro"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Informs user of deleted task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param deleted task that has been deleted from list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param size total number of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format of deleted task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String delete(Task deleted, int size) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                + \"Now you have %d tasks in the list.\\n\", deleted, size);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Marks current task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param curr task to be marked as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string format of done notification"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String done(Task curr) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done: \\n%s)\\n\", curr.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Prints intro for found tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param list list of found tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return String format of intro to list of items"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String found(ArrayList list) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!list.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return \"There are no matching tasks in your list :(\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Prints error when file fails to load."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return string error info"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \"OOPS! Previous tasklist failed to load. Let\u0027s start afresh!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 80
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 19
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void testTask_Done() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task task \u003d new Task(\"buy book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(false, task.getStatus());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(true, task.getStatus());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void testTaskStringConversion() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Task task \u003d new Task(\"finish book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(\"[✘]finish book\", task.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(\"[✓]finish book\", task.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 21
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void testTodoStringConversion() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Todo todo \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(\"[T][✘]borrow book\", todo.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(\"[T][✓]borrow book\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 13
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Hello I\u0027m "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  [T][✘] borrow book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  [D][✘] return book (by: OCTOBER 15 2019)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  [E][✘] project meeting (Sat: Mon 2-4pm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "1. [T][✘] borrow book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "2. [D][✘] return book (by: OCTOBER 15 2019)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "3. [E][✘] project meeting (Sat: Mon 2-4pm)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  [D][✓] return book (by: OCTOBER 15 2019)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "tharshita": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": "deadline return book /by 2019-10-15"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "tharshita": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "fi"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tharshita": 35
    }
  }
]
