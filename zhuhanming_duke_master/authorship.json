[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    archiveVersion \u003d \"0.1.5\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "group \u0027main.java.duke\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 37,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.io.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Duke} class is the entry point of the Duchess program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * Upon initialising an instance of this class, calling run() on it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * will begin the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * \u003cp\u003eTo initialise the {@code Duke} instance, a {@code String filePath}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * ending with {@code .json} needs to be passed into the constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * If no file is found at the provided file path, a brand new JSON file will"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * be created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @author Zhu Hanming"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String loadingErrorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a newly created {@code Duke} object that uses the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * provided {@code filePath} as the location of the JSON save file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param filePath A {@code String} denoting the location of the JSON"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                 save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.ui.printToConsole(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a newly created {@code Duke} object that uses the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * provided {@code filePath} as the location of the JSON save file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * This is an overloaded constructor for GUI that stores any error"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * messages encountered when starting up so as to print subsequently."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param filePath A {@code String} denoting the location of the JSON"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                 save file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isGui    A {@code boolean} denoting whether the program is in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                 Gui mode."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Duke(String filePath, boolean isGui) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (isGui) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                this.loadingErrorMessage \u003d this.ui.printLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                this.ui.printToConsole(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Begins the console version of the Duchess program. Upon calling"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the run() method, the user can begin to interact with the program."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.ui.printToConsole(this.ui.printConsoleWelcome());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                String fullCommand \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                this.ui.printLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                String response \u003d command.execute.apply(fullCommand, this.taskList, this.ui, this.storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                this.ui.printToConsole(response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                if (command \u003d\u003d Command.BYE) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    isRunning \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } catch (DuchessException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                this.ui.printToConsole(this.ui.printError(e.getMessage()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a Duke response to the given input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Duke response."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return command.execute.apply(input, this.taskList, this.ui, this.storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the welcome message for GUI mode."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Welcome message {@code String} for GUI mode."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (this.loadingErrorMessage !\u003d null \u0026\u0026 !this.loadingErrorMessage.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.ui.printWelcome() + this.loadingErrorMessage;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.ui.printWelcome();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 125
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Launcher} class is the entry point of the Duchess program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * When starting up the program using the command line, use the flag"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * \"-mode console\" to run the application in console mode. Else it will"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * default to \"-mode gui\" by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Starts the Duchess program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param args Settings for the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        final List\u003cString\u003e arguments \u003d Arrays.asList(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        final int modeIndex \u003d arguments.indexOf(\"-mode\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        final String mode \u003d modeIndex \u003d\u003d -1 ? \"gui\" : arguments.get(modeIndex + 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (\"console\".equals(mode.toLowerCase())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            runConsole();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (\"gui\".equals(mode.toLowerCase())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            System.err.println(\"Bad mode: \" + mode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void runConsole() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Duke duchess \u003d new Duke(\"data/tasks.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        duchess.run();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 37
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.controller.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Main} class helps to start up the GUI for Duchess."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.json\", true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        MainWindow ap \u003d new MainWindow(duke);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.setMinHeight(600);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.setHeight(600);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.setMinWidth(400);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.setTitle(\"Duchess\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        scene.getStylesheets().add(\"/styles/duchess.css\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ap.themeToggle.selectedProperty().addListener((obs, wasSelected, isSelected) -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (isSelected) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                scene.getStylesheets().add(\"/styles/dark-duchess.css\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                scene.getStylesheets().remove(\"/styles/dark-duchess.css\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 34
    }
  },
  {
    "path": "src/main/java/duke/command/AdminCommandHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code AdminCommandHandler} class contains all static methods to handle"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * administrative commands given the same arguments of command, taskList, ui and storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class AdminCommandHandler {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Prints the help message with the given {@code Ui} instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full raw user command string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleHelpCommand(String command, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.HELP.hasCommand(cleanAndLowerString(command)); // pre-condition"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printHelpMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Prints the goodbye message with the given {@code Ui} instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleByeCommand(String command, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.BYE.hasCommand(cleanAndLowerString(command)); // pre-condition"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printGoodbye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.QuadFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Command} enum contains all of the different types of commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * recognised by {@code Duchess}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    TODO(TaskCreationHandler::handleTodoCommand, \"todo\", \"t\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    EVENT(TaskCreationHandler::handleEventCommand, \"event\", \"e\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    DEADLINE(TaskCreationHandler::handleDeadlineCommand, \"deadline\", \"dl\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    LIST(TaskListCommandHandler::handleListCommand, \"list\", \"l\", \"li\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    DONE(TaskListCommandHandler::handleDoneCommand, \"done\", \"d\", \"complete\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    FIND(TaskListCommandHandler::handleFindCommand, \"find\", \"f\", \"search\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    DELETE(TaskListCommandHandler::handleDeleteCommand, \"delete\", \"d\", \"del\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    SNOOZE(TaskListCommandHandler::handleSnoozeCommand, \"snooze\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    SORT(TaskListCommandHandler::handleSortCommand, \"sort\", \"s\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    HELP(AdminCommandHandler::handleHelpCommand, \"help\", \"h\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    BYE(AdminCommandHandler::handleByeCommand, \"bye\", \"exit\", \"quit\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Executes the command. Use {@code execute.apply} to run the function."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public final QuadFunction\u003cString, TaskList, Ui, Storage\u003e execute;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Contains all valid user inputs that maps to this type of command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public final ArrayList\u003cString\u003e commands;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the Command enum type with the appropriate {@code execute}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * function."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param execute The {@code QuadFunction} for the Command type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    Command(QuadFunction\u003cString, TaskList, Ui, Storage\u003e execute, String... commands) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.execute \u003d execute;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.commands \u003d new ArrayList\u003c\u003e(Arrays.asList(commands));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public boolean hasCommand(String command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.commands.contains(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 52
    }
  },
  {
    "path": "src/main/java/duke/command/TaskCreationHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.RecurringDeadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Frequency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.FrequencyParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_DEADLINE_MISSING_CONTENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_DEADLINE_MISSING_DEADLINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_EVENT_MISSING_CONTENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_EVENT_MISSING_TIME_FRAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INVALID_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_TODO_MISSING_CONTENT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code TaskCreationHandler} class contains all static methods"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * to handle task creation commands given the same arguments of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * command, taskList, ui and storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class TaskCreationHandler {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Creates a {@code ToDo} based on the command and given the entire command and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the supporting instances."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full raw user command string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleTodoCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                    Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task newTask \u003d getTaskFromCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return saveTask(newTask, taskList, storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Creates a {@code Event} based on the command and given the entire command and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the supporting instances."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full raw user command string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved or /at [details] is"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          missing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleEventCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                     Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task newTask \u003d getTaskFromCommand(command, \"/at\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return saveTask(newTask, taskList, storage, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Creates a {@code Deadline} based on the command and given the entire command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * and the supporting instances."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full raw user command string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved or /by is missing or"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          the deadline is of an unrecognizable format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleDeadlineCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                        Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task newTask \u003d getTaskFromCommand(command, \"/by\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return saveTask(newTask, taskList, storage, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // Private helper methods from this point onwards."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a task based on the command given. Private helper method that"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * processes. the input and checks for any errors. If error is found, an"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * appropriate error is thrown."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command Raw uncleaned command to process."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Task created from command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the given command is of an invalid format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Task getTaskFromCommand(String command) throws DuchessException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String type \u003d cleanAndLowerString(commands.get(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (commands.size() \u003c 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            handleMissingContent(type);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.TODO.commands.contains(type);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return new ToDo(cleanString(commands.get(1)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a task based on the command given. Private helper method that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * processes. the input and checks for any errors. If error is found, an"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * appropriate error is thrown."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command Raw uncleaned command to process."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Task created from command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the given command is of an invalid format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Task getTaskFromCommand(String command, String detailsKeyword) throws DuchessException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String type \u003d cleanAndLowerString(commands.get(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (commands.size() \u003c 2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            handleMissingContent(type);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e details \u003d new ArrayList\u003c\u003e(Arrays.asList(commands.get(1).split(detailsKeyword)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (details.size() \u003c 2) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            handleMissingDetails(type);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (Command.EVENT.hasCommand(type)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return new Event(cleanString(details.get(0)), cleanString(details.get(1)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.DEADLINE.commands.contains(type);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return getDeadlineFromDetails(commands.get(1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code Deadline} object if the user input suggests that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * recurrence is desired, else return null."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command Original user command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code Deadline} object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Deadline getDeadlineFromDetails(String command) throws DuchessException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e details \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"/\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Frequency frequency \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        LocalDateTime recurrenceEndTime \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (int i \u003d 1; i \u003c details.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String detail \u003d details.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String[] commands \u003d detail.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            switch (commands[0].toLowerCase()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            case \"by\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                deadline \u003d DateTimeParser.parseDateTime(cleanAndLowerString(commands[1]));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            case \"every\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                frequency \u003d FrequencyParser.parseFrequency(cleanAndLowerString(commands[1]));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            case \"stop\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                recurrenceEndTime \u003d DateTimeParser.parseDateTime(cleanAndLowerString(commands[1]));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // Means unrecognized keyword was given. Not an issue unless key details are missing."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_DEADLINE_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String description \u003d cleanString(details.get(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (frequency \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return new Deadline(description, deadline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (recurrenceEndTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return new RecurringDeadline(description, deadline, frequency);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return new RecurringDeadline(description, deadline, frequency, recurrenceEndTime);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Throws the appropriate missing content error."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param type Cleaned {@code String} indicating type of task with missing content."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException An exception with an appropriate error message."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void handleMissingContent(String type) throws DuchessException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (Command.TODO.commands.contains(type)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_TODO_MISSING_CONTENT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (Command.EVENT.commands.contains(type)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_EVENT_MISSING_CONTENT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (Command.DEADLINE.commands.contains(type)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_DEADLINE_MISSING_CONTENT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Throws the appropriate missing details error."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param type Type of task with missing details."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException An exception with an appropriate error message."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void handleMissingDetails(String type) throws DuchessException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (Command.EVENT.commands.contains(type)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_EVENT_MISSING_TIME_FRAME);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.DEADLINE.commands.contains(type);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        throw new DuchessException(ERROR_DEADLINE_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Saves the newly created {@code Task} and returns a success message."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param newTask  {@code Task} to be saved."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList {@code TaskList} to save to."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  {@code Storage} to write to the save file with."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       {@code Ui} to generate the success message."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return A success message based on the new Task."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException Failure to write to the save file."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static String saveTask(Task newTask, TaskList taskList,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                   Storage storage, Ui ui) throws DuchessException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskAdded(newTask, taskList.size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 224
    }
  },
  {
    "path": "src/main/java/duke/command/TaskListCommandHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.DurationParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_COMMAND_MISSING_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_COMMAND_TOO_MANY_INDICES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INVALID_SNOOZE_DURATION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_SNOOZING_NON_DEADLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_SORTING_EMPTY_LIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code CommandHandler} class contains all static methods to handle"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * commands given the same arguments of command, taskList, ui and storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class TaskListCommandHandler {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Prints out the given {@code TaskList} with the given {@code Ui} instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleListCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                    Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.LIST.hasCommand(cleanAndLowerString(command)); // pre-condition"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Completes a {@code Task} based on the command and given the entire command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * and the supporting instances."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved or the index is out of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          bounds or the task is already completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleDoneCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                    Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        int index \u003d getIntegerFromCommand(command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        checkBoundsOfIndex(index, taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task taskCompleted \u003d taskList.completeTask(index - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskCompleted(taskCompleted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Finds a list of {@code Task}s based on the command and given the entire"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * command and the supporting instances. The list of {@code Task}s are then"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * printed out with the given {@code Ui} instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleFindCommand(String command, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert Command.FIND.hasCommand(cleanAndLowerString(commands.get(0))); // pre-condition"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cPair\u003cTask, Integer\u003e\u003e filteredTaskList \u003d taskList.find(cleanAndLowerString(commands.get(1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printFilteredTaskList(filteredTaskList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Deletes a {@code Task} based on the command and given the entire command and"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the supporting instances."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved or the index is out of"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          bounds."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleDeleteCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                      Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        int index \u003d getIntegerFromCommand(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        checkBoundsOfIndex(index, taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task taskToDelete \u003d taskList.getTask(index - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.removeTask(index - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskDeleted(taskToDelete, taskList.size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Snoozes a {@code Task} based on the command and given the entire command and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the supporting instances."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list fails to be saved or the index is out of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          bounds or the task does not have a deadline to snooze."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleSnoozeCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                      Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"/for\", 2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (commands.size() \u003c 2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_SNOOZE_DURATION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        int index \u003d getIntegerFromCommand(commands.get(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        checkBoundsOfIndex(index, taskList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task taskToSnooze \u003d taskList.getTask(index - 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (!(taskToSnooze instanceof Deadline)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_SNOOZING_NON_DEADLINE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String duration \u003d cleanAndLowerString(commands.get(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TemporalAmount snoozePeriod \u003d DurationParser.parseDuration(duration);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ((Deadline) taskToSnooze).snooze(snoozePeriod);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskSnoozed(taskToSnooze, DurationParser.parseDurationToString(duration));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Sorts the {@code TaskList} given the entire command and the supporting instances."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command  Full user command string."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param ui       Ui instance."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param storage  Storage instance."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the list is empty and has nothing to sort."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    static String handleSortCommand(String command, TaskList taskList,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                    Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_SORTING_EMPTY_LIST);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return ui.printTaskListSorted();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Integer getIntegerFromCommand(String command) throws DuchessException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(command.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        checkSizeOfCommands(commands);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return Integer.parseInt(commands.get(1).trim());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void checkSizeOfCommands(ArrayList\u003cString\u003e commands) throws DuchessException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (commands.size() \u003c 2) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_COMMAND_MISSING_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (commands.size() \u003e 2) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_COMMAND_TOO_MANY_INDICES);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void checkBoundsOfIndex(int index, TaskList taskList) throws DuchessException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isIndexTooLow \u003d index \u003c 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isIndexTooHigh \u003d index \u003e\u003d taskList.size();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isIndexTooLow || isIndexTooHigh) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 172
    }
  },
  {
    "path": "src/main/java/duke/controller/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.shape.Ellipse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code DialogBox} control represents a dialog box consisting of an ImageView to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final String USER_SPEECH_BUBBLE_CLASS \u003d \"user-speech-bubble\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private HBox speechBubble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        double width \u003d displayPicture.getFitWidth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        double height \u003d displayPicture.getFitHeight();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Ellipse ellipse \u003d new Ellipse(width / 2, height / 2, width / 2, height / 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        displayPicture.setClip(ellipse);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns user dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param text Text in the dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param img  Image for dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Dialog for user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        DialogBox userDialog \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        userDialog.speechBubble.getStyleClass().add(USER_SPEECH_BUBBLE_CLASS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns Duke dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param text Text in the dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param img  Image of dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Dialog for Duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 85
    }
  },
  {
    "path": "src/main/java/duke/controller/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.control.ToggleButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class MainWindow extends VBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ToggleButton themeToggle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuchess.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises {@code MainWindow} via FXML."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a {@code MainWindow} controller instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param d Duke instance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public MainWindow(Duke d) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String welcomeMessage \u003d duke.getWelcomeMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMessage, dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * input after processing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (input.trim().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 85
    }
  },
  {
    "path": "src/main/java/duke/exception/DuchessException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code DuchessException} class helps to handle exceptions encountered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * throughout the {@code Duchess} program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DuchessException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises an instance of {@code DuchessException} with the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * given errorMessage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param errorMessage Message of the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public DuchessException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 17
    }
  },
  {
    "path": "src/main/java/duke/io/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INVALID_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Parser} class helps to parse given user inputs into a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * {@code Command} of the appropriate type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Parses a given {@code String} into a {@code Command} of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * the appropriate type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param command Entire command to be processed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Command type of the given command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the command is not recognised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static Command parse(String command) throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String formattedCommand \u003d cleanAndLowerString(command.split(\"\\\\s\", 2)[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (Command cmd : Command.values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (cmd.hasCommand(formattedCommand)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return cmd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        throw new DuchessException(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 32
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.RecurringDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Frequency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_FAIL_TO_LOAD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_FAIL_TO_LOAD_AND_SAVE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_FAIL_TO_SAVE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_DEADLINE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_DESCRIPTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_FREQUENCY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_IS_COMPLETED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_REPEAT_END_TIME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.GSON_ATTR_TIME_FRAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Storage} class helps to save and load @{code ArrayList}s of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * {@code Task}s from a given File Path."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a {@code Storage} instance that works with the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code filePath}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param filePath The file path to save to and if possible, load from."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws IllegalArgumentException If {@code filePath} points to a non-json file. Storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                                  defaults to \"data/tasks.json\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Storage(String filePath) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.gson \u003d new Gson();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Saves a given list of tasks to the file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param tasks List of tasks to be saved."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If it fails to save to the file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void save(TaskList tasks) throws DuchessException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Task[] taskArray \u003d tasks.getTaskArray().toArray(new Task[tasks.size()]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fileWriter.write(this.gson.toJson(taskArray, Task[].class));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_FAIL_TO_SAVE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Loads and returns a list of tasks from the file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Loaded list of tasks from given file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If it fails to load from the file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DuchessException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            JsonArray jsonArray \u003d readDataFromFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return readTaskArrayFromJsonArray(jsonArray);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (!isAbleToSave()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                throw new DuchessException(ERROR_FAIL_TO_LOAD_AND_SAVE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_FAIL_TO_LOAD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // Private helper methods"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private JsonArray readDataFromFilePath() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String fileContent \u003d Files.readString(Path.of(this.filePath));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return JsonParser.parseString(fileContent).getAsJsonArray();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private ArrayList\u003cTask\u003e readTaskArrayFromJsonArray(JsonArray jsonArray) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            JsonObject taskToCheck \u003d (JsonObject) jsonArray.get(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (taskToCheck.has(GSON_ATTR_FREQUENCY) \u0026\u0026 taskToCheck.has(GSON_ATTR_DEADLINE)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // Task is a RecurringDeadline"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                if (taskToCheck.has(GSON_ATTR_REPEAT_END_TIME)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    result.add(new RecurringDeadline("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_DESCRIPTION), String.class),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_DEADLINE), LocalDateTime.class),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_FREQUENCY), Frequency.class),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_REPEAT_END_TIME), LocalDateTime.class)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    result.add(new RecurringDeadline("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_DESCRIPTION), String.class),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_DEADLINE), LocalDateTime.class),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                            this.gson.fromJson(taskToCheck.get(GSON_ATTR_FREQUENCY), Frequency.class)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (taskToCheck.has(GSON_ATTR_DEADLINE)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // Task is a Deadline"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                result.add(new Deadline(this.gson.fromJson(taskToCheck.get(GSON_ATTR_DESCRIPTION), String.class),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        this.gson.fromJson(taskToCheck.get(GSON_ATTR_DEADLINE), LocalDateTime.class),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        this.gson.fromJson(taskToCheck.get(GSON_ATTR_IS_COMPLETED), boolean.class)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (taskToCheck.has(GSON_ATTR_TIME_FRAME)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // Task is an Event"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                result.add(new Event(this.gson.fromJson(taskToCheck.get(GSON_ATTR_DESCRIPTION), String.class),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        this.gson.fromJson(taskToCheck.get(GSON_ATTR_TIME_FRAME), String.class),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        this.gson.fromJson(taskToCheck.get(GSON_ATTR_IS_COMPLETED), boolean.class)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // Task is a ToDo"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                result.add(new ToDo(this.gson.fromJson(taskToCheck.get(GSON_ATTR_DESCRIPTION), String.class),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        this.gson.fromJson(taskToCheck.get(GSON_ATTR_IS_COMPLETED), boolean.class)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private boolean isAbleToSave() throws DuchessException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        File directories \u003d file.getParentFile();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return directories.exists() || directories.mkdirs();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 141
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.DateTimeStringFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Deadline} class extends from {@code Task} to allow the setting of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * a {@code LocalDateTime deadline}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    protected static final String DEADLINE_SYMBOL \u003d \"[D]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Deadline} instance with its description and deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param deadline    {@code LocalDateTime} object indicating the deadline of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                    the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Deadline} instance with its description, deadline and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * completion status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param deadline    {@code LocalDateTime} object indicating the deadline of"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                    the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isCompleted {@code boolean} value indicating whether the task is"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                    completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the deadline of the {@code Deadline}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Deadline in {@code LocalDateTime} format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Snoozes the deadline by the given amount of time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param snoozePeriod The amount of time to snooze the deadline for."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void snooze(TemporalAmount snoozePeriod) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.deadline \u003d this.deadline.plus(snoozePeriod);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return DEADLINE_SYMBOL + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + DateTimeStringFormatter.formatDateTime(this.deadline, this.isCompleted) + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Event} class extends from {@code Task} to allow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * the setting of a {@code String timeFrame}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final String EVENT_SYMBOL \u003d \"[E]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String timeFrame;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Event} instance with its description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * and timeFrame."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param timeFrame   {@code String} indicating the timeFrame of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Event(String description, String timeFrame) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Event} instance with its description, timeFrame"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * and completion status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param timeFrame   {@code String} indicating the timeFrame of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isCompleted {@code boolean} value indicating whether the task is completed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Event(String description, String timeFrame, boolean isCompleted) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the timeFrame of the {@code Event}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return TimeFrame of the {@code Event}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String getTimeFrame() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return timeFrame;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return EVENT_SYMBOL + super.toString() + \" (at: \" + this.timeFrame + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 49
    }
  },
  {
    "path": "src/main/java/duke/task/RecurringDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Frequency;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_RECURRING_TASK_MISSING_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class RecurringDeadline extends Deadline {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Frequency frequency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private LocalDateTime repeatEndTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code RecurringDeadline} instance with its description, deadline and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * completion status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param deadline    {@code LocalDateTime} object indicating the deadline of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                    the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param frequency   {@code Frequency} of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public RecurringDeadline(String description, LocalDateTime deadline, Frequency frequency) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description, deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code RecurringDeadline} instance with its description, deadline and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * completion status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description   Written description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param deadline      {@code LocalDateTime} object indicating the deadline of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                      the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param frequency     {@code Frequency} of the deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param repeatEndTime {@code LocalDateTime} object indicating the time to stop repeating."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public RecurringDeadline(String description, LocalDateTime deadline, Frequency frequency,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                             LocalDateTime repeatEndTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description, deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.repeatEndTime \u003d repeatEndTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return super.toString() + \" (\" + this.getFrequency() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        LocalDateTime nextDeadline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        switch (this.frequency) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            nextDeadline \u003d this.deadline.plusDays(1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            nextDeadline \u003d this.deadline.plusWeeks(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case FORTNIGHTLY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            nextDeadline \u003d this.deadline.plusWeeks(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            nextDeadline \u003d this.deadline.plusMonths(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_RECURRING_TASK_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (repeatEndTime \u003d\u003d null || nextDeadline.isBefore(repeatEndTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.deadline \u003d nextDeadline;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super.completeTask();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void snooze(TemporalAmount snoozePeriod) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super.snooze(snoozePeriod);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (this.repeatEndTime !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.repeatEndTime \u003d this.repeatEndTime.plus(snoozePeriod);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String getFrequency() throws DuchessException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        switch (this.frequency) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return \"Daily\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return \"Weekly\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case FORTNIGHTLY:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return \"Fortnightly\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return \"Monthly\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_RECURRING_TASK_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 99
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Task} class creates a task with a description and isCompleted state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Task} instance with its description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code Task} instance with its description and completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isCompleted {@code boolean} value indicating whether the task is completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return (this.isCompleted ? \"\\u2713\" : \"\\u2718\"); // tick or cross depending on isCompleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Toggles the completion status of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code boolean} value that indicates the completion status of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Completion status of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a description of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Description of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 64
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_TASK_ALREADY_COMPLETED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_TASK_CREATED_BEFORE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code TaskList} object helps to store and manage {@code Task}s."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private HashMap\u003cString, Boolean\u003e taskDescriptions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises an empty {@code TaskList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.taskDescriptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a {@code TaskList} containing existing tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param tasks List of existing tasks to be included in the {@code TaskList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.taskDescriptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.taskDescriptions.put(hashTaskToString(task), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the number of {@code Task}s in the {@code TaskList}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Number of tasks in {@code TaskList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Adds a {@code Task} to the {@code TaskList}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param task {@code Task} to be added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void addTask(Task task) throws DuchessException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (this.taskDescriptions.containsKey(hashTaskToString(task))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_TASK_CREATED_BEFORE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Removes a {@code Task} from the {@code TaskList}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param index Index of {@code Task} to be removed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the index is out of bounds."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void removeTask(int index) throws DuchessException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.tasks.remove(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code Task} from the {@code TaskList} based on its {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param index Index of {@code Task} to be retrieved."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code Task} at index given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the index is out of bounds."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Task getTask(int index) throws DuchessException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.tasks.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Completes a {@code Task} at {@code index} in the {@code TaskList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param index Index of {@code Task} in the {@code TaskList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code Task} at the given index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the task has already been completed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Task completeTask(int index) throws DuchessException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task taskToComplete \u003d this.getTask(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (taskToComplete.isCompleted) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_TASK_ALREADY_COMPLETED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskToComplete.completeTask();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return taskToComplete;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the entire {@code TaskArray}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The list of tasks in {@code ArrayList\u003cTask\u003e}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a list of pairs of {@code Task}s and their index in the original"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * list. This allows the user to see the list with new indices while being able"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * to delete or complete tasks using the original indices."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param searchWords Cleaned word(s) to search for in the tasks\u0027 descriptions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return An array of pairs of {@code Task}s and {@code Integer}s. Returns an"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *         empty array if no tasks meet the requirement."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ArrayList\u003cPair\u003cTask, Integer\u003e\u003e find(String searchWords) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert searchWords.equals(cleanAndLowerString(searchWords));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return IntStream.range(0, this.tasks.size()).mapToObj(i -\u003e new Pair\u003c\u003e(this.tasks.get(i), i))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                .filter(p -\u003e p.getFirst().description.toLowerCase().contains(searchWords))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Sorts the task array, with {@code Deadline}s at the front, and earlier deadlines"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * at the front."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.tasks.sort((a, b) -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            boolean isAActiveDeadline \u003d a instanceof Deadline \u0026\u0026 !a.isCompleted;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            boolean isBActiveDeadline \u003d b instanceof Deadline \u0026\u0026 !b.isCompleted;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (isAActiveDeadline \u0026\u0026 !isBActiveDeadline) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (isBActiveDeadline \u0026\u0026 !isAActiveDeadline) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (isAActiveDeadline \u0026\u0026 isBActiveDeadline) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return ((Deadline) a).getDeadline().compareTo(((Deadline) b).getDeadline());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (a.isCompleted \u0026\u0026 !b.isCompleted) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (b.isCompleted \u0026\u0026 !a.isCompleted) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String hashTaskToString(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String description \u003d task.description.trim().toLowerCase();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String timeFrame \u003d ((Event) task).getTimeFrame().trim().toLowerCase();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return description + timeFrame;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assert task instanceof Deadline;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String deadline \u003d ((Deadline) task).getDeadline().toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return description + deadline;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 172
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code ToDo} class extends from {@code Task}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final String TO_DO_SYMBOL \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code ToDo} instance with its description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises the {@code ToDo} instance with its description and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * completion status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param description Written description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isCompleted {@code boolean} value indicating whether the task is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public ToDo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return TO_DO_SYMBOL + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Ui} class helps to manage all inputs and outputs to the System"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * console."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises a {@code Ui} instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private String formatString(String string) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return String.format(\"%s\\n\", string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Formats the provided strings appropriately. The strings provided will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * formatted to be printable line by line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param strings Strings to format to be line-by-line."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The formatted {@code String}s."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String print(String... strings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        StringBuilder returnString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (String string : strings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            returnString.append(this.formatString(string));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return returnString.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the default welcome message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The welcome message {@code String}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printWelcome() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Hello! My name is Duchess.\", \"How may I help you?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the default goodbye message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The default goodbye message {@code String}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printGoodbye() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Bye, is it? Shoo shoo then.\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"Don\u0027t need to worry, I\u0027ll remember what you told me today.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns out the given {@code TaskList} formatted, task by task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param taskList The taskList to print."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The {@code TaskList} formatted {@code String}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the task changes size during printing, resulting"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          in index out of bounds."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskList(TaskList taskList) throws DuchessException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            List\u003cString\u003e result \u003d IntStream.range(0, taskList.size())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    .mapToObj(i -\u003e (i + 1) + \".\\t\" + taskList.getTask(i)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            result.add(0, \"Sighs... you never remember what you say, don\u0027t you.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            result.add(1, \"You said these:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String[] resultToPrint \u003d new String[result.size()];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.print(result.toArray(resultToPrint));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.print(\"Is this a trick question? You have not told me anything about \u0027tasks\u0027.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the given {@code filteredTaskList} task by task as {@code String}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Will return an appropriate message if the array is empty."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param filteredTaskList The filteredTaskList to print."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The filtered task list {@code String}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printFilteredTaskList(ArrayList\u003cPair\u003cTask, Integer\u003e\u003e filteredTaskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (filteredTaskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.print(\"Couldn\u0027t find anything that matches what you want.\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    \"I sure hope you\u0027re not testing me!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            this.print(\"Not bad, I found the following:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            List\u003cString\u003e result \u003d IntStream.range(0, filteredTaskList.size()).mapToObj(i -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                Pair\u003cTask, Integer\u003e pair \u003d filteredTaskList.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return (i + 1) + \".\\t\" + pair.getFirst() + \"\\n\\t[REF INDEX FOR DELETE/DONE: \" + (pair.getSecond() + 1)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        + \"]\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            result.add(0, \"Not bad, I found the following:\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            String[] resultToPrint \u003d new String[result.size()];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.print(result.toArray(resultToPrint));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the success message when a task is added."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param task {@code Task} added to a {@code TaskList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param size New size of the {@code TaskList} after the {@code Task} has been"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *             added."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The addition message {@code String}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskAdded(Task task, int size) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"As always, needing someone to keep track of things for you...\", task.toString(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"I\u0027ve already tracked \" + size + \" \" + (size \u003d\u003d 1 ? \"task\" : \"tasks\") + \" for you.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the success message when a task is deleted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param task {@code Task} deleted to a {@code TaskList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param size New size of the {@code TaskList} after the {@code Task} has been"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *             deleted."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The deletion message {@code String}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskDeleted(Task task, int size) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Great! One less thing for me to track for you.\", task + \" [DELETED]\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"Now I\u0027m tracking \" + size + \" \" + (size \u003d\u003d 1 ? \"task\" : \"tasks\") + \" for you.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the task completed message formatted appropriately."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param task The task that is completed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The completion message {@code String}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskCompleted(Task task) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (!task.isCompleted()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return this.print(\"Oh? You actually completed something? Impressive...\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    \"Your recurring task has been updated to its next recurrence.\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    task.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Oh? You actually completed something? Impressive...\", task.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the task snoozed message formatted appropriately."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param task         The task that is snoozed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param snoozePeriod The duration that the task was snoozed for."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The success message {@code String}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskSnoozed(Task task, String snoozePeriod) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Behind schedule as always... \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"I\u0027ve pushed back the deadline for you by \" + snoozePeriod + \".\", task.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code TaskList} sorted success message formatted appropriately."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The success message {@code String}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printTaskListSorted() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Your list of tasks has been sorted.\", \"Type \u0027list\u0027 to see the new order.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns an error message formatted appropriately."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param errorMessage ErrorMessage to print."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The error message {@code String}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printError(String errorMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Stop causing me trouble...\", errorMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the error message for failing to load storage."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param errorMessage Error message to be printed for failing to load storage."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The loading error message {@code String}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printLoadingError(String errorMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(errorMessage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the default help message with information on commands and datetime"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * formats."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The default help message {@code String}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printHelpMessage() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Is this the first time I\u0027m talking with you?\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"I can\u0027t do everything for you, you know? Here\u0027s what I do:\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new String(new char[45]).replace(\"\\0\", \"-\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"list: View current tasks.\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"todo DESC: Create ToDo.\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"event DESC /at TIME: Create Event.\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"deadline DESC /by TIME [/every FREQ] [/stop TIME]: Create Deadline.\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"done INDEX: Complete task at index.\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"find WORD(S): Find tasks with said word(s) in name.\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"delete INDEX: Delete task at index.\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"sort: Sorts your list of tasks.\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"snooze INDEX /for DURATION: Pushes back deadline by given duration.\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"bye: Bid farewell (sounds great!).\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"help: See this message again.\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new String(new char[45]).replace(\"\\0\", \"-\"),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"Accepted time formats are:\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"d-m-YY e.g. 2-12-20\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"d-m-YY HHmm e.g. 2-12-20 1600\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"Today/Tonight/Tomorrow\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"Monday/Tuesday etc.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // Console Mode Specific Methods"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Reads in the next line of user input."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Next line of user input."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Prints the separator line. The line is made up of the U-2501 unicode"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * character."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        System.out.println(new String(new char[65]).replace(\"\\0\", \"\\u2501\")); // border character"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Prints output to console for console mode."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param output String to print."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void printToConsole(String output) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        System.out.print(output);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the console welcome message."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The welcome message {@code String}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public String printConsoleWelcome() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        String logo \u003d \" _____             _\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"|  __ \\\\           | |\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"| |  | |_   _  ___| |__   ___  ___ ___\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"| |  | | | | |/ __| \u0027_ \\\\ / _ \\\\/ __/ __|\\n\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"| |__| | |_| | (__| | | |  __/\\\\__ \\\\__ \\\\\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                + \"|_____/ \\\\__,_|\\\\___|_| |_|\\\\___||___/___/\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.print(\"Hello from\", logo, \"My name is Duchess, as you can see above.\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"How may I help you?\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 267
    }
  },
  {
    "path": "src/main/java/duke/util/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_WRONG_DATE_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanAndLowerString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code DateTimeParser} is a helper class with static methods to parse"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * user provided inputs into {@code LocalDateTime} objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code DateTimeFormatter} that recognises the pattern \"d-M-yy HHmm\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static DateTimeFormatter dateTimePattern \u003d DateTimeFormatter.ofPattern(\"d-M-yy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code DateTimeFormatter} that recognises the pattern \"d-M-yy\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static DateTimeFormatter datePattern \u003d DateTimeFormatter.ofPattern(\"d-M-yy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code LocalDateTime} object based on the given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code dateTimeString}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \u003cp\u003eAllowed formats for {@code dateTimeString} are days of the week e.g."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \"Monday\"; relative timings e.g. \"Today\", \"Tonight\"; of datetime format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \"d-M-yy\" or \"d-M-yy HHmm\"."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param dateTimeString Cleaned user provided input in {@code String} format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code LocalDateTime} object based on given {@code dateTimeString}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If {@code dateTimeString} is not of the correct"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) throws DuchessException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assert dateTimeString.equals(cleanAndLowerString(dateTimeString));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return getDateTimeFromWords(dateTimeString)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                .or(() -\u003e getDateTimeUsingDateTimePattern(dateTimeString)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        .or(() -\u003e getDateTimeUsingDatePattern(dateTimeString)))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                .orElseThrow(() -\u003e new DuchessException(ERROR_WRONG_DATE_FORMAT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Optional\u003cLocalDateTime\u003e getDateTimeFromWords(String dateTimeString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        switch (dateTimeString) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.of(LocalDate.now().atTime(17, 0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"tonight\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.of(LocalDate.now().atTime(21, 0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"tmr\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.of(LocalDate.now().plusDays(1).atTime(17, 0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return Optional.of(LocalDate.now()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        .with(TemporalAdjusters.next(DayOfWeek.valueOf("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                                extendDayOfWeek(dateTimeString).toUpperCase()))).atTime(17, 0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static String extendDayOfWeek(String dateTimeString) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (dateTimeString.endsWith(\"day\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return dateTimeString;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return dateTimeString + \"day\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Optional\u003cLocalDateTime\u003e getDateTimeUsingDateTimePattern(String dateTimeString) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.of(LocalDateTime.parse(dateTimeString, dateTimePattern));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static Optional\u003cLocalDateTime\u003e getDateTimeUsingDatePattern(String dateTimeString) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.of(LocalDate.parse(dateTimeString, datePattern).atTime(17, 0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 94
    }
  },
  {
    "path": "src/main/java/duke/util/DateTimeStringFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.BLANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.DATE_TIME_OVERDUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.DATE_TIME_TODAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.DATE_TIME_TOMORROW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.DATE_TIME_YESTERDAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code DateTimeStringFormatter} is a helper class with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * static methods to format {@code LocalDateTime} objects into"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * meaningful {@code String} formats. This is designed to be used"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * with deadlines, as the \"[OVERDUE]\" label is returned as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * should the given {@code LocalDateTime} object be before the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * current datetime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * \u003cp\u003eAn example would be \"Today\" if the given {@code LocalDateTime}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * object is dated today."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DateTimeStringFormatter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final DateTimeFormatter HOUR_MINUTES \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final DateTimeFormatter MONTH_HOUR_MINUTES \u003d DateTimeFormatter.ofPattern(\"MMM d h:mm a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final DateTimeFormatter MONTH_YEAR_HOUR_MINUTES \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy h:mm a\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static final DateTimeFormatter WEEKDAY_HOUR_MINUTES \u003d DateTimeFormatter.ofPattern(\"EEE h:mm a\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Formats {@code LocalDateTime} objects into meaningful {@code String}s."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param dateTime    {@code LocalDateTime} object representing the deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param isCompleted Whether the task has been completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Meaningfully formatted {@code String}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static String formatDateTime(LocalDateTime dateTime, boolean isCompleted) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        long differenceInDays \u003d DAYS.between(dateTime.toLocalDate(), currentDateTime.toLocalDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isToday \u003d differenceInDays \u003d\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isOneDayDifference \u003d Math.abs(differenceInDays) \u003d\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isDifferentYear \u003d dateTime.getYear() !\u003d currentDateTime.getYear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (dateTime.isBefore(currentDateTime)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (isToday) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return DATE_TIME_TODAY + dateTime.format(HOUR_MINUTES)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        + (isCompleted ? BLANK : DATE_TIME_OVERDUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (isOneDayDifference) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                // isYesterday"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return DATE_TIME_YESTERDAY + dateTime.format(HOUR_MINUTES)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        + (isCompleted ? BLANK : DATE_TIME_OVERDUE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            } else if (isDifferentYear) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                return dateTime.format(MONTH_YEAR_HOUR_MINUTES)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                        + (isCompleted ? BLANK : DATE_TIME_OVERDUE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return dateTime.format(MONTH_HOUR_MINUTES) + (isCompleted ? BLANK : DATE_TIME_OVERDUE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isThisWeek \u003d differenceInDays \u003e -7;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isToday) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return DATE_TIME_TODAY + dateTime.format(HOUR_MINUTES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (isOneDayDifference) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // isTomorrow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return DATE_TIME_TOMORROW + dateTime.format(HOUR_MINUTES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (isThisWeek) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return dateTime.format(WEEKDAY_HOUR_MINUTES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } else if (isDifferentYear) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return dateTime.format(MONTH_YEAR_HOUR_MINUTES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return dateTime.format(MONTH_HOUR_MINUTES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 73
    }
  },
  {
    "path": "src/main/java/duke/util/DurationParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INVALID_SNOOZE_DURATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_INVALID_UNIT_OF_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.StringCleaner.cleanString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code DurationParser} is a helper class with static methods to parse"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * user provided inputs into {@code TemporalAmount} and {@code String} objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DurationParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code TemporalAmount} object based on the given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code userInput}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \u003cp\u003eAllowed formats for {@code TemporalAmount} are durations such as \"1 hour\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \"3 weeks\", \"4 days\", \"1 month\", \"2 years\", etc."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param userInput User provided input in {@code String} format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code TemporalAmount} object based on given {@code userInput}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If {@code userInput} is not of the correct format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static TemporalAmount parseDuration(String userInput) throws DuchessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e inputs \u003d new ArrayList\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (inputs.size() \u003c 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_SNOOZE_DURATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        int value \u003d Integer.parseInt(inputs.get(0).trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        switch (inputs.get(1).trim().toLowerCase()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"hour\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"hours\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Duration.ofHours(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"days\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Period.ofDays(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"weeks\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Period.ofWeeks(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"months\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Period.ofMonths(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"years\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Period.ofYears(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_UNIT_OF_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code String} object based on the given {@code userInput}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \u003cp\u003eAllowed formats for {@code TemporalAmount} are durations such as \"1 hour\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \"3 weeks\", \"4 days\", \"1 month\", \"2 years\", etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param userInput User provided input in {@code String} format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return {@code String} object based on given {@code userInput}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If {@code userInput} is not of the correct format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static String parseDurationToString(String userInput) throws DuchessException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e inputs \u003d new ArrayList\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s\", 2)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (inputs.size() \u003c 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_SNOOZE_DURATION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        int value \u003d Integer.parseInt(cleanString(inputs.get(0)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        switch (cleanString(inputs.get(1))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"hour\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"hours\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return value + \" hour\" + (value \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"days\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return value + \" day\" + (value \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"weeks\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return value + \" week\" + (value \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"months\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return value + \" month\" + (value \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        case \"years\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return value + \" year\" + (value \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(ERROR_INVALID_UNIT_OF_TIME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 104
    }
  },
  {
    "path": "src/main/java/duke/util/Frequency.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Frequency} enum contains the various frequencies for recurring tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public enum Frequency {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    DAILY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    WEEKLY,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    FORTNIGHTLY,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    MONTHLY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 11
    }
  },
  {
    "path": "src/main/java/duke/util/FrequencyParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static duke.util.MagicStrings.ERROR_WRONG_FREQUENCY_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code FrequencyParser} is a helper class with static methods to parse"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * user provided inputs into {@code Frequency} objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class FrequencyParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a {@code Frequency} object based on given {@code userInput} in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code String} format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \u003cp\u003eThe formats accepted for the frequency include \"daily\", \"day\", \"week\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * \"biweekly\", \"fortnightly\", etc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param userInput Given user input in {@code String} format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return A {@code Frequency} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the given {@code userInput} is of the wrong format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static Frequency parseFrequency(String userInput) throws DuchessException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isContainingDailyKeywords(userInput)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Frequency.DAILY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isContainingFortnightlyKeywords(userInput)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Frequency.FORTNIGHTLY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isContainingWeeklyKeywords(userInput)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Frequency.WEEKLY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (isContainingMonthlyKeywords(userInput)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            return Frequency.MONTHLY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        throw new DuchessException(ERROR_WRONG_FREQUENCY_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static boolean isContainingDailyKeywords(String userInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return userInput.contains(\"day\") || userInput.contains(\"daily\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static boolean isContainingFortnightlyKeywords(String userInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isContainingBigWords \u003d userInput.contains(\"biweek\") || userInput.contains(\"fortnight\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        boolean isContainingSmallWords \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                userInput.contains(\"week\") \u0026\u0026 (userInput.contains(\"two\") || userInput.contains(\"2\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return isContainingBigWords || isContainingSmallWords;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static boolean isContainingWeeklyKeywords(String userInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return userInput.contains(\"week\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static boolean isContainingMonthlyKeywords(String userInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return userInput.contains(\"month\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 57
    }
  },
  {
    "path": "src/main/java/duke/util/MagicStrings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Constants} class contains all magic constants."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class MagicStrings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // Date time helper strings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String DATE_TIME_OVERDUE \u003d \" [OVERDUE]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String DATE_TIME_TODAY \u003d \"Today \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String DATE_TIME_TOMORROW \u003d \"Tomorrow \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String DATE_TIME_YESTERDAY \u003d \"Yesterday \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // Error messages"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_COMMAND_MISSING_INDEX \u003d \"Your command needs the position of the task to \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"operate with!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_COMMAND_TOO_MANY_INDICES \u003d \"Your command can only work with a single index!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_DEADLINE_MISSING_CONTENT \u003d \"Your deadline content cannot be empty! \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Type help if you need help.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_DEADLINE_MISSING_DEADLINE \u003d \"I don\u0027t know when your deadline is! \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Please use /by [deadline here].\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_EVENT_MISSING_CONTENT \u003d \"Your event content cannot be empty! \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Type help if you need help.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_EVENT_MISSING_TIME_FRAME \u003d \"I don\u0027t know when is your event! \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Please use /at [time here].\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_INDEX_OUT_OF_BOUNDS \u003d \"You\u0027re referring to a task which does not exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"I don\u0027t see what I can do with what you just told me.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //    public static final String ERROR_INVALID_FILE_PATH \u003d \"Your file path is invalid. A new JSON file will \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //            + \"be used for saving.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_INVALID_SNOOZE_DURATION \u003d \"Your snooze duration is not valid! Something \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"like \u0027/for 3 days\u0027 would work\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_INVALID_UNIT_OF_TIME \u003d \"Your unit of time is not recognised! Please use \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"hours/days/weeks/months/years.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_FAIL_TO_LOAD \u003d \"Failed to load save file! Creating new save file.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_FAIL_TO_LOAD_AND_SAVE \u003d \"Failed to load save file! \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"You will also not be able to save.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_FAIL_TO_SAVE \u003d \"Facing difficulties saving your tasks right now.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_RECURRING_TASK_MISSING_DEADLINE \u003d \"This recurring task \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"seem to have no deadline!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_SNOOZING_NON_DEADLINE \u003d \"You can\u0027t snooze a task with no deadline!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_SORTING_EMPTY_LIST \u003d \"You don\u0027t have any tasks... Sort yourself out first.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_TASK_ALREADY_COMPLETED \u003d \"You have already completed this task!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_TASK_CREATED_BEFORE \u003d \"You have an existing task with the same information!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_TODO_MISSING_CONTENT \u003d \"Your todo content cannot be empty! \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Type help if you need help.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_WRONG_DATE_FORMAT \u003d \"Your date is of the wrong format.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Type help to view the accepted formats.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String ERROR_WRONG_FREQUENCY_FORMAT \u003d \"Your frequency is of the wrong format.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            + \"Type help to view the accepted formats.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    // GSON helper strings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_DESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_FREQUENCY \u003d \"frequency\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_IS_COMPLETED \u003d \"isCompleted\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_TIME_FRAME \u003d \"timeFrame\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static final String GSON_ATTR_REPEAT_END_TIME \u003d \"repeatEndTime\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 59
    }
  },
  {
    "path": "src/main/java/duke/util/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code Pair} class is a helper class that keeps two different"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * pieces of data together."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cU\u003e Type of first element."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cT\u003e Type of second element."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class Pair\u003cU, T\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private U first;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private T second;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Initialises an instance of {@code Pair}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param first  The first element of the {@code Pair}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param second The second element of the {@code Pair}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public Pair(U first, T second) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the first element of the {@code Pair}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The first element."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public U getFirst() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.first;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns the second element of the {@code Pair}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return The second element."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public T getSecond() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return this.second;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 42
    }
  },
  {
    "path": "src/main/java/duke/util/QuadFunction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * Functional interface for a function object that takes in four arguments to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * return a single return value."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cT1\u003e First generic type of QuadFunction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cT2\u003e Second generic type of QuadFunction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cT3\u003e Third generic type of QuadFunction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * @param \u003cT4\u003e Fourth generic type of QuadFunction"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public interface QuadFunction\u003cT1, T2, T3, T4\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Returns a value based on the provided four parameters and the function"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * implementing this interface. Throws a {@code DuchessException}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param t1 First parameter of QuadFunction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param t2 Second parameter of QuadFunction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param t3 Third parameter of QuadFunction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param t4 Fourth parameter of QuadFunction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return String result"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException Thrown by implementations of this function."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    String apply(T1 t1, T2 t2, T3 t3, T4 t4) throws DuchessException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 28
    }
  },
  {
    "path": "src/main/java/duke/util/StringCleaner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * The {@code StringCleaner} class is a helper class that cleans {@code String}s"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * according to the usage requirements."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class StringCleaner {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Cleans and returns input string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param string Raw string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Cleaned string with leading and trailing whitespaces removed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static String cleanString(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return string.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Cleans and returns input string in lowercase."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @param string Raw string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @return Cleaned lowercase string with leading and trailing whitespaces removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static String cleanAndLowerString(String string) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        return string.trim().toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"380.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "      \u003cHBox fx:id\u003d\"speechBubble\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"speech-bubble\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "              \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 33
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.control.ToggleButton?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003cfx:root prefHeight\u003d\"650.0\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"window-top-bar\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cLabel text\u003d\"Duchess\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cToggleButton fx:id\u003d\"themeToggle\" mnemonicParsing\u003d\"false\" styleClass\u003d\"theme-toggle\" text\u003d\"Toggle Theme\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003c/ToggleButton\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" focusTraversable\u003d\"false\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefWidth\u003d\"372.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" focusTraversable\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" minHeight\u003d\"-Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter text here to get started e.g. help\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 42
    }
  },
  {
    "path": "src/test/java/duke/exception/DuchessExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code DuchessException}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DuchessExceptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the constructor of {@code DuchessException}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"Exception! Failed to succeed.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new DuchessException(\"Exception! Failed to succeed.\").getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 19
    }
  },
  {
    "path": "src/test/java/duke/io/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code Parser}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code parse} method of the {@code Parser} class when valid input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * is given."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If command is not recognized."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void parse_validCommand_success() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.TODO, Parser.parse(\"todo go for a run\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.EVENT, Parser.parse(\"event celebrate cny /at 2-4pm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.DEADLINE, Parser.parse(\"deadline finish ip deliverable /by wednesday\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.LIST, Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.BYE, Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.DONE, Parser.parse(\"done 5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.FIND, Parser.parse(\"find run\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.DELETE, Parser.parse(\"delete 2\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.HELP, Parser.parse(\"help\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(Command.SNOOZE, Parser.parse(\"snooze 3 /for 3 weeks\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code parse} method of the {@code Parser} class when invalid input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * is given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void parse_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(Command.TODO, Parser.parse(\"random command here!\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"I don\u0027t see what I can do with what you just told me.\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 47
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code Storage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code load} method when the directory of the save file does not"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void load_folderDoesNotExist_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Storage storageOne \u003d new Storage(\"storageTestOne/data.json\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            storageOne.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"Failed to load save file! Creating new save file.\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            File testFolder \u003d new File(\"storageTestOne\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertTrue(testFolder.exists() \u0026\u0026 testFolder.isDirectory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code load} method when the save file itself does not exist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void load_saveFileDoesNotExist_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            File testFolder \u003d new File(\"storageTestTwo\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (!testFolder.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                boolean isDirectoryCreated \u003d testFolder.mkdir();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                if (!isDirectoryCreated) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                    throw new DuchessException(\"Folder failed to be created!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Storage storageTwo \u003d new Storage(\"storageTestTwo/data.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            storageTwo.load();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"Failed to load save file! Creating new save file.\", e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code load} method when the save file exists."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws IOException      If an error is encountered when writing to the test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *                          data.json."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the storage fails to load the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void load_saveFileExists_success() throws IOException, DuchessException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        File testFolder \u003d new File(\"storageTestThree\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (!testFolder.exists()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            boolean isDirectoryCreated \u003d testFolder.mkdir();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (!isDirectoryCreated) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                throw new DuchessException(\"Folder failed to be created!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task[] taskArray \u003d new Task[3];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArray[0] \u003d new ToDo(\"Task number 1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArray[1] \u003d new Event(\"Task number 2\", \"2-4pm\", true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArray[2] \u003d new Deadline(\"Task number 3\", LocalDateTime.now());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(\"storageTestThree/data.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        fileWriter.write(gson.toJson(taskArray, Task[].class));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Storage storageThree \u003d new Storage(\"storageTestThree/data.json\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d storageThree.load();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(3, taskArrayList.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(taskArray[i].getDescription(), taskArrayList.get(i).getDescription());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(taskArray[i].isCompleted(), taskArrayList.get(i).isCompleted());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(taskArrayList.get(1) instanceof Event);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(((Event) taskArray[1]).getTimeFrame(), ((Event) taskArrayList.get(1)).getTimeFrame());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(taskArrayList.get(2) instanceof Deadline);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(((Deadline) taskArray[2]).getDeadline(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                ((Deadline) taskArrayList.get(2)).getDeadline());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code load} and {@code save} methods for storage initialised with"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * nested directories as the file path."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the storage fails to load or save the file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void loadAndSave_longFilePathWithoutFolder_exceptionThrown() throws DuchessException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new ToDo(\"Task number 1\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new Event(\"Task number 2\", \"2-4pm\", true));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new Deadline(\"Task number 3\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Storage storageFour \u003d new Storage(\"storageTestFour/oneMoreFolder/data.json\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            storageFour.load();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"Failed to load save file! Creating new save file.\", e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            storageFour.save(taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            File saveFile \u003d new File(\"storageTestFour/oneMoreFolder/data.json\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertTrue(saveFile.exists());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code save} methods when an invalid file path is given."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void save_invalidFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Storage storageFive \u003d new Storage(\"storageTestFive/data.json\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            storageFive.save(taskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"Facing difficulties saving your tasks right now.\", e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code save} method when a valid file path is given."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the storage fails to save."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void save_validFilePath_success() throws DuchessException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        File folder \u003d new File(\"storageTestSix\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            boolean isDirectoryCreated \u003d folder.mkdir();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            if (!isDirectoryCreated) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                throw new DuchessException(\"Folder failed to be created!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new ToDo(\"Go for a run\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new Event(\"Movie\", \"5-7pm\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskList.addTask(new Deadline(\"Exercise\", LocalDateTime.now(), true));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Storage storageSix \u003d new Storage(\"storageTestSix/data.json\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        storageSix.save(taskList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList loadedTaskList \u003d new TaskList(storageSix.load());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(3, loadedTaskList.size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(taskList.getTask(i).getDescription(), loadedTaskList.getTask(i).getDescription());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(taskList.getTask(i).isCompleted(), loadedTaskList.getTask(i).isCompleted());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(loadedTaskList.getTask(1) instanceof Event);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(((Event) taskList.getTask(1)).getTimeFrame(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                ((Event) loadedTaskList.getTask(1)).getTimeFrame());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(loadedTaskList.getTask(2) instanceof Deadline);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(((Deadline) taskList.getTask(2)).getDeadline(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                ((Deadline) loadedTaskList.getTask(2)).getDeadline());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Cleans up folders created when testing Storage."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If directory fails to be deleted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public static void cleanUp() throws DuchessException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cString\u003e folders \u003d new ArrayList\u003c\u003e(Arrays.asList(\"storageTestOne\", \"storageTestTwo\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                \"storageTestThree\", \"storageTestFour\", \"storageTestSix\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        deleteDirectory(\"storageTestFour/oneMoreFolder\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        for (String folder : folders) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            deleteDirectory(folder);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    private static void deleteDirectory(String path) throws DuchessException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Path rootPath \u003d Paths.get(path);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try (Stream\u003cPath\u003e walk \u003d Files.walk(rootPath)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            walk.sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            throw new DuchessException(\"Failed to delete directory!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 205
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code Deadline}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the inheritance of {@code Deadline} from its superclass {@code Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testInheritance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Event pizza!\", LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"Event pizza!\", testDeadline.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(testDeadline.isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testDeadline.completeTask();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(testDeadline.isCompleted());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(new Deadline(\"Already completed\", LocalDateTime.now(), true).isCompleted());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the overridden {@code toString()} method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //    public void testToString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //        assertEquals(\"[D][\\u2718] Deadline!! (by: Dec 30 1900 6:00 pm [OVERDUE])\", // cross mark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //                new Deadline(\"Deadline!!\", LocalDateTime.of(1900, 12, 30, 18, 0)).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //        assertEquals(\"[D][\\u2713] brunch (by: Today 5:00 pm)\", // tick mark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //                new Deadline(\"brunch\", LocalDate.now().atTime(17, 0), true).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 38
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the inheritance of {@code Event} from its superclass {@code Task}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testInheritance() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Event testEvent \u003d new Event(\"Event pizza!\", \"3-5pm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"Event pizza!\", testEvent.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(testEvent.isCompleted());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testEvent.completeTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(testEvent.isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(new Event(\"Already completed\", \"Random time\", true).isCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the overridden {@code toString()} method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[E][\\u2718] New Event (at: Home)\", // cross mark"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new Event(\"New Event\", \"Home\").toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[E][\\u2713] Go for a run (at: 3-5pm)\", // tick mark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new Event(\"Go for a run\", \"3-5pm\", true).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 36
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.exception.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code TaskList}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the default empty constructor of {@code TaskList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testEmptyConstructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, testTaskList.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the non-empty constructor of {@code TaskList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testNonEmptyConstructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArrayList.add(new ToDo(\"Item 1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArrayList.add(new ToDo(\"Item 2\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(2, testTaskList.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code addTask} method of {@code TaskList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, testTaskList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.addTask(new ToDo(\"Hello World\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(1, testTaskList.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code getTask} method of {@code TaskList} when the list is not"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If index is out of bounds."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void getTask_nonEmptyTaskList_success() throws DuchessException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new ToDo(\"Placeholder\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(testTask, testTaskList.getTask(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code getTask} method of {@code TaskList} when the list is empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void getTask_emptyTaskList_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            testTaskList.getTask(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"You\u0027re referring to a task which does not exist!\", e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code removeTask} method of {@code TaskList} when the list is not"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the index is out of bounds."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void removeTask_nonEmptyTaskList_success() throws DuchessException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new ToDo(\"Placeholder\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, testTaskList.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(1, testTaskList.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.removeTask(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, testTaskList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code removeTask} method of {@code TaskList} when the list is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void removeTask_emptyTaskList_exceptionThrown() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            testTaskList.removeTask(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"You\u0027re referring to a task which does not exist!\", e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code completeTask} method of {@code TaskList} when the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code Task} in question is incomplete."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * @throws DuchessException If the index is out of bounds."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void completeTask_taskNotCompleted_success() throws DuchessException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new ToDo(\"Testing using this!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(testTask.isCompleted());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.completeTask(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(testTask.isCompleted());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code completeTask} method of {@code TaskList} when the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * {@code Task} in question is already complete."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void completeTask_taskAlreadyCompleted_exceptionThrown() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            Task testTask \u003d new ToDo(\"Testing using this!\", true);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertTrue(testTask.isCompleted());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            testTaskList.completeTask(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "            assertEquals(\"You have already completed this task!\", e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code getTaskArray()} method of {@code TaskList}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testGetTaskArray() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        taskArrayList.add(new ToDo(\"No!!\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(taskArrayList, testTaskList.getTaskArray());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code find} method of {@code TaskList}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testFindSearchWords() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new ToDo(\"Placeholder\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cPair\u003cTask, Integer\u003e\u003e positiveResults \u003d testTaskList.find(\"place\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(1, positiveResults.size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(testTask, positiveResults.get(0).getFirst());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, positiveResults.get(0).getSecond());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ArrayList\u003cPair\u003cTask, Integer\u003e\u003e negativeResults \u003d testTaskList.find(\"hello\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(0, negativeResults.size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 170
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code getDescription()} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testGetDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"This is a test description\", new Task(\"This is a test description\").getDescription());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"Same here\", new Task(\"Same here\", true).getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code isCompleted()} method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testIsCompleted() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(new Task(\"Test description\").isCompleted());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(new Task(\"Hello world\", true).isCompleted());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the {@code toggleIsCompleted()} method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testToggleIsCompleted() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new Task(\"Task description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(testTask.isCompleted());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTask.completeTask();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(testTask.isCompleted());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the overridden {@code toString()} method."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        Task testTask \u003d new Task(\"What\u0027s up world!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[\\u2718] What\u0027s up world!\", testTask.toString()); // cross mark"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testTask.completeTask();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[\\u2713] What\u0027s up world!\", testTask.toString()); // tick mark"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 54
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " * JUnit test class for {@code ToDo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the inheritance of {@code ToDo} from its superclass {@code Task}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testInheritance() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        ToDo testToDo \u003d new ToDo(\"Hello world!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"Hello world!\", testToDo.getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertFalse(testToDo.isCompleted());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        testToDo.completeTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(testToDo.isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertTrue(new ToDo(\"Already completed\", true).isCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     * Tests the overridden {@code toString()} method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[T][\\u2718] Another test ToDo\", // cross mark"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new ToDo(\"Another test ToDo\").toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "        assertEquals(\"[T][\\u2713] Go for a run\", // tick mark"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "                new ToDo(\"Go for a run\", true).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 36
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tFailed to load save file! Creating new save file."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t-----------------------------------------------------------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tHello from"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t _____             _"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t|  __ \\           | |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t| |  | |_   _  ___| |__   ___  ___ ___"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t| |  | | | | |/ __| \u0027_ \\ / _ \\/ __/ __|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t| |__| | |_| | (__| | | |  __/\\__ \\__ \\"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t|_____/ \\__,_|\\___|_| |_|\\___||___/___/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tMy name is Duchess, as you can see above."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tHow may I help you?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tStop causing me trouble..."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI don\u0027t see what I can do with what you just told me."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAs always, needing someone to keep track of things for you..."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[T][✘] Go for a run"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI\u0027ve already tracked 1 task for you."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAs always, needing someone to keep track of things for you..."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[E][✘] Go for CS2103 class (at: Friday 2-4pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI\u0027ve already tracked 2 tasks for you."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAs always, needing someone to keep track of things for you..."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI\u0027ve already tracked 3 tasks for you."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tSighs... you never remember what you say, don\u0027t you."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tYou said these:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✘] Go for a run"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t2.\t[E][✘] Go for CS2103 class (at: Friday 2-4pm)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t3.\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tOh? You actually completed something? Impressive..."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tSighs... you never remember what you say, don\u0027t you."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tYou said these:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t2.\t[E][✘] Go for CS2103 class (at: Friday 2-4pm)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t3.\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAs always, needing someone to keep track of things for you..."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[T][✘] Commit these changes"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI\u0027ve already tracked 4 tasks for you."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tSighs... you never remember what you say, don\u0027t you."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tYou said these:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t2.\t[E][✘] Go for CS2103 class (at: Friday 2-4pm)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t3.\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t4.\t[T][✘] Commit these changes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAs always, needing someone to keep track of things for you..."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[D][✘] Test this program (by: Feb 10 4:00 pm)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI\u0027ve already tracked 5 tasks for you."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tSighs... you never remember what you say, don\u0027t you."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tYou said these:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t2.\t[E][✘] Go for CS2103 class (at: Friday 2-4pm)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t3.\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t4.\t[T][✘] Commit these changes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t5.\t[D][✘] Test this program (by: Feb 10 4:00 pm)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tIs this the first time I\u0027m talking with you?"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI can\u0027t do everything for you, you know? Here\u0027s what I do:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t-----------------------------------------------------------------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tlist \t\t\t\t\t\t\tView current tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\ttodo [desc.] \t\t\t\t\tCreate ToDo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tevent [desc.] /at [time] \t\tCreate Event."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tdeadline [desc.] /by [time] \tCreate Deadline."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tdone [index] \t\t\t\t\tComplete task at index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tfind [word(s)] \t\t\t\t\tFind tasks with said word(s)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tdelete [index] \t\t\t\t\tDelete task at index."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tbye \t\t\t\t\t\t\tBid farewell (sounds great!)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\thelp \t\t\t\t\t\t\tSee this message again."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t-----------------------------------------------------------------"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tAccepted time formats are:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\td/m/YY \t\t\t\t\t\t\td/m/YY HHmm"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tToday/Tonight/Tomorrow \t\t\tMonday/Tuesday etc."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tNot bad, I found the following:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t\t[REF INDEX FOR DELETE/DONE: 1]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tGreat! One less thing for me to track for you."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t[E][✘] Go for CS2103 class (at: Friday 2-4pm) [DELETED]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tNow I\u0027m tracking 4 tasks for you."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tSighs... you never remember what you say, don\u0027t you."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tYou said these:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t1.\t[T][✓] Go for a run"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t2.\t[D][✘] Finish Week 2 IP (by: Thu 5:00 pm)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t3.\t[T][✘] Commit these changes"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t\t4.\t[D][✘] Test this program (by: Feb 10 4:00 pm)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tStop causing me trouble..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tI don\u0027t see what I can do with what you just told me."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tBye, is it? Shoo shoo then."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\tDon\u0027t need to worry, I\u0027ll remember what you told me today."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "\t━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 120
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "todo Go for a run"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "event Go for CS2103 class /at Friday 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "deadline Finish Week 2 IP /by Thursday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "todo Commit these changes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "deadline Test this program /by 10/2/20 1600"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "help"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "find run"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "Goodbye"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "if [ ! -d \"../bin\" ]; then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]; then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  rm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "if [ -e \"./data\" ]; then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  rm -r data"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "if"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e./sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "    javac -cp \"../src:./gson-2.8.6.jar\" -Xlint:none -d ../bin @./sources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "java -cp \"../bin:./gson-2.8.6.jar\" duchess.Duke \u003cinput.txt \u003eACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "if diff ACTUAL.TXT EXPECTED.TXT; then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 38
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/ui/Ui.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/util/Pair.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/util/DateTimeStringFormatter.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/util/DateTimeParser.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/util/QuadFunction.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/io/Parser.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/storage/Storage.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/task/TaskList.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/task/Event.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/task/Task.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/task/Deadline.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/task/ToDo.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/command/CommandHandler.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/Duke.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhuhanming"
        },
        "content": "../src/main/java/duchess/exception/DuchessException.java"
      }
    ],
    "authorContributionMap": {
      "zhuhanming": 16
    }
  }
]
