{
  "authorDailyContributionsMap": {
    "zhuhanming": [
      {
        "insertions": 118,
        "deletions": 35,
        "date": "2020-01-20",
        "commitResults": [
          {
            "hash": "286cb8be30ff090ad90a80c15e7f30ccfeb6657d",
            "messageTitle": "chore: update build.gradle to point to correct main class",
            "messageBody": "Changed build.gradle default main class to Duke. Now builds successfully with command ./gradlew run.\n",
            "insertions": 3,
            "deletions": 3
          },
          {
            "hash": "081c419f233fe671715f99991f69aca1b61bbf42",
            "messageTitle": "chore: add checkstyle and shadow to build.gradle along with junit dependency",
            "messageBody": "Added recommended CheckStyle and Shadow plugins, and added ShadowJar configurations as well. Included the recommended JUnit dependencies and created test folder in src to go along with it.\n\nStill missing tests. Will be writing the tests later.\n",
            "insertions": 17,
            "deletions": 0
          },
          {
            "hash": "77f6badc968f8d865710eac0d6ab689a85aef840",
            "messageTitle": "feat: build level-1 features - greet, echo, exit",
            "messageBody": "Changed the name to Duchess and separated the functions into introduction, echo and goodbye functions of the Duchess class. The main function now initialises a Duchess object before using it to execute actions.\n\nTo do: perhaps abstract the whole running process into a function of Duchess as well.\n",
            "insertions": 39,
            "deletions": 11
          },
          {
            "hash": "820192880007d880a9073dab5c20b8a5e5b5964d",
            "messageTitle": "refactor: shift logic in main function to the run instance method for duchess",
            "messageBody": "Makes more sense for the duchess to handle the logic of taking in inputs and processing them accordingly.\n\nNext step may be to separate the main function into a public class of its own.\n",
            "insertions": 9,
            "deletions": 5
          },
          {
            "hash": "34eb144c18d21b81ba735cab5f101c60e7ba1155",
            "messageTitle": "refactor: shift public main function to a public Main class",
            "messageBody": "Makes more sense for a Main class to handle the initialisation of a Duchess instance and making it run.\n\nMeets Level-1 requirements.\n",
            "tags": [
              "Level-1"
            ],
            "insertions": 9,
            "deletions": 8
          },
          {
            "hash": "0a761cc09e5728be99ca72d325225ed2e8d41acb",
            "messageTitle": "feat: build level-2 features - add, list",
            "messageBody": "Currently using an ArrayList\u003cString\u003e to contain the added messages. Extended on existing methods and created new methods to handle the new cases. Also abstracted the input reading to a separate function. Plus added more personality to the \u0027chatbot\u0027\n\nIssue: need to fix default syntax with the switch case to follow the guidelines proposed. Need to look into creating a special print method as well to make the replies more recognizable.\n",
            "insertions": 41,
            "deletions": 8
          }
        ]
      },
      {
        "insertions": 143,
        "deletions": 68,
        "date": "2020-01-22",
        "commitResults": [
          {
            "hash": "b4e50ae9884e21bfbe2bd89d009999908c2705f6",
            "messageTitle": "style: add indentation to duchess responses",
            "messageBody": "Added tabbing in front of all replies to make the replies more visible and distinguishable from user input.\n\nTo fix: code style\n",
            "insertions": 9,
            "deletions": 9
          },
          {
            "hash": "7377442bf709666c39111ba2de0d538d5903b42b",
            "messageTitle": "refactor: fix up code style especially for switch case",
            "messageBody": "Fixed indentation and code style issues based on CS2103 guidelines, namely the switch case default indentation.\n",
            "tags": [
              "Level-2"
            ],
            "insertions": 16,
            "deletions": 16
          },
          {
            "hash": "926f9b373921f6d6852013518795822966de7003",
            "messageTitle": "feat: add task class",
            "messageBody": "Added a class Task to manage task description and completion status, and encapsulate related methods and fields.\n\nTo do: incorporate Tasks into the original Duchess class.\n",
            "tags": [
              "A-Classes"
            ],
            "insertions": 21,
            "deletions": 0
          },
          {
            "hash": "70180084653e33c04ab8deee1ac562c361f7678f",
            "messageTitle": "fix: change task access modifiers and change printTask to return string",
            "messageBody": "Made Task methods public and changed printTask() to getTaskInformation() instead, which returns a String instead of printing.\n\nTo do: incorporate into Duchess\n",
            "insertions": 3,
            "deletions": 3
          },
          {
            "hash": "270ead21cbc74113d3305be9e58b19ad16b7cb2e",
            "messageTitle": "feat+refactor: incorporate Task class into Duchess",
            "messageBody": "Modified existing methods to use Task instead of the original String. Slight modificiation to access modifiers and field naming conventions as well.\n\nTo do: Add ability to process the done command from users.\n",
            "insertions": 8,
            "deletions": 8
          },
          {
            "hash": "5f6cf310423fedf21d840d02b6ac7c2cbd6c48be",
            "messageTitle": "style: change cross for incomplete to the correct unicode character",
            "messageBody": "The unicode was previously ❌, now it\u0027s ✘ as required.\n",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "07c7ccad713dc3f042455b7b3ecd3c19dcd2715d",
            "messageTitle": "feat: add done functionality",
            "messageBody": "Added functionality to Duchess to allow completion of tasks. Meets Level-3 requirements.\n",
            "tags": [
              "Level-3"
            ],
            "insertions": 21,
            "deletions": 4
          },
          {
            "hash": "0fab6a9fefe87c191ed1a34741ae2723e64c31cb",
            "messageTitle": "refactor: change implementation of methods of task",
            "messageBody": "After consulting the Partial Solutions on the website, realised that the implementation of some of my existing methods can be improved. Changed getTaskInformation to toString, which makes more sense. Abstracted out the status icon generation into a separate method as well. However, kept toggleIsCompleted the same to allow for future extension, e.g. need to set Task as undone.\n\nTo do: create three more classes that extends from Task as per Level-4 requirements.\n",
            "insertions": 34,
            "deletions": 21
          },
          {
            "hash": "64409fdbafc2a94d9851053d72be8bb4f786e6e8",
            "messageTitle": "feat: add deadline class",
            "messageBody": "Created Deadline class to extend from Task. Allows for the addition of a deadline. Overrides Task\u0027s toString() to include the Deadline type and deadline.\n",
            "insertions": 11,
            "deletions": 2
          },
          {
            "hash": "168aa309272d72cc5ddff3a544d606f3e49bb29c",
            "messageTitle": "feat: add event class",
            "messageBody": "Created Event class to extend from Task. Allows for the addition of a duration. Overrides Task\u0027s toString() to include the Event type and duration.\n",
            "insertions": 11,
            "deletions": 2
          },
          {
            "hash": "83a800232fee8b858abf52b3e09dbf32e653a1e1",
            "messageTitle": "feat: add todo class",
            "messageBody": "Created ToDo class to extend from Task. Overrides Task\u0027s toString() to include the ToDo type.\n\nTo do: incorporate the three children classes into Duchess\u0027 implementation.\n",
            "tags": [
              "A-Inheritance"
            ],
            "insertions": 8,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 262,
        "deletions": 89,
        "date": "2020-01-23",
        "commitResults": [
          {
            "hash": "3c64b681c820e05647bf25cde6bec520a7e244d1",
            "messageTitle": "feat: add todos, events and deadlines for duchess",
            "messageBody": "Added support for ToDo, Event and Deadline creation. Also added handling of unrecognized inputs with the echo() function. Achieves Level-4 requirements.\n\nTo do: just realised that I am recursively calling the awaitInput() function. May be wiser to refactor the awaitInput() function to do this process iteratively instead.\n",
            "tags": [
              "Level-4"
            ],
            "insertions": 33,
            "deletions": 18
          },
          {
            "hash": "960bd0a348c985776cb6cb405bad6d0fbbe0fb8a",
            "messageTitle": "test: add text-ui-test",
            "messageBody": "Added text-ui-test to the project. The test tests the creation of all three types of tasks, as well as completion, listing, and unrecognized command handling.\n\nTo do: fix up Duchess introduce() method such that an error is not thrown due to the difference in blank spaces.\n",
            "insertions": 85,
            "deletions": 0
          },
          {
            "hash": "cf22a595953fe660e9f6496bbd7bbb99d7d0fa4e",
            "messageTitle": "fix: remove trailing white spaces in duchess introduce() method",
            "messageBody": "Fix issue where trailing white spaces were causing differences in the diff between ACTUAL.txt and EXPECTED.txt. Did not want to use diff -b, hence fixed up the introduce() method instead.\n",
            "tags": [
              "A-TextUiTesting"
            ],
            "insertions": 3,
            "deletions": 3
          },
          {
            "hash": "4186280271ea869013ed0f3cec71a15e138bbbd8",
            "messageTitle": "feat: add custom exception DuchessException",
            "messageBody": "Added DuchessException class to help handle exceptions that occur. Simply by passing in the error message, the message is formatted accordingly.\n\nTo do: to modify Duchess to use DuchessException.\n",
            "tags": [
              "A-Exceptions"
            ],
            "insertions": 5,
            "deletions": 0
          },
          {
            "hash": "d3be16b3dcc732d6acd66ed66c5dd83ebc4ff9ef",
            "messageTitle": "feat+refactor: refactor duchess awaitInput and incorporate DuchessException",
            "messageBody": "Changed implementation of awaitInput() to be iterative instead of recursive. Added use of DuchessExceptions to handle the following cases:\n\nNo deadline /by or event /at.\n\nNo description for any task.\n\nCompletion of task that does not exist/out of range\n\nUnrecognized input was already handled, no change to that implementation. This meets Level 5 requirements.\n",
            "tags": [
              "Level-5"
            ],
            "insertions": 70,
            "deletions": 42
          },
          {
            "hash": "b5f960656b4ab1e4d7904d1c9ca5e7e2e6015346",
            "messageTitle": "refactor: change arrays to ArrayList in Duchess",
            "messageBody": "Was originally only using ArrayList for the task list. Changed arrays used in intermediate steps to ArrayList as well.\n",
            "tags": [
              "A-Collections"
            ],
            "insertions": 14,
            "deletions": 13
          },
          {
            "hash": "23d5024620ae28161f6a775425931e5b70543bf5",
            "messageTitle": "perf: change access modifiers to increase security",
            "messageBody": "Changed a few access modifiers to be more restrictive.\n",
            "insertions": 4,
            "deletions": 4
          },
          {
            "hash": "41fb0f5e4b42ab489200eff475b1ef02b4509d02",
            "messageTitle": "feat: add delete functionality",
            "messageBody": "Added ability to delete task based on index as per Level 6 requirements.\n\nTo do: clean up the code in Duchess.\n",
            "tags": [
              "Level-6"
            ],
            "insertions": 21,
            "deletions": 1
          },
          {
            "hash": "ed5da75e7cf8bde00da0ea064d4acbf1b96fde37",
            "messageTitle": "feat: add CommandType enum to better handle user input",
            "messageBody": "Use CommandType enum to handle user inputs. This includes the handling of unrecognized user input - it will no longer fall to the default case, and an exception is thrown immediately.\n\nTo do: clean up methods and abstract some logic away. Currently too much logic is packed into Duchess class.\n",
            "tags": [
              "A-Enums"
            ],
            "insertions": 27,
            "deletions": 8
          }
        ]
      },
      {
        "insertions": 27,
        "deletions": 10,
        "date": "2020-01-25",
        "commitResults": [
          {
            "hash": "5ab3eb1e469fa341ddd02cd081a6c1268f0e25bf",
            "messageTitle": "test: change runtest.sh to find all java files even in subdirectories",
            "messageBody": "Prior implementation of runtest.sh will only compile files in the first level directory. Changed it to use find to first find all java files then compile them accordingly.\n",
            "insertions": 19,
            "deletions": 6
          },
          {
            "hash": "73df0476b7160f9fb20d66b7cf9cb6514b699d37",
            "messageTitle": "perf: add handling of empty list",
            "messageBody": "Now added a custom response when the user asks for list but the list of tasks is currently empty.\n",
            "insertions": 8,
            "deletions": 4
          }
        ]
      },
      {
        "insertions": 230,
        "deletions": 15,
        "date": "2020-01-29",
        "commitResults": [
          {
            "hash": "a419e48be7b90ead2243b1ccd09d7464564efa2e",
            "messageTitle": "chore: add gson dependency to build.gradle",
            "messageBody": "Looking into using GSON for saving tasks into JSON format. Experimental stage at the moment.\n",
            "insertions": 1,
            "deletions": 0
          },
          {
            "hash": "afe573090b3c8a027c1b2edf85613a2351f7fae2",
            "messageTitle": "feat: add overloaded constructors for task and subclasses of task",
            "messageBody": "To enable to construction of completed Tasks directly from saved data, the constructors for Task and its subclasses Event, ToDo, Deadline have been overloaded.\n\nTo do: build Storage to help save and load data.\n",
            "insertions": 19,
            "deletions": 0
          },
          {
            "hash": "42b1ece60978d7575100c2499c58572412d55925",
            "messageTitle": "feat: add Storage.java",
            "messageBody": "Storage.java helps to save the tasks into JSON upon every change, and helps to load the tasks from the JSON file as well upon start up of the program.\n\nTo do: Use Storage in Duchess implementation.\n",
            "insertions": 54,
            "deletions": 0
          },
          {
            "hash": "aa5362a66500b2967a443dc15bb5173bbd926f40",
            "messageTitle": "feat: use Storage in Duchess",
            "messageBody": "Modified Duchess to use Storage upon launch and upon every change to the list of tasks. Meets Level-7 requirements as of now.\n",
            "insertions": 9,
            "deletions": 1
          },
          {
            "hash": "eddf80c6c4af846632661ddf076aa7a9a5a1ada4",
            "messageTitle": "fix: stop task from being uncompleted through the done command",
            "messageBody": "Added an additional check to ensure that the task is uncompleted before allowing user to complete it via the done command.\n\nFuture extension: allow user to say undone or some equivalent command to mark a task as incomplete.\n",
            "insertions": 7,
            "deletions": 0
          },
          {
            "hash": "2194804be572d80f53a176b5dcceb70ddba9d27e",
            "messageTitle": "feat: change deadline implementation to use localdatetime",
            "messageBody": "Change Deadline to accept LocalDateTime instead of String for deadline. Changed the appropriate toString() method as well.\n\nTo do: change Duchess to utilise new implementation of Deadline.\n",
            "insertions": 11,
            "deletions": 3
          },
          {
            "hash": "cadad287d5a34f038807cd3fe68dfae32929ea93",
            "messageTitle": "feat: use localdatetime in duchess",
            "messageBody": "Changed implementation for Deadline creation to use LocalDateTime instead of String. Two different formatters were designed, to allow for both Date and DateTime entry.\n\nTo do: extend on current toString() of Deadline to make the deadline more meaningful.\n",
            "insertions": 18,
            "deletions": 1
          },
          {
            "hash": "98ab65f51d9713b6243335a930f3fb3259686627",
            "messageTitle": "feat: build datetimestringformatter to provide meaningful dates",
            "messageBody": "Built a helper class DateTimeStringFormatter with static method formatDateTime that returns a meaningful string from a given LocalDateTime. The standards would be as follows:\n\nIf the deadline is overdue, it\u0027ll say [OVERDUE].\n\nIf the deadline is today, it will say today.\n\nIf the deadline is yesterday, it will say yesterday.\n\nIf the deadline is tomorrow, it will say tomorrow.\n\nIf the deadline is within 1 week, it will say the day of the week e.g. Mon Tues.\n\nIf the deadline is within the same year, the year is omitted.\n\nElse it will return the full date and time.\n\nTo do: Need to touch up the Duchess class.\n",
            "insertions": 36,
            "deletions": 3
          },
          {
            "hash": "7ed37538858afe98aa1182e519b81776a8213f38",
            "messageTitle": "feat: add better input handling for deadlines",
            "messageBody": "Allows creation of Deadline via timings such as today, tonight, tomorrow, day of the week, and two different formats of datetimes.\n\nMeets the Level-8 requirements.\n",
            "insertions": 42,
            "deletions": 7
          },
          {
            "hash": "77edd4e60ee426531a542801b93bc5e1c3a0166f",
            "messageTitle": "feat: build tasklist",
            "messageBody": "Create TaskList class to help manage Tasks. Currently has a basic implementation that allows for addition, deletion, getting, etc.\n\nTo do: Printing, Completing tasks etc.\n",
            "insertions": 33,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 1285,
        "deletions": 296,
        "date": "2020-01-30",
        "commitResults": [
          {
            "hash": "b1781221d89ec5a9541d9fee3d4a7dcb694b3125",
            "messageTitle": "refactor+feat: rebuild command enums",
            "messageBody": "Abstracted the execute function to behind the enums for the Command. Renamed from CommandType to Command as well. This enables polymorphism in Duchess subsequently.\n",
            "insertions": 15,
            "deletions": 9
          },
          {
            "hash": "0053e30122895e188cd51df47ca39fbb33a5b68c",
            "messageTitle": "feat: build commandhandler",
            "messageBody": "CommandHandler is a class built just to provide the static functions for Command Enums to operate with. The functions all take in 4 parameters - command, ui, storage, tasklist, and returns Void.\n\nTo do: implement QuadFunction\n",
            "insertions": 84,
            "deletions": 0
          },
          {
            "hash": "6b6dabb811f3a64e6421e8979b4d2fbd5ae0b963",
            "messageTitle": "feat: build quadfunction interface",
            "messageBody": "Built functional interface QuadFunction. This allows the creation of functions that operate with 4 parameters.\n",
            "insertions": 4,
            "deletions": 0
          },
          {
            "hash": "716b1f077df92e9c61692ae00dfa097a47eb35a5",
            "messageTitle": "fix: improve datetimestringformatter",
            "messageBody": "Change the implementation of the DateTimeStringFormatter slightly to not produce [OVERDUE] when the task is completed.\n",
            "insertions": 12,
            "deletions": 6
          },
          {
            "hash": "b8fc4bb2a5f4f953e0ae622d6a254143624ce985",
            "messageTitle": "feat: improve taskList",
            "messageBody": "Improvements to TaskList has been done to allow for better management of tasks in the list.\n",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "f2495905caf7fa10412793bfff6232aaf780fcde",
            "messageTitle": "fix: remove unnecessary construtor",
            "messageBody": "",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "06f7e88bc3830c97c5a971fea5c5faee9cf320a0",
            "messageTitle": "refactor: shift filePath entry point to be in Main",
            "messageBody": "",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "186a71b2826d2c846f72e63099f709b1672549ee",
            "messageTitle": "refactor: use tasklist implementation in storage",
            "messageBody": "Changed the implementation of saving and loading to that of TaskList. Improved the error handling of Storage as well, and it now throws DuchessExceptions.\n",
            "insertions": 11,
            "deletions": 7
          },
          {
            "hash": "5c45ff92a1c323cbb278bce71e1c460fed410bbc",
            "messageTitle": "feat: build a datetimeparser",
            "messageBody": "This DateTimeParser helps to recognize the deadline given in string form. Uses Optionals instead of error handling to achieve the intended outcome.\n",
            "insertions": 65,
            "deletions": 0
          },
          {
            "hash": "dc3aeef65009e4a117011aa7f50becd411899522",
            "messageTitle": "feat: build parser",
            "messageBody": "Built a Parser class with only one static method of parsing line from Ui.\n",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "2a89da2005f030a025d6edb42e087e6ca8049a74",
            "messageTitle": "feat: build ui",
            "messageBody": "Built a Ui class that helps to take in input and print out output.\n",
            "insertions": 79,
            "deletions": 0
          },
          {
            "hash": "b615873ba6ced24cc484ba2b913945f7629637de",
            "messageTitle": "refactor: huge refactor to duchess",
            "messageBody": "This refactor sees Duchess being stripped of its original methods, leaving only its constructors and run(). Everything else has been abstracted to the appropriate classes. Meets A-MoreOOP requirements.\n",
            "tags": [
              "A-MoreOOP"
            ],
            "insertions": 21,
            "deletions": 213
          },
          {
            "hash": "8973f1a9bb3c29ddc496cc2a23ee37d6e5cfb11c",
            "messageTitle": "chore: pack classes into packages",
            "messageBody": "Packed all java files into their respective packages, namely command, exception, io, storage, task, ui, utils. Meets A-Packages requirements.\n",
            "tags": [
              "A-Packages"
            ],
            "insertions": 104,
            "deletions": 37
          },
          {
            "hash": "ecbc7df6fc407dfdd25eb5e63fdbf0fbe5b51502",
            "messageTitle": "fix: change utils folder to util instead",
            "messageBody": "",
            "insertions": 6,
            "deletions": 6
          },
          {
            "hash": "691485339b8f8d09cbafc932504efcfa10d05162",
            "messageTitle": "docs: add javadoc for command enum",
            "messageBody": "",
            "insertions": 13,
            "deletions": 0
          },
          {
            "hash": "14d1193706183a07ddd26bc9b35f786cfa931c5e",
            "messageTitle": "docs: add javadoc for commandhandler class",
            "messageBody": "",
            "insertions": 80,
            "deletions": 0
          },
          {
            "hash": "7fde46f7e67138488a2a3a777736bf6c74163a62",
            "messageTitle": "docs: add javadoc for duchess class",
            "messageBody": "",
            "insertions": 23,
            "deletions": 0
          },
          {
            "hash": "28c8910799978aa8540459a79253ac85ef3efcc5",
            "messageTitle": "docs: add javadoc for duchessexception class",
            "messageBody": "",
            "insertions": 10,
            "deletions": 0
          },
          {
            "hash": "1fa0e76e90c2a4449718741157f2c8a4766b8b4a",
            "messageTitle": "docs: add javadoc for parser class",
            "messageBody": "",
            "insertions": 12,
            "deletions": 0
          },
          {
            "hash": "91a07f8f4ecbd9ab3b68e83ac09505294164686e",
            "messageTitle": "docs: add javadoc for storage class",
            "messageBody": "",
            "insertions": 22,
            "deletions": 1
          },
          {
            "hash": "caf8733b8ae4ca90ce4043409f91256b5ffa01da",
            "messageTitle": "docs: add javadoc for deadline class",
            "messageBody": "",
            "insertions": 19,
            "deletions": 0
          },
          {
            "hash": "cb0c8f1581c60344096a912b6ae337937c97f617",
            "messageTitle": "docs: add javadoc for event class",
            "messageBody": "",
            "insertions": 19,
            "deletions": 0
          },
          {
            "hash": "07c5f29ffc21f04127090e37aa915ba562bdc3f0",
            "messageTitle": "docs: add javadoc for task class",
            "messageBody": "",
            "insertions": 23,
            "deletions": 1
          },
          {
            "hash": "9aa15ae653eeaa439db99733f7e7c3d59f82eb04",
            "messageTitle": "docs: add javadoc for tasklist class",
            "messageBody": "",
            "insertions": 43,
            "deletions": 0
          },
          {
            "hash": "bbf4d43876b16cdd0b08abecb622196b46fec83d",
            "messageTitle": "docs: add javadoc for todo class",
            "messageBody": "",
            "insertions": 15,
            "deletions": 0
          },
          {
            "hash": "2dca7f50537028a10ffe385c740e2806d8831f7a",
            "messageTitle": "docs: add javadoc for ui class",
            "messageBody": "",
            "insertions": 62,
            "deletions": 0
          },
          {
            "hash": "d4eb1ec1df313e0c08c1b6bf6c34a2afb7a62132",
            "messageTitle": "docs: add javadoc for datetimeparser class",
            "messageBody": "",
            "insertions": 23,
            "deletions": 2
          },
          {
            "hash": "586e71a65bce6891ad34b5a59a789c0445105461",
            "messageTitle": "docs: add javadoc for datetimestringformatter class",
            "messageBody": "",
            "insertions": 18,
            "deletions": 0
          },
          {
            "hash": "77f50855fa4655e4bffc440bee819b51f51a8c74",
            "messageTitle": "docs: add javadoc for quadfunction interface",
            "messageBody": "",
            "insertions": 22,
            "deletions": 0
          },
          {
            "hash": "2083f7e93184b73d70259628852baeab6b31a9bb",
            "messageTitle": "docs: add javadoc for main class",
            "messageBody": "",
            "insertions": 8,
            "deletions": 0
          },
          {
            "hash": "4d683e405b4d4a3823fe3db1f07950c23928c491",
            "messageTitle": "feat: add help command",
            "messageBody": "Added a help command to allow users to see available commands as well as the acceptable DateTime formats.\n",
            "insertions": 24,
            "deletions": 0
          },
          {
            "hash": "2f36538d65abb5bd091ad6f18d3e92ac3e7470a5",
            "messageTitle": "feat: add helper class pair",
            "messageBody": "The Pair class helps to keep two different pieces of data together. This is to support the find operation.\n",
            "insertions": 19,
            "deletions": 0
          },
          {
            "hash": "cf077b746ddb81e7c5c9527b820e04b2eadc9dca",
            "messageTitle": "feat: build find command",
            "messageBody": "Added support for the find command.\n",
            "insertions": 41,
            "deletions": 0
          },
          {
            "hash": "e640cf002229e65c0af10021e3a3873f9e972d69",
            "messageTitle": "docs: update javadoc for commandhandler class",
            "messageBody": "",
            "insertions": 20,
            "deletions": 0
          },
          {
            "hash": "c5482e4b3de9e6a02004083ec7409c29cdf462c4",
            "messageTitle": "docs: update javadoc for task class",
            "messageBody": "",
            "insertions": 5,
            "deletions": 0
          },
          {
            "hash": "7b732a7393ddd271b1083dc62ccd17ee405c282b",
            "messageTitle": "docs: update javadoc for tasklist class",
            "messageBody": "",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "509c77c397085933f8215c58e230980ce114cd04",
            "messageTitle": "docs: update javadoc for ui class",
            "messageBody": "",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "259e77e526e7560f392d15b4cfddfdc0960a8f50",
            "messageTitle": "docs: add javadoc for pair class",
            "messageBody": "",
            "insertions": 23,
            "deletions": 0
          },
          {
            "hash": "240af6f44ec8e19d47bcb296cedf5efffeaa91b8",
            "messageTitle": "feat: update ui help message",
            "messageBody": "Update the help message to include the find command.\n",
            "insertions": 1,
            "deletions": 0
          },
          {
            "hash": "6d58df1e3472b68ad5505620fb9788ce1d491ab1",
            "messageTitle": "perf: improve error handling of storage",
            "messageBody": "Storage used to fail completely once the data folder is not found. Now, upon failure to locate the JSON save file, Storage will check if the data folder exists. If it does not exist, it\u0027ll create one and start from a new save file. Else, it will simply start from a new save file.\n",
            "tags": [
              "A-Jar"
            ],
            "insertions": 17,
            "deletions": 4
          },
          {
            "hash": "3556f3b9e2e41e8166c8d1ca251ec752f73f85ee",
            "messageTitle": "perf: add exception handling for tasklist removetask and gettask",
            "messageBody": "Added an additional check for the index in the getTask and removeTask operations. Although this is not supposed to happen in the Duchess program due to prior checks, this is for future extensions which may utilise the TaskList class.\n\nThis change causes Ui and CommandHandler to break. Exception handling will need to be added to their methods as well.",
            "insertions": 12,
            "deletions": 4
          },
          {
            "hash": "fd5c3444298ecd4167959ebca9efd6546e073e1c",
            "messageTitle": "perf: add exception handling to printtasklist",
            "messageBody": "As TaskList added exception handling for its getTask functions, printTaskList had to be modified to throw the DuchessException upwards.\n\nTo fix: CommandHandler",
            "insertions": 2,
            "deletions": 1
          },
          {
            "hash": "a41a628bbe4282b6cab9c2dbb275f4d039523d61",
            "messageTitle": "fix+perf: unpack imports and add exception handling to handlelistcommand",
            "messageBody": "Slight change in IDE settings allowed for the import statements to be fully unpacked. The handleListCommand now throws DuchessException, which is from the ui.printTaskList function.",
            "insertions": 7,
            "deletions": 2
          },
          {
            "hash": "ba13921db582d9fc7f44e1f41d09a1aeab052d17",
            "messageTitle": "fix: unpack imports for storage",
            "messageBody": "Change in IDE settings allows for fully unpacked import statements. Changed Storage\u0027s initial import duchess.task.* to the individual import statements.",
            "insertions": 5,
            "deletions": 1
          },
          {
            "hash": "ca2e0259fccf715009e3edea1949e54cbecacd13",
            "messageTitle": "test: write junit test for deadline",
            "messageBody": "The JUnit test for the Deadline class tests its inheritance from the Task class and its overriden toString() method.",
            "insertions": 30,
            "deletions": 0
          },
          {
            "hash": "9839cdf767fec3d016d7c24cd766ea84bce69916",
            "messageTitle": "test: write junit test for event",
            "messageBody": "The JUnit test for the Event class tests its inheritance from the Task class and its overridden toString() method.",
            "insertions": 27,
            "deletions": 0
          },
          {
            "hash": "1e9ee6b594ae4b19dd9e757fa033bceff55fa6af",
            "messageTitle": "test: write junit test for todo",
            "messageBody": "The JUnit test for the Event class tests its inheritance from the ToDo class and its overridden toString() method.",
            "insertions": 25,
            "deletions": 0
          },
          {
            "hash": "26c70bab99b5bff8085b6bc5b8f4458539a7e648",
            "messageTitle": "test: write junit test for task",
            "messageBody": "The JUnit test for Task checks its overloaded constructors and the following methods:\n- isCompleted\n- toggleIsCompleted\n- toString",
            "insertions": 41,
            "deletions": 0
          },
          {
            "hash": "9572f40be4df1b1b4fd9a542de6f4a98affdffac",
            "messageTitle": "test: write junit test for tasklist",
            "messageBody": "The JUnit test for TaskList checks its overloaded constructors, addTask, getTask (success and exception), removeTask (success and exception), completeTask (success and exception), getTaskArray and find methods.",
            "insertions": 135,
            "deletions": 0
          }
        ]
      },
      {
        "insertions": 449,
        "deletions": 94,
        "date": "2020-01-31",
        "commitResults": [
          {
            "hash": "97e38fb6f86fc388debf51bb3ed9999cb6ae35ad",
            "messageTitle": "perf: improve storage to enable nested directory saving",
            "messageBody": "Previous implementation allowed a JSON file saved in a directory - no other possibilities e.g. no directory, nested directories. New implementation now caters for all of these possibilities, and will generate the folders required to save it.\n\nAdded this. in front of gson instances.\n\nTo do: Write tests.",
            "insertions": 21,
            "deletions": 19
          },
          {
            "hash": "bc2bcf95cbb9f36bd1412933104f6d3de2a66c9e",
            "messageTitle": "feat: add additional getters for deadline and event",
            "messageBody": "Added additional getters to facilitate JUnit testing. This includes getting the deadline of the Deadline instance, and the timeFrame of the Event instance.",
            "insertions": 18,
            "deletions": 0
          },
          {
            "hash": "4bd1c062fc10bab78bcb1a189f7dab56f61ddb7f",
            "messageTitle": "style: remove unnecessary try catch in tasklisttest",
            "messageBody": "Previous implementation utilised a try-catch-fail approach to test for success scenarios. New implementation now simply throws the exception upwards, which will terminate the JUnit testing more meaningfully as well.",
            "insertions": 20,
            "deletions": 32
          },
          {
            "hash": "052fb17b22d674ba4892c21c08b42c48fafe19c4",
            "messageTitle": "test: write junit test for duchessexception",
            "messageBody": "The JUnit test for DuchessException checks for the successful initialisation of the DuchessException instance, namely the errorMessage.",
            "insertions": 13,
            "deletions": 0
          },
          {
            "hash": "702fdb25e857823b64977aafa633e011fd3cbc43",
            "messageTitle": "test: write junit test for parser",
            "messageBody": "The JUnit test for Parser checks for the ability of the static method parse to correctly parse commands of each command type, as well as the ability to correctly handle unrecognised commands.",
            "insertions": 33,
            "deletions": 0
          },
          {
            "hash": "85c69a03a527d5f0aedbc228bc1de10782f3d922",
            "messageTitle": "test: write junit test for storage",
            "messageBody": "The JUnit test for Storage is slightly more complicated than the rest. It looks out for the following:\n- Trying to load a save file from a folder that does not exist\n- Trying to load a save file that does not exist\n- Successfully loading a save file\n- Trying to load a save file in a nested directory when no folders exist\n- Saving to an invalid file path\n- Saving to a valid file path\n\nThe cleanUp() method is run after all tests and helps to delete all folders and files created in the process of testing.\n\nCurrently lacking the ability to test the exception handling of Storage when a file path so incorrect is passed in that it causes Storage to be unable to generate the required folders. The exception that states that saving will be not possible should be thrown up.",
            "tags": [
              "A-JUnit"
            ],
            "insertions": 160,
            "deletions": 0
          },
          {
            "hash": "efa7f8420d5a25b44aa8021eb472201ea832e67e",
            "messageTitle": "perf: change quadfunction implementation",
            "messageBody": "Removed the need for a return type for QuadFunction due to the default void return type. This in turn removed the need for CommandHandler to specifically return null in order to fit the original Void return type.\n\nThe types in Command and CommandHandler were thus changed accordingly.",
            "insertions": 13,
            "deletions": 33
          },
          {
            "hash": "97f713fae5244b50af92481b0e438e52e1352388",
            "messageTitle": "fix(DateTimeStringFormatter): fix typo in javadoc",
            "messageBody": "Changed @Code to @code.",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "73bfb2c81b679df51600d9c8db2fb2b62a9815d5",
            "messageTitle": "docs(Ui): fixed javadoc",
            "messageBody": "Added the changes in exceptions and parameters.",
            "insertions": 5,
            "deletions": 1
          },
          {
            "hash": "90788042a397fcf32ec979c8240a564e400c76ef",
            "messageTitle": "docs(TaskList): updated javadoc",
            "messageBody": "Updated JavaDoc to the newest implementations.",
            "insertions": 4,
            "deletions": 1
          },
          {
            "hash": "20abcf3dcc4998e357a7835d151051c68b872e1b",
            "messageTitle": "docs: add javadoc for todotest class",
            "messageBody": "",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "d707ef3cf5bf5d3de428c25f43795a872749532e",
            "messageTitle": "docs: add javadoc for tasktest class",
            "messageBody": "",
            "insertions": 16,
            "deletions": 1
          },
          {
            "hash": "6980b3f26d13d65523596e4121a801278149d79f",
            "messageTitle": "docs: add javadoc for tasklisttest class",
            "messageBody": "",
            "insertions": 48,
            "deletions": 0
          },
          {
            "hash": "47c6da56a1e043bd15515cb68bd1c33fff43a399",
            "messageTitle": "docs: add javadoc for deadlinetest class",
            "messageBody": "",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "d94f0f9d9d23008ae16dac6d03b57177c517c12f",
            "messageTitle": "docs: add javadoc for parsertest class",
            "messageBody": "",
            "insertions": 13,
            "deletions": 0
          },
          {
            "hash": "e48c8866335c41559f37b20ed77c7ec7c4e7ecb0",
            "messageTitle": "docs: add javadoc for storagetest class",
            "messageBody": "",
            "insertions": 51,
            "deletions": 5
          },
          {
            "hash": "33c28cc96561e435e438ba47715a08fb31eeb767",
            "messageTitle": "docs: add javadoc for duchessexceptiontest class",
            "messageBody": "",
            "insertions": 6,
            "deletions": 0
          },
          {
            "hash": "b2ec7354183e9a432baab604b6dacbd16509a8f0",
            "messageTitle": "docs: add javadoc for eventtest class",
            "messageBody": "",
            "insertions": 9,
            "deletions": 1
          }
        ]
      },
      {
        "insertions": 175,
        "deletions": 65,
        "date": "2020-02-01",
        "commitResults": [
          {
            "hash": "4d29b999b4a18877600704b02d5c4efd3fadcf3d",
            "messageTitle": "style: fix javadoc style with \u003cp\u003e",
            "messageBody": "Corrected \u003cp\u003e to be at the start of the second paragraph, instead of between the two paragraphs.\n\nThis seems to differ from the official JavaDocs style.",
            "insertions": 6,
            "deletions": 6
          },
          {
            "hash": "25427520629f9c09ed168498a8347c1ec331624d",
            "messageTitle": "style: add comment behind unicode characters",
            "messageBody": "Added trailing comments behind statements with /uXXXX characters, which use an escape character to express a unicode character. This is in line with the CheckStyle requirements.",
            "insertions": 13,
            "deletions": 10
          },
          {
            "hash": "b780eb3f07dbc18afca996cfeb6af719090ced7e",
            "messageTitle": "style: indent line continuations in javadoc",
            "messageBody": "Previously, there were line continuations in JavaDoc that were completely left aligned.\n\nNow, the line continuations are fixed to be tabbed to the same extent as the line that it is continuing.\n\nFixed according to CheckStyle requirements.",
            "insertions": 2,
            "deletions": 2
          },
          {
            "hash": "27910d2dad13dc43fd9b42e5c85e729f9e039f90",
            "messageTitle": "style: plus symbol to be on next line",
            "messageBody": "Small fix: + symbol was accidentally left on the top line right before the line break. Shifted down to be on the bottom line, according to CheckStyle requirements.",
            "insertions": 2,
            "deletions": 2
          },
          {
            "hash": "388b3e4174e411a3939a553907c0555425945d9a",
            "messageTitle": "style: fix storagetest according to checkstyle requirements",
            "messageBody": "The below were fixed:\n- Declaration of variables too far away from usage of variables.\n- Indentation issue with arrays - the indentation required differed from the usual 8 spaces. Used ArrayList to sidestep the issue.",
            "insertions": 6,
            "deletions": 5
          },
          {
            "hash": "f6629c1b02920fdaba3554cf4294583751d18acc",
            "messageTitle": "chore: add checkstyle version requirement",
            "messageBody": "Left out the CheckStyle tool version previously when implementing A-Gradle. Fixed.\n\nWill be shifting the A-Gradle tag up to the merge of this branch subsequently.",
            "insertions": 4,
            "deletions": 0
          },
          {
            "hash": "70d76e833baaf592406f5227e76242b1da71d7c6",
            "messageTitle": "refactor: remove main class and change duchess to duke",
            "messageBody": "According to requirements mentioned during lecture, the Main class has been removed and the starting point of the program is now the Duke class. gradle.build has been updated accordingly.\n",
            "insertions": 29,
            "deletions": 20
          },
          {
            "hash": "826fabae71ec99634a9499afecee4203f66ebf0c",
            "messageTitle": "test: fix up text-ui-test to work with new changes",
            "messageBody": "Previous text-ui-test was designed to work with the old Duchess. It would not work for the current Duchess.\n\nUpdated to clear data from previous tests, compile and run.",
            "insertions": 111,
            "deletions": 18
          },
          {
            "hash": "6e78b47949da002c8d1a404eff63f003ae9ecae5",
            "messageTitle": "docs: update duke javadoc",
            "messageBody": "Fixed some mistakes.",
            "insertions": 2,
            "deletions": 2
          }
        ]
      },
      {
        "insertions": 497,
        "deletions": 182,
        "date": "2020-02-03",
        "commitResults": [
          {
            "hash": "3296876db8af6b71d293de15470cc1dca66746b2",
            "messageTitle": "feat: add launcher to project",
            "messageBody": "Added Launcher.java to project, and changed build.gradle to start from Launcher.java.",
            "insertions": 13,
            "deletions": 1
          },
          {
            "hash": "eda6cb3c86ba9fbf729b89300abd1fec5536bbd5",
            "messageTitle": "feat: extend duke from javafx application",
            "messageBody": "Previously, the project used to run from Duke.\n\nChanges were made to Duke such that it extends from JavaFX Application, and now has the start() method. Implemented Tutorials 1 and 2 of the JavaFX tutorials, but changed the implementation of the window to follow the flexbox concept - using VBox and HBox to allow for responsiveness.\n\nTo do: Continue with tutorial to implement everything else.",
            "insertions": 69,
            "deletions": 1
          },
          {
            "hash": "8d5ef72c56b9ab37dd1064d74cbdf30d8eddd4c7",
            "messageTitle": "feat: add custom dialog box with user images",
            "messageBody": "Created a custom control named DialogBox that helps with the display of dialogs.\n\nIncorporated that into Duke.",
            "insertions": 116,
            "deletions": 4
          },
          {
            "hash": "197f82899e53269d79045dcddd0825d49ecded36",
            "messageTitle": "chore: rename controls folder to controller",
            "messageBody": "Changed the name of the controls folder to controller.",
            "insertions": 75,
            "deletions": 47
          },
          {
            "hash": "ae710625a289c279ab793a518e9bb7d9b250066f",
            "messageTitle": "feat: add main class",
            "messageBody": "Added a Main class to link UI and Duke. As per JavaFX Tutorial 4 instructions.",
            "insertions": 21,
            "deletions": 1
          },
          {
            "hash": "746f46ebf2ec909cdbb443f1baec3336b7c68d15",
            "messageTitle": "feat: add dialogbox and mainwindow fxml",
            "messageBody": "Added the two fxml according to JavaFX Tutorial 4.",
            "insertions": 41,
            "deletions": 0
          },
          {
            "hash": "f29e4713aaba248ef545f56ece900ce4ba6d66cf",
            "messageTitle": "feat: add mainwindow controller",
            "messageBody": "Added the controller for MainWindow. Changed MainWindow from that in tutorial to use fx:root construct.",
            "insertions": 69,
            "deletions": 0
          },
          {
            "hash": "49f727d4c0ae1a606be8fd4c03f88b6232691271",
            "messageTitle": "refactor: remove javafx code from duke",
            "messageBody": "Removed JavaFX related code from Duke class.\n\nA lot of code still commented out, will clean up subsequently.",
            "insertions": 92,
            "deletions": 127
          },
          {
            "hash": "ee33f69d3c94533a004aefc9828ef46a2155df3d",
            "messageTitle": "chore: update javafx version",
            "messageBody": "Updated JavaFX version from 11 to 11.0.1.",
            "insertions": 1,
            "deletions": 1
          }
        ]
      },
      {
        "insertions": 358,
        "deletions": 318,
        "date": "2020-02-04",
        "commitResults": [
          {
            "hash": "93ebdd34dfa8482020adfa24e08ad3a4d842dcca",
            "messageTitle": "chore: update shadowjar version to 0.1.4",
            "messageBody": "Updated the ShadowJar Archive Version to 0.1.4.",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "b380724b8fbde99cdcd0a27d73e3b70018544c94",
            "messageTitle": "feat: update mainwindow fxml and controller",
            "messageBody": "Change implementation of MainWindow to use VBox instead of AnchorPane.\n\nChange the initialisation of MainWindow to get initial output of Duke and display it out.",
            "insertions": 29,
            "deletions": 22
          },
          {
            "hash": "c94c05eb89a9cc1cf94cdb76ab3099c6a2d997a5",
            "messageTitle": "feat: change dialogbox implementation",
            "messageBody": "Changed the DialogBox implementation to use HBox and updated all profile images to be circular.",
            "insertions": 13,
            "deletions": 7
          },
          {
            "hash": "44367474de9d206a4771e1be242d829c567fde83",
            "messageTitle": "style: reformat fxml files",
            "messageBody": "Now following code requirements for line length.",
            "insertions": 24,
            "deletions": 18
          },
          {
            "hash": "fdbff3aff5880da28263255db4b5994afb5fa04b",
            "messageTitle": "feat: change quadfunction and commandhandler to return string",
            "messageBody": "Due to the need to return a string to the MainWindow, the implementation of QuadFunction and CommandHandler has been changed to return a String instead of printing straight to System.out.",
            "insertions": 25,
            "deletions": 26
          },
          {
            "hash": "75ca899fa4970dcea2a82ed4712e497311d5e763",
            "messageTitle": "feat+docs: change mainwindow to vbox and set min dimensions and add javadoc",
            "messageBody": "",
            "insertions": 9,
            "deletions": 3
          },
          {
            "hash": "ca899a70805334cc876930b15d6128f5f403dd3e",
            "messageTitle": "feat+docs: add handling of both gui and console mode and add javadoc",
            "messageBody": "Modified Launcher to be able to allow for console mode. This is done via the -mode console flag.\n\nAdded JavaDoc as well for the new class and methods.",
            "insertions": 27,
            "deletions": 2
          },
          {
            "hash": "a4e3b85f0e1df996fae2f7313175d81c0f9eeed0",
            "messageTitle": "fix: convert mode to lowercase",
            "messageBody": "Previously, the flag `-mode console` required the word `console` to be lowercase. Now it converts the input string to lowercase before checking, thus all cases are now allowed. ",
            "insertions": 2,
            "deletions": 2
          },
          {
            "hash": "e1640c7c66b570c75a210b4070922cd9ebc87ffe",
            "messageTitle": "refactor: change duchessexception to extend from runtimeexception",
            "messageBody": "Previously, a DuchessException thrown during Stream operations could not be thrown upwards. This is fixed by extending DuchessException from RuntimeException instead.",
            "insertions": 1,
            "deletions": 1
          },
          {
            "hash": "3291e9dd9c8ee16dc977cac3ac702df74990527d",
            "messageTitle": "refactor: convert ui to return strings instead",
            "messageBody": "Change majority of Ui methods to return Strings instead of printing to console. Additional methods that print to console were added to support console mode.",
            "tags": [
              "A-Varargs"
            ],
            "insertions": 147,
            "deletions": 107
          },
          {
            "hash": "5b916dac90234ab3e63211325b7f48979cee4d5f",
            "messageTitle": "feat(duke): add ability to support both console and gui mode",
            "messageBody": "Modified Duke to be able to run on both console and GUI mode. This is done via overloading the constructor and dedicating the run() method for console mode, and the getResponse() method for GUI mode.\n\nThis meets the A-JavaFX requirements.",
            "tags": [
              "A-JavaFx"
            ],
            "insertions": 55,
            "deletions": 106
          },
          {
            "hash": "77baaeffc811f2e1a534cd66db48864189dbd62f",
            "messageTitle": "refactor(storage): change implementation of directory creation",
            "messageBody": "Changed an iterative approach to using the inbuilt File.mkdirs()",
            "insertions": 5,
            "deletions": 12
          },
          {
            "hash": "fd474f543a54fd4c0c2c63b08ebaacf6fe1bdd47",
            "messageTitle": "fix: add error handling to task creation in commandhandler",
            "messageBody": "Previously, if you entered \"todo\"/\"event\"/\"deadline\" as a single word, an exception will be thrown and uncaught, causing the application to terminate.\n\nAdded additional checks to ensure that a DuchessException is thrown in this situation.",
            "insertions": 9,
            "deletions": 0
          },
          {
            "hash": "5eb289f87aa6af67f11c32463bf8dfd938c04733",
            "messageTitle": "perf: touchup ui results",
            "messageBody": "Cleaned up on leftover differences in Ui formatting due to the switch from CLI to GUI.",
            "insertions": 11,
            "deletions": 11
          }
        ]
      },
      {
        "insertions": 126,
        "deletions": 55,
        "date": "2020-02-05",
        "commitResults": [
          {
            "hash": "abbf9bc396d13c4521e2992869ddecbebd184590",
            "messageTitle": "feat: add magicstrings class",
            "messageBody": "The MagicStrings class will contain all of the strings scattered around the Duchess application, keeping it centralised and reusable.\n\nThis excludes the strings used in Ui, which is localised as it is.",
            "insertions": 41,
            "deletions": 0
          },
          {
            "hash": "5efe139c74172877e2e29a4ed2a48c4d47317dfb",
            "messageTitle": "refactor: clean up datetimestringformatter",
            "messageBody": "Removed the usage of magic strings and cleaned up the use of DateTimeFormatters, making the code easier to read and understand.",
            "insertions": 22,
            "deletions": 15
          },
          {
            "hash": "9bed09b91ad67cd58f3b3447a1425db282a8de72",
            "messageTitle": "refactor: remove all magic strings",
            "messageBody": "Removed all instances of magic strings and centralised them in the MagicStrings class.",
            "insertions": 51,
            "deletions": 30
          },
          {
            "hash": "e9b84fe8c58a64760b7fc67d4dff5ce7e5cfba90",
            "messageTitle": "perf: change visibility of task fields and abstracted out symbol",
            "messageBody": "Updated the visibility of the fields of Task to be protected instead of private.\n\nPulled out the symbols such as [T] and [D] to be a static variable in their respective classes as well.",
            "insertions": 12,
            "deletions": 10
          }
        ]
      },
      {
        "insertions": 222,
        "deletions": 247,
        "date": "2020-02-10",
        "commitResults": [
          {
            "hash": "f47ddbbf6360008354378e0f7eeed55bfcca3bbc",
            "messageTitle": "refactor: change package name to duke",
            "messageBody": "Major refactoring to prevent any future issues with grading. The package name has been renamed from duchess to duke, and all import and package statements have been updated accordingly.\n\nFixed some minor JavaDoc issues as well.\n\nTo do: Week 5 increments.",
            "tags": [
              "A-Streams"
            ],
            "insertions": 222,
            "deletions": 247
          }
        ]
      }
    ]
  },
  "authorFinalContributionMap": {
    "zhuhanming": 2429
  },
  "authorFileTypeContributionMap": {
    "zhuhanming": {
      "java": 2152,
      "md": 0,
      "fxml": 49,
      "sh": 38,
      "bat": 0,
      "gradle": 37,
      "txt": 153
    }
  },
  "authorContributionVariance": {
    "zhuhanming": 113185.49
  },
  "authorDisplayNameMap": {
    "zhuhanming": "CS2103-T09- 1 ZHU ..MING"
  }
}
