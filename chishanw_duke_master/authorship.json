[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chishanw": 37
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "1. List all tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "2. Add a todo task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "3. Add an event task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "4. Add a deadline task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "5. Mark a task as done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "6. Delete a task from the list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "7. Update a task description and time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "8. Find a task by keyword"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "## List all tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "Displays an indexed list of all tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "`1. [D][X] Assignment (by: 20 Apr 2019)`"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "chishanw": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.lang.Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Main class for the Duke chatbot application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a fresh Duke instance with a supplied file storing the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName Path to the file storing the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File file \u003d new File(Storage.FILEPATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"File creation failed.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assert input.length() \u003e 0 : \"Input cannot be empty\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result +\u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result \u003d e.getMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result \u003d \"Sorry, a mysterious unknown error occured:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + e.getClass().getCanonicalName() + \"\\nPlease try again!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "chishanw": 58
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.javafx.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            ap.setId(\"pane\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            scene.getStylesheets().addAll(Main.class.getResource(\"/css/style.css\").toExternalForm());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public ByeCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.trim().compareTo(\"bye\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return ui.printGoodbye();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidCommandException(Message.COMMAND_ERROR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 22
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Command(String input, boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public DeadlineCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws EmptyDescriptionException, TaskFormatException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.manageDeadline(storage, input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public DeleteCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        int idx \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        storage.deleteTask(idx);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.deleteTask(idx - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public DoneCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        int idx \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        storage.doTask(idx);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.doTask(idx - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public EventCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws EmptyDescriptionException, TaskFormatException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.manageEvent(storage, input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 19
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public FindCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.findKeyword(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 17
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private String allCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public HelpCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.allCommands \u003d \"1. list\\n\" + \"2. todo \u003ctask\u003e\\n\" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"3. event \u003ctask\u003e /at \u003cdate\u003e\\n\" + \"4. deadline \u003ctask\u003e /by \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"5. done \u003cindex\u003e\\n\" + \"6. delete \u003cindex\u003e\\n\" + \"7. find \u003ckeyword\u003e\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"8. update description \u003cindex\u003e \u003cnew description\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"9. update time \u003cindex\u003e \u003cnew time\u003e\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"10. bye\";   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.trim().compareTo(\"help\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return Message.HELP + this.allCommands;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidCommandException(Message.COMMAND_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public ListCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.trim().compareTo(\"list\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return tasks.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidCommandException(Message.LIST_ERROR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 22
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public TodoCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.manageTodo(storage, input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 17
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateDescriptionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class UpdateDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public UpdateDescriptionCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        int idx \u003d Integer.parseInt(split[2]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        storage.updateDescription(idx, input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.updateDescription(idx - 1, input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateTimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class UpdateTimeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public UpdateTimeCommand(String input, boolean isExit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(input, isExit);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        int idx \u003d Integer.parseInt(split[2]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        storage.updateTime(idx, input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks.updateTime(idx - 1, input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 21
    }
  },
  {
    "path": "src/main/java/duke/core/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String INTRO \u003d \"I\u0027m not Duke, I\u0027m Cute!\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"I\u0027m feeling a lil hungry... ooh!\\n\" + \"Hi little fishy, what you up to?\\n\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"Type \u0027help\u0027 if you need any!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String EXIT \u003d \"Cute lunges forward and snaps you up in a gulp.\\n\" "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"She\u0027s grateful you swam by!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String HELP \u003d \"Here\u0027s a list of Cute commands to try:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String DO_TASK \u003d \"Mmm, Cute thinks your hardworkingness smells yummy!\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String ADD_TASK \u003d \"Wow, you add tasks faster than I eat fishes! Hmm...\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String DELETE_TASK \u003d \"Noted. I\u0027ve eaten - uhh, I mean, removed this task:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String UPDATE_DESCRIPTION \u003d \"Updating a description? Forgetful fishy, are we?\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String UPDATE_TIME \u003d \"Ooh, you updated the time, but is it time for me to eat yet?\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String COMMAND_ERROR \u003d \"Sorry, invalid command.\\n\" "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"View a list of Cute commands by typing \u0027help\u0027.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String LIST_ERROR \u003d \"Sorry, that command isn\u0027t Cute. Try just \u0027list\u0027?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String DESCRIPTION_ERROR \u003d \"Oops! The description of a task can\u0027t be empty!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String INDEX_ERROR \u003d \"Sounds like you have the wrong task index,\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"I can\u0027t really hear you through your water bowl!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String TIME_ERROR \u003d \"Your date time format is incorrect.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"Try: yyyy-mm-dd HHmm\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String EVENT_FORMAT_ERROR \u003d \"Your event format is incorrect.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"Try: /at \u003cdate and time\u003e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String DEADLINE_FORMAT_ERROR \u003d \"Your event format is incorrect.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            + \"Try: /by \u003cdate and time\u003e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String KEYWORD_ERROR \u003d \"Aww, Cute couldn\u0027t fish up any results from that keyword.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 43
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.UpdateDescriptionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.UpdateTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a parser to parse commands from input strings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a fresh Parser instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Parses the input string into a command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param input The given user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param command The command to check against."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Command parseCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Command result \u003d new ByeCommand(input, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d input.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String command \u003d split[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assert split.length \u003e 1 : \"User input minimally must consist of one command and another argument\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new ListCommand(input, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new ByeCommand(input, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new HelpCommand(input, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new DeleteCommand(input, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new DoneCommand(input, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new FindCommand(input, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"update\" :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String secondCommand \u003d split[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            if (secondCommand.compareTo(\"description\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result \u003d new UpdateDescriptionCommand(input, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } else if (secondCommand.compareTo(\"time\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result \u003d new UpdateTimeCommand(input, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                throw new InvalidCommandException(Message.COMMAND_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new TodoCommand(input, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new EventCommand(input, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result \u003d new DeadlineCommand(input, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidCommandException(Message.COMMAND_ERROR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Parses the input string into the right date and time format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param time The given user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return The reformatted string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static String reformatDateAndTime(String time) throws InvalidTimeFormatException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String dateRegex \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String timeRegex \u003d \"([0-1][0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d time.trim().split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (split.length !\u003d 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidTimeFormatException(Message.TIME_ERROR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Boolean dateMatches \u003d split[0].matches(dateRegex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Boolean timeMatches \u003d split[1].matches(timeRegex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (dateMatches \u0026\u0026 timeMatches) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d parseDate(split[0]) + \" \";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d parseTime(split[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidTimeFormatException(Message.TIME_ERROR);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private static String parseDate(String date) throws InvalidTimeFormatException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String result \u003d localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new InvalidTimeFormatException(Message.TIME_ERROR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private static String parseTime(String time) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        int hour \u003d Integer.parseInt(time.substring(0,2));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String minutes \u003d time.substring(2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (hour \u003c\u003d 12) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d hour;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d \":\" + minutes;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d hour - 12;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d \":\" + minutes;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        result +\u003d hour \u003c 12 ? \"am\" : \"pm\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    } "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 154
    }
  },
  {
    "path": "src/main/java/duke/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a manager to handle all storage related functionality."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String DIRECTORY \u003d \"./data/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String FILENAME \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String FILEPATH \u003d \"./data/tasks.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static final String TEMP_FILEPATH \u003d \"./data/temp.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a fresh Storage instance, with a supplied path for the file storing the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName The file path for the task list file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File dir \u003d new File(DIRECTORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            dir.mkdirs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return FILEPATH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Loads tasks from the input file, and returns them in an ArrayList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return An ArrayList of all stored tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File file \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String result \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String[] split \u003d result.split(\"~\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String command \u003d split[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (command.compareTo(\"T\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Boolean isDone \u003d Integer.parseInt(split[1]) \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Todo todo \u003d new Todo(split[2], isDone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    tasks.add(todo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                } else if (command.compareTo(\"E\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Boolean isDone \u003d Integer.parseInt(split[1]) \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Event event \u003d new Event(split[2], isDone, split[3]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                } else if (command.compareTo(\"D\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Boolean isDone \u003d Integer.parseInt(split[1]) \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    Deadline deadline \u003d new Deadline(split[2], isDone, split[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Writes data to the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName The file containing all tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param data The data to be written."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void writeToFile(String data) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILEPATH, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.write(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"Sorry, the file input is invalid.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Modifies the task in the task list file to mark it as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param idx The index of the task in the task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void doTask(int idx) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File originalFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File tempFile \u003d new File(TEMP_FILEPATH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(TEMP_FILEPATH, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scanner sc \u003d new Scanner(originalFile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (i \u003d\u003d idx) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String originalTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String modifiedTask \u003d originalTask.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(modifiedTask + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(sc.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            originalFile.delete();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            tempFile.renameTo(originalFile);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"File not found. Try again!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"IOException\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Deletes the task from the task list file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param idx The index of the task in the task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void deleteTask(int idx) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File originalFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File tempFile \u003d new File(TEMP_FILEPATH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(TEMP_FILEPATH, false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scanner sc \u003d new Scanner(originalFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (i !\u003d idx) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(task + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            originalFile.delete();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            tempFile.renameTo(originalFile);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"File not found. Try again!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"IOException\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void updateDescription(int idx, String input) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File originalFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File tempFile \u003d new File(TEMP_FILEPATH);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(TEMP_FILEPATH, false);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scanner sc \u003d new Scanner(originalFile);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (i \u003d\u003d idx) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String originalTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String[] splitTask \u003d originalTask.split(\"~\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    int newDescriptionIndex \u003d input.indexOf(\"\" + idx);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String newDescription \u003d input.substring(newDescriptionIndex + 2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    splitTask[2] \u003d newDescription;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String modifiedTask \u003d \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    for (int j \u003d 0; j \u003c splitTask.length; j++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        modifiedTask +\u003d splitTask[j];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        if (j !\u003d splitTask.length -1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                            modifiedTask +\u003d \"~\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(modifiedTask + \"\\n\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(sc.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            originalFile.delete();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            tempFile.renameTo(originalFile);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"File not found. Try again!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"IOException\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void updateTime(int idx, String input) throws InvalidTimeFormatException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File originalFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        File tempFile \u003d new File(TEMP_FILEPATH);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(TEMP_FILEPATH, false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Scanner sc \u003d new Scanner(originalFile);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (i \u003d\u003d idx) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String originalTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String[] splitTask \u003d originalTask.split(\"~\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    int newTimeIndex \u003d input.indexOf(\"\" + idx);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String newTime \u003d Parser.reformatDateAndTime(input.substring(newTimeIndex + 2));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    splitTask[3] \u003d newTime;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    String modifiedTask \u003d \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    for (int j \u003d 0; j \u003c splitTask.length; j++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        modifiedTask +\u003d splitTask[j];"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        if (j !\u003d splitTask.length -1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                            modifiedTask +\u003d \"~\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(modifiedTask + \"\\n\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    fw.write(sc.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            originalFile.delete();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            tempFile.renameTo(originalFile);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"File not found. Try again!\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Ui.printLines(\"IOException\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 250
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a manager for user interaction related functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a fresh Ui instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Prints the introductory message for Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String printIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return Message.INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Prints the goodbye message for Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String printGoodbye() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return Message.EXIT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Prints the divider lines for messages in Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param content The content within the divider lines."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static String printLines(String content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assert content.length() !\u003d 0 : \"Content should not be empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        result.append(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String[] split \u003d content.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        for (String str : split) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result.append(\"\\n\" + \"     \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result.append(str);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        result.append(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 46
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.lang.Exception;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user input contains an empty description for tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user inputs an invalid command not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user provides an invalid time format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class InvalidTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public InvalidTimeFormatException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/KeywordNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user inputs an invalid command not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class KeywordNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public KeywordNotFoundException(String message){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user inputs an invalid command not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class TaskFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public TaskFormatException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents the exception thrown when the user inputs an invalid command not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class TaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public TaskIndexException(String message){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 10
    }
  },
  {
    "path": "src/main/java/duke/javafx/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        dialog.setId(\"dialog-text\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 64
    }
  },
  {
    "path": "src/main/java/duke/javafx/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaFish.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaCute.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private Image exitImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaCuteFish.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        dialogContainer.setId(\"background\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.printIntro();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private void printIntro() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String response \u003d ui.printIntro();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.compareTo(\"bye\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    DialogBox.getDukeDialog(response, exitImage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            PauseTransition pause \u003d new PauseTransition(Duration.seconds(2.5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            pause.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            pause.play();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 87
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * It has a description, a finish time, and is marked as done or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a new Deadline instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param description The description of the deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param isDone Whether the deadline task is done or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param time The time by which the deadline task must be done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Deadline(String description, boolean isDone, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns the done time of the deadline task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return The time by which the deadline task must be done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setTime(String newTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.time \u003d newTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String str \u003d \"[D]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[O] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[X] \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        str +\u003d this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        str +\u003d \" (by: \" + this.time + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * It has a description, a finish time, and is marked as done or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a new Event instance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param description The description of the event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param isDone Whether the event task is done or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param time The time by which the event task must be done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Event(String description, boolean isDone, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns the done time of the event task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return The time by which the event task must be done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setTime(String newTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.time \u003d newTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String str \u003d \"[E]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[O] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[X] \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        str +\u003d this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        str +\u003d \" (at: \" + this.time + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * It has a description, and is marked as done or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a new Task instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param isDone Whether the task is done or not."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Returns whether the task is marked as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return A boolean marking the task as done or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String getIsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return \"[O] \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return \"[X] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setDescription(String newDescription) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public abstract void setTime(String newTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Sets the task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param isDone A boolean marking the task as done or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 54
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.exception.TaskIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a list of tasks to be done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs an empty TaskList instance to store and handle tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a new TaskList instance with a supplied ArrayList of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param tasks The supplied task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Marks a given task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param idx The index of the task in the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String doTask(int idx) throws TaskIndexException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Task task \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            task.setIsDone(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return Message.DO_TASK + task.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new TaskIndexException(Message.INDEX_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return Message.ADD_TASK + \"Now you have \" + this.tasks.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param idx The index of the task to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String deleteTask(int idx) throws TaskIndexException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Task task \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            this.tasks.remove(idx);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return Message.DELETE_TASK + task.toString()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                + \"\\nNow you have \" + this.tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new TaskIndexException(Message.INDEX_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Finds tasks with descriptions containing the specified keyword."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param input User input containing the keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @return String containing all tasks matching the keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String findKeyword(String input) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String keyword \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        ArrayList\u003cString\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                searchResults.add(task.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (!searchResults.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String results \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            for (int i \u003d 0; i \u003c searchResults.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String result \u003d searchResults.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                results +\u003d (i + 1) + \".\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                results +\u003d result;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                if (i \u003c searchResults.size() - 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                    results +\u003d \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return results;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new KeywordNotFoundException(Message.KEYWORD_ERROR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String updateDescription(int idx, String input) throws TaskIndexException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Task task \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int newDescriptionIndex \u003d input.indexOf(\"\" + (idx + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String newDescription \u003d input.substring(newDescriptionIndex + 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            task.setDescription(newDescription);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return Message.UPDATE_DESCRIPTION + task.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new TaskIndexException(Message.INDEX_ERROR);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String updateTime(int idx, String input) throws TaskIndexException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Task task \u003d this.tasks.get(idx);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            int newTimeIndex \u003d input.indexOf(\"\" + (idx + 1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String newTime \u003d Parser.reformatDateAndTime(input.substring(newTimeIndex + 2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            task.setTime(newTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return Message.UPDATE_TIME + newTime;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new TaskIndexException(Message.INDEX_ERROR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Manages a Todo task by parsing user input and storing it into the task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param storage The Storage instance used to write the task into the task list file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param input The given user input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName The path to the task list file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String manageTodo(Storage storage, String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new EmptyDescriptionException(Message.DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String description \u003d input.substring(input.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Todo todo \u003d new Todo(description, false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String result \u003d \"T~0~\" + description;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            storage.writeToFile(result);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            return (addTask(todo));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Manages an Event task by parsing user input and storing it into the task list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param storage The Storage instance used to write the task into the task list file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param input The given user input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName The path to the task list file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String manageEvent(Storage storage, String input) throws EmptyDescriptionException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new EmptyDescriptionException(Message.DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String description \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String remaining \u003d input.substring(input.indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String[] split \u003d remaining.split(\" \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            if (split[0].compareTo(\"at\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String rawDateTime \u003d input.substring(input.indexOf(\"/\") + 4);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String time \u003d Parser.reformatDateAndTime(rawDateTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                Event event \u003d new Event(description, false, time);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String result \u003d \"E~0~\" + description + \"~\" + time;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                storage.writeToFile(result);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                return addTask(event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                throw new InvalidTimeFormatException(Message.TIME_ERROR);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Manages a Deadline task by parsing user input and storing it into the task list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param storage The Storage instance used to write the task into the task list file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param input The given user input."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param fileName The path to the task list file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String manageDeadline(Storage storage, String input) throws EmptyDescriptionException, InvalidTimeFormatException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            throw new EmptyDescriptionException(Message.DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String description \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String remaining \u003d input.substring(input.indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String[] split \u003d remaining.split(\" \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            if (split[0].compareTo(\"by\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String rawDateTime \u003d input.substring(input.indexOf(\"/\") + 4);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String time \u003d Parser.reformatDateAndTime(rawDateTime);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, false, time);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                String result \u003d \"D~0~\" + description + \"~\" + time;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                storage.writeToFile(result);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                return addTask(deadline);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                throw new InvalidTimeFormatException(Message.TIME_ERROR);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (this.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d \"Sorry, your list is currently empty!\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            Task task \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            String str \u003d (i + 1) + \".\" + task.toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            result +\u003d str;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            if (i !\u003d this.tasks.size() - 1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chishanw"
        },
        "content": "                result +\u003d \"\\n\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 222
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * It has a description, and is marked as done or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Constructs a new Todo task instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param description The description of the todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * @param isDone Whether the todo task is done or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void setTime(String newTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        String str \u003d \"[T]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[O] \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "            str +\u003d \"[X] \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        str +\u003d this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chishanw": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../css/style.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" styleClass\u003d\"dialog-text\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" pannable\u003d\"true\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        \u003cVBox id\u003d\"pane\" fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"388.0\" stylesheets\u003d\"@../css/style.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chishanw": 24
    }
  },
  {
    "path": "src/test/java/duke/core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Tests written for the Parser class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Tests the command parsing of the Parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void testCommandParsing() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertEquals(new TodoCommand(\"todo task\", false), new Parser().parseCommand(\"todo task\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Tests the time parsing of the Parser."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void testTimeParsing() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertEquals(\"Jan 1 2019\", Parser.reformatDateAndTime(\"2019-01-01\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 28
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chishanw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chishanw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chishanw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chishanw"
        },
        "content": " * Tests written for the Todo class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chishanw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chishanw"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     * Tests the string conversion for a Todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chishanw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chishanw"
        },
        "content": "        assertEquals(\"[T][O] Todo Testing\", new Todo(\"Todo Testing\", true).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chishanw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chishanw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chishanw": 17
    }
  },
  {
    "path": "start.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chishanw"
        },
        "content": "@ECHO off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chishanw"
        },
        "content": "gradlew --console\u003dplain run"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chishanw"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "chishanw": 3
    }
  }
]
