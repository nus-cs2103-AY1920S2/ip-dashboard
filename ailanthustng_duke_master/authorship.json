[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    archiveVersion \u003d \"v0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 36,
      "-": 20
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "E , 0 , olympics , 2020-06-01"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "D , 0 , finish assignment , 2020-03-01"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "T , 0 , buy bottle"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "## Brief Description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Ronaldo is a **personal task manager** in the form of a chatbot. Simply key in the command and your task. It\u0027s that easy!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### Help"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can get help from Ronaldo so as to familiarise familiarise yourself with the chatbot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### Add"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can add ToDo, Event, or Deadline tasks to your list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### List"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can display all the tasks in your list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### Done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can mark the tasks in your list as completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### Delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can delete the task once you have completed it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#### Save and Exit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You can save the tasks and exit the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `help` : lists out all the commands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`help` displays all the available commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1. help - lists out available commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2. list - lists out all the tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3. todo \u003ctask name\u003e - adds a ToDo task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4. event \u003ctask name\u003e /by \u003cevent date: YYYY-MM-DD\u003e - adds an Event task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "5. deadline \u003ctask name\u003e /by \u003cevent date: YYYY-MM-DD\u003e - adds a Deadline task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "6. done \u003ctask number\u003e - marks indicated task as complete"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "7. delete \u003ctask number\u003e - deletes the indicated task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "8. find \u003ckeyword\u003e - searches for tasks with \u003ckeyword\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "9. bye - saves and closes the program"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![help](help.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `todo` : adds a Todo task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`todo [description]` adds a Todo task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`todo buy bottle`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "I have added [T][ incomplete ] buy bottle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You now have 1 tasks!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![todo](todo.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `event` : adds a Event task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`event [description] /by [YYYY-MM-DD]` adds an Event task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`event olympics /by 2020-06-01`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "I have added [E][ incomplete] olympics (by: Jun 1 2020)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You now have 2 tasks!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![event](event.png)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `deadline` : adds a Deadline task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deadline [description] /by [YYYY-MM-DD]` adds a Deadline task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deadline finish assignment /by 2020-03-01`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "I have added [D][ incomplete] finish assignment (by: Mar 1 2020)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You now have 3 tasks!"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![deadline](deadline.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `list` : lists out all the tasks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`list` displays all the current tasks in the list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.[T][ incomplete ] buy bottle"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2.[E][ incomplete] olympics (by: Jun 1 2020)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3.[D][ incomplete] finish assignment (by: Mar 1 2020)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![list](list.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `done` : marks indicated task as complete"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`done [index]` marks the task at index as complete"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "I have marked 1.[T][  complete  ] buy bottle as done!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You now have 3 tasks left!"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![done](done.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `delete` : deletes the indicated task"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`delete [index]` removes the task at index from the list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "I have deleted 1.[T][  complete  ] buy bottle"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "You now have 2 tasks remaining!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![delete](delete.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `find` : searches through the list for the keyword"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`find [keyword]` displays all the tasks with the keyword"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`find olympics`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.[E][ incomplete] olympics (by: Jun 1 2020)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![find](find.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "___"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "### `bye` : saves and exits"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`bye` saves and exits the program"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "````"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "![bye](bye.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Credit to @j-lum (Jeffry Lum) for the FXML and Java files for [JAVAFX GUI](https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Credit to MintBerryCrunch for the [code that creates a new thread to display the bye message and terminating the program](https://stackoverflow.com/questions/52393982/javafx-problem-with-platform-runlater-delayed-rendering-of-canvas-graphic)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Credit to Ernest Friedman-Hill for the [code to redirect console output to string in Java](https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java/8708357)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Credit to Skysports.com for the [Ronaldo](https://www.skysports.com/football/news/12961/11812691/cristiano-ronaldo-says-he-deserves-more-ballon-dors-than-lionel-messi) image."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Credit to Biography.com for the [Messi](https://www.biography.com/athlete/lionel-messi) image."
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 195,
      "-": 21
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * AddCommand is a sub-class of Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles adding the tasks into the task list."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    AddCommand(Task task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method firstly checks if the task being added currently exists in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * If not, add it in."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * If yes, do not add it in."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks List of tasks to be added in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (checkDuplicate(tasks, task)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            ui.printDuplicate(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            tasks.getTaskList().add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            ui.printAdd(task, tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method checks the the task exists in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks Lists of tasks to be checked against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param task The task being checked."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns true if there already exists the task in the task list, else returns false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private boolean checkDuplicate(TaskList tasks, Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        boolean bool \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (t.getTaskName().equals(task.getTaskName())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                bool \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return bool;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 50
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Command is an abstract class, that represents an executable."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    abstract void execute(TaskList tasks, UI ui, Storage storage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 10
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Deadline is a sub-class of Task. Represents when to finish a certain task by."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private String strDoneStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 2 params."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param deadline Name of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param by       Deadline for the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Deadline(String deadline, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(deadline);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 3 params."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param deadline   Name of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param by         Deadline for the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param strDoneStatus Defines the done status of the task. Reads either 1 (complete) or 0 (incomplete)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Deadline(String deadline, String by, String strDoneStatus) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.strDoneStatus \u003d strDoneStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (strDoneStatus.equals(\"1\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the format to be saved in the output txt file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns format in as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int myInt \u003d doneStatus ? 1 : 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"D , \" + myInt + \" , \" + taskName + \" , \" + by;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String formattedBy \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedBy + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 60
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * DeleteCommand is a sub-class of Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the deletion of the task in the task list."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method firstly gets the task to be deleted via the taskNumber."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * It then removes the task from the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list to delete the task from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Task task \u003d tasks.getTaskList().get(taskNumber - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        tasks.getTaskList().remove(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printDelete(task, taskNumber, tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 30
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * DoneCommand is a sub-class of Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the marking of completion of tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method gets the task via the taskNumber then marks it as completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list where the task is found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Task task \u003d tasks.getTaskList().get(taskNumber - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        task.mark();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printDone(task, taskNumber, tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 29
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Main Duke class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static BufferedReader br;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static FileWriter fw;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/messi.jpg\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/ronaldo.jpg\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor. Initialises the UI, Storage and TaskList classes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param filePath Path of the file to be read / written to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            ui \u003d new UI();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            tasks \u003d storage.getTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this(\"data/duke.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Method runs the scan method of the parser, which reads input from user. Subsequently writes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * output into text file when command \"bye\" is entered."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printIntro();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                DialogBox.getUserDialog(userText.getText(), user),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Gets the response of Duke."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //Solution below adapted from https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java/8708357"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return baos.toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 201,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Creates a DukeException extended from Exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Event is a sub-class of Task. Represents a task on a certain date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private String strDoneStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 2 params."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param event Name of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param by    Date of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Event(String event, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 3 params."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param event Name of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param by    Date of the event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param strDoneStatus     Defines the done status of the event. Reads either 1 (complete) or 0 (incomplete)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Event(String event, String by, String strDoneStatus) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.strDoneStatus \u003d strDoneStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (strDoneStatus.equals(\"1\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the format to be saved in the output txt file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns format in as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int myInt \u003d doneStatus ? 1 : 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"E , \" + myInt + \" , \" + taskName + \" , \" + by;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String formattedBy \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"[E]\" + super.toString() + \" (by: \" + formattedBy + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 60
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * ExitCommand is a sub-class of Command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the saving of tasks in the task list and exits the program."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method saves the tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list to be saved."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            storage.writeList(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 26
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * FindCommand is a sub-class of Command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the finding of tasks with the keyword in the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    FindCommand(String keyword) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method iterates through the task list and find tasks with the name containing the keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list to be searched."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (t.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                foundTasks.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printFoundTasks(foundTasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 35
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * HelpCommand is a sub-class of Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the printing of the help list."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method simply prints out the available commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 21
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * ListCommand is a sub-class of Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * It handles the printing of tasks in the task list."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method simply prints out all the tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks The task list of tasks to be printed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param ui The UI class to print out the messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param storage The Storage class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ui.printList(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 21
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/messi.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ronaldo.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initialises the dialog box with the welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! I\u0027m Ronaldooooooo. How may I be of service today?\", dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (response.contains(\"Bye.\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method terminates the application after sleeping for 1.2 seconds"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Solution below is adapted from https://stackoverflow.com/questions/52393982/javafx-problem-with-platform-runlater-delayed-rendering-of-canvas-graphic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                Thread.sleep(1200);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 77
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Parser class. This class manages the input of the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor. Initialises the Scanner class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method reads the input of the users and subsequently does the appropriate actions via the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * methods in the TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param fullCommand This is the full input from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String[] commandSplit \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String rest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String action \u003d commandSplit[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        switch (action.toLowerCase()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Description cannot be empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                command \u003d new AddCommand(new ToDos(rest.trim()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Description cannot be empty\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                String[] restArr \u003d rest.split(\"/by\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                if (restArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    throw new DukeException(\"Sorry! Please enter a date.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    command \u003d new AddCommand(new Event(restArr[0].trim(), restArr[1].trim()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Description cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                String[] restArr \u003d rest.split(\"/by\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                if (restArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    throw new DukeException(\"Sorry! Please enter a date.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    command \u003d new AddCommand(new Deadline(restArr[0].trim(), restArr[1].trim()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (commandSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a task number\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a task number\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                int taskNum \u003d Integer.parseInt(rest.trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                command \u003d new DoneCommand(taskNum);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (commandSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a task number\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a task number\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                int taskNum \u003d Integer.parseInt(rest.trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                command \u003d new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (commandSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a keyword\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            rest \u003d commandSplit[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (rest.isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new DukeException(\"Sorry! Please enter a keyword\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                command \u003d new FindCommand(rest);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new DukeException(\"Sorry! Please enter a valid command.\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    + \"Type \u0027help\u0027 to list available commands\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 112
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Storage class manages the reading and writing of the txt file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private BufferedReader br;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static FileWriter fw;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor. Initialises the file if it exists. Creates the file the file does not exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param filePath Path of the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws IOException Throws an error if some sort of I/O error is met."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.file.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method converts the string of texts from the input file to the ArrayList of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws FileNotFoundException Throws an error if file is not found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public TaskList getTaskList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cString\u003e stringArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                stringArr.add(st);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new TaskList(stringArr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Writes the tasks in the ArrayList of tasks to the output file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws IOException Throws an error if there is some sort of I/O error."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void writeList(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Task t : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            fw.write(t.save() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        fw.flush();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 67
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Superclass of the Event, Deadline and Todos class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean doneStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String taskName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor. Initialises the task name and the done status as incomplete."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param taskName Name of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.doneStatus \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Marks the task as complete / incomplete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void mark() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.doneStatus \u003d !this.doneStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * The save format of each task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns null as it is overwritten in the subclasses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.doneStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String symbol;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (doneStatus) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            symbol \u003d \"  complete  \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            symbol \u003d \" incomplete \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"[\" + symbol + \"] \" + taskName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 52
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * TaskList class holds an ArrayList of all the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cString\u003e stringArr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor. Initialises the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param stringArr stringArr is taken in as a parameter for the method parseTaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    TaskList(ArrayList\u003cString\u003e stringArr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.stringArr \u003d stringArr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!stringArr.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            parseTaskList(stringArr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method converts each line in the text file to a Task object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param stringArr Takes in an array of Strings in a certain format which is then converted to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *                  individual Task objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private void parseTaskList(ArrayList\u003cString\u003e stringArr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (String st : stringArr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            String[] split \u003d st.split(\",\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                String currString \u003d split[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                split[i] \u003d currString.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            switch (split[0]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                taskList.add(new Event(split[2], split[3], split[1]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                taskList.add(new Deadline(split[2], split[3], split[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                taskList.add(new ToDos(split[2], split[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 56
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * ToDos is a subclass of Task. Represents tasks that have to be done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    String strDoneStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 1 param."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param todo Name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ToDos(String todo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructor that takes in 2 params."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param todo Name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param strDoneStatus    Defines the done status of the task. Reads either 1 (complete) or 0 (incomplete)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ToDos(String todo, String strDoneStatus) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (strDoneStatus.equals(\"1\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.doneStatus \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the format to be saved in the output txt file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Returns format in as a string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int myInt \u003d doneStatus ? 1 : 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"T , \" + myInt + \" , \" + taskName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 46
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * UI class supports everything that is displayed to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final String HELP_LIST \u003d \"1. help - lists out available commands\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"2. list - lists out all the tasks\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"3. todo \u003ctask name\u003e - adds a ToDo task\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"4. event \u003ctask name\u003e /by \u003cevent date: YYYY-MM-DD\u003e - adds an Event task\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"5. deadline \u003ctask name\u003e /by \u003cevent date: YYYY-MM-DD\u003e - adds a Deadline task\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"6. done \u003ctask number\u003e - marks indicated task as complete\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"7. delete \u003ctask number\u003e - deletes the indicated task\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"8. find \u003ckeyword\u003e - searches for tasks with \u003ckeyword\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"9. bye - saves and closes the program\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints the introduction logo when program is first started."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    static void printIntro() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \" ____        _        \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"Hello, I\u0027m Duke \\n\" + \"How can I help you today?\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"Type \u0027help\u0027 to list available commands\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints the goodbye message when user inputs \"bye\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printAdd(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"I have added \" + task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"You now have \" + tasks.getTaskList().size() + \" tasks!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out the tasks in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printList(TaskList tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(\"You have 0 outstanding tasks!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                int listNo \u003d list.indexOf(s) + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                System.out.println(listNo + \".\" + s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out task as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param task Task to be marked as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param taskNumber Index of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks Task list where task can be found."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printDone(Task task, int taskNumber, TaskList tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"I have marked \" + taskNumber + \". \" + task + \" as done!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"You now have \" + tasks.getTaskList().size() + \" tasks left!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out task as deleted."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param task Task to be deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param taskNumber Index of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param tasks Task list where the task can be found."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printDelete(Task task, int taskNumber, TaskList tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //I have deleted \u003ctask\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"I have deleted \" + taskNumber + \". \" + task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"You now have \" + tasks.getTaskList().size() + \" tasks remaining!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out the tasks found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param list Takes in a list to print out."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printFoundTasks(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(\"There were no tasks found\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                int listNo \u003d list.indexOf(s) + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                System.out.println(listNo + \".\" + s);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out that the task is duplicated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param task The duplicated task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printDuplicate(Task task) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(\"The task \u0027\" + task.getTaskName() + \"\u0027 you are adding already exists!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prints out the HELP_LIST."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        System.out.println(HELP_LIST);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 132
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"1.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"423.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"424.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"488.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testDoneStatus() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Deadline deadlineTest \u003d new Deadline(\"test\", \"2020-01-01\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(false, deadlineTest.getDoneStatus());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Deadline deadlineTest \u003d new Deadline(\"test\", \"2020-01-01\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(\"test\", deadlineTest.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 17
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testDoneStatus() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Event eventTest \u003d new Event(\"test\", \"2020-01-01\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(false, eventTest.getDoneStatus());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Event eventTest \u003d new Event(\"test\", \"2020-01-01\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(\"test\", eventTest.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 17
    }
  },
  {
    "path": "src/test/java/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ToDosTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testDoneStatus() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ToDos todoTest \u003d new ToDos(\"test\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(false, todoTest.getDoneStatus());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void testTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ToDos todoTest \u003d new ToDos(\"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(\"test\", todoTest.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 17
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "todo read book"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "if ! javac -cp ./src -Xlint:none -d ../bin ./src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "fi "
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 34
    }
  }
]
