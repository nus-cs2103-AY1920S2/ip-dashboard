[
  {
    "path": ".gitignore",
    "fileType": "gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "bin/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "text-ui-test/ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "text-ui-test/data/*.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "data/*.txt"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 3,
      "-": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "group \u0027jiachen.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    mainClassName \u003d \"jiachen.duke.Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 21,
      "-": 19
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#Tue Jan 28 19:36:46 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.5.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public DeadlineTask(String description, String deadline) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.by \u003d deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (deadline.isEmpty()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"Missing /by clause or missing by when!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"D | \" + super.format() + \" | \" + DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\").format(this.by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 23
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Deadline task represents sa task that has a due date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param description the description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param deadline    the deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @throws DateTimeParseException     the date time parse exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public DeadlineTask(String description, String deadline)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          throws InvalidDukeFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    if (deadline.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      throw new InvalidDukeFormatException(\"Missing /by clause or missing by when!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.by \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d YYYY\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"[D]\" + super.toString() + \" (by: \" + formatter.format(this.by) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String format() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"D | \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + super.format()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \" | \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\").format(this.by);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 45
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The enum Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "enum Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Exit command command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  EXIT_COMMAND,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * List command command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  LIST_COMMAND,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Done command command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  DONE_COMMAND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Delete command command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  DELETE_COMMAND,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Todo command command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  TODO_COMMAND,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Deadline command command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  DEADLINE_COMMAND,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Event command command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  EVENT_COMMAND,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Find command command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  FIND_COMMAND"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The type Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private TaskList tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param filePath the file path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public Duke(String filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    ui \u003d new Ui();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      tasks \u003d storage.load();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      ui.printLoadingError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * The entry point of application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param args the input arguments"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** the Main entry point into the Duke program */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    ui.printHeader();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    String desc \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    String timestamp \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    main:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String line \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String[] separateLine \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String commandStr \u003d separateLine[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String parameters \u003d separateLine.length \u003e 1 ? separateLine[1] : \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      Task task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String[] taskInfo;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      String[] splitted;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      int taskId;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        switch (commandStr) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"bye\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.EXIT_COMMAND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"list\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.LIST_COMMAND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"done\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DONE_COMMAND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"delete\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DELETE_COMMAND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"todo\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.TODO_COMMAND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"deadline\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DEADLINE_COMMAND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"event\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.EVENT_COMMAND;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case \"find\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.FIND_COMMAND;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case EXIT_COMMAND:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break main;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case LIST_COMMAND:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printTasks(tasks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case FIND_COMMAND:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ArrayList\u003cTask\u003e copy \u003d new ArrayList\u003c\u003e(tasks.getList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            copy.removeIf((t -\u003e !t.description.contains(parameters)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printFilteredTasks(new TaskList(copy));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case DONE_COMMAND:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            splitted \u003d line.split(\" \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (splitted.length \u003c 2) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              throw new InvalidDukeFormatException(\"The index of a done cannot be empty.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            taskId \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskId \u003c\u003d 0 || taskId \u003e tasks.size()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              throw new InvalidDukeFormatException(\"Invalid task index provided!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task \u003d tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printDoneTask(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case DELETE_COMMAND: {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            splitted \u003d line.split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (splitted.length \u003c 2) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              throw new InvalidDukeFormatException(\"The index of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            taskId \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskId \u003c\u003d 0 || taskId \u003e tasks.size()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              throw new InvalidDukeFormatException(\"Invalid task index provided!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          ui.printRemoveTask(tasks.remove(taskId - 1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          storage.save(tasks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case TODO_COMMAND:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task \u003d new TodoTask(parameters);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            taskInfo \u003d parameters.split(\"/by\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            desc \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            timestamp \u003d \"\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskInfo.length \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              desc \u003d taskInfo[0].trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskInfo.length \u003e 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              timestamp \u003d taskInfo[1].trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task \u003d new DeadlineTask(desc, timestamp);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          case EVENT_COMMAND:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            taskInfo \u003d parameters.split(\"/at\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskInfo.length \u003e 0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              desc \u003d taskInfo[0].trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (taskInfo.length \u003e 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              timestamp \u003d taskInfo[1].trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            task \u003d new EventTask(desc, timestamp);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.printNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      } catch (DukeException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ui.printError(e.toString());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 214,
      "-": 3
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * General Duke exception for more specific exceptions to implement"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Duke exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param errMsg the err msg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"☹ OOPS!!! \" + this.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 20
    }
  },
  {
    "path": "src/main/java/jiachen/duke/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Event task takes in at at time clause"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param description the description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param at          the at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @throws DateTimeParseException     the date time parse exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public EventTask(String description, String at)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "          throws InvalidDukeFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    if (at.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      throw new InvalidDukeFormatException(\"Missing /at clause or missing at when!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.at \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d YYYY\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"[E]\" + super.toString() + \" (by: \" + formatter.format(this.at) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String format() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"E | \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + super.format()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \" | \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\").format(this.at);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 46
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Throws when user tries to use an invalid command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Instantiates a new Invalid duke command exception. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public InvalidDukeCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 11
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidDukeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Throws wehn bad format is encountered with input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidDukeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Invalid duke format exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param errMsg the err msg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public InvalidDukeFormatException(String errMsg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(errMsg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 15
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidTaskFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Exception thrown when file given to load from is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidTaskFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Invalid task file exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public InvalidTaskFileException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(\"Unable to load task file.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 13
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Storage handle persistance to and from the local file system"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String pathname;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param filePath the file path of the file to read and write to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.pathname \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Loads and returns task list if valid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws DukeException the duke exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Path filePath \u003d Paths.get(this.pathname);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (Files.notExists(filePath)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.createDirectories(filePath.getParent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidTaskFileException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(pathname));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                String[] tokens \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    tokens[i] \u003d tokens[i].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    switch (tokens[0]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            t \u003d new TodoTask(tokens[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            t \u003d new DeadlineTask(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            t \u003d new EventTask(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            throw new InvalidDukeFormatException(\"Unknown Command.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(\"unable to add this item\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(line);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Save changes from the tasklist to the file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param tasks the tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        StringBuilder buffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            buffer.append(task.format()).append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        BufferedWriter writer \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer \u003d new BufferedWriter(new FileWriter(pathname));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer.write(buffer.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 107
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * generic abstract task object that specific kinds of task can implement eg Todo, Deadline and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * The Description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Is task completed? */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param description the description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Gets status icon."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the status icon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Mark as done. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Format string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String format() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return (isDone ? \"1 | \" : \"0 | \") + this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 52
    }
  },
  {
    "path": "src/main/java/jiachen/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The type Task list. Wrapper and abstraction for the ArrayList of Task objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Instantiates a new Task list. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param tasks the tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Wrapper around the add function"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param task the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    this.tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Returns undelying ArrayList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return this.tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * get task at index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param index the index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public Task get(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return tasks.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * get size of tasklist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the int"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public int size() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return tasks.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Remove task from tasklist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param index the index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @return the task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public Task remove(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return tasks.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 71
    }
  },
  {
    "path": "src/main/java/jiachen/duke/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * This object represents a Todo Task. Todo tasks are generic tasks that just contain descriptions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Instantiates a new Todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param description the description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public TodoTask(String description) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      throw new InvalidDukeFormatException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public String format() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    return \"T | \" + super.format();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 30
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The Ui class handles the view and presentation layer of the app"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Print header. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printHeader() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    String logo \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\tHello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Generic print function used to print any kind of messages to the screen"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param message the message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void print(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Print error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param errorMessage the error message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printError(String errorMessage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    print(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Print notification after removing task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param task the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printRemoveTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t\\t\" + task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Print notification after finishing task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param task the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printDoneTask(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t\\t\" + task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * List all tasks in order"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param tasks the tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    for (int i \u003d 1; i \u003c\u003d tasks.getList().size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      System.out.println(\"\\t \" + i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * Print notification after adding new task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param task the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   * @param numOfTasks the num of tasks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "   */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printNewTask(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \"\\t Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"\\t\\t\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \"\\t Now you have \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + numOfTasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  /** Print loading error. */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printLoadingError() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\tERR: unable to load file from disk!\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  private void printSeparator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public void printFilteredTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    System.out.println(\"\\tHere are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    for (int i \u003d 1; i \u003c\u003d tasks.getList().size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      System.out.println(\"\\t \" + i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    printSeparator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 115
    }
  },
  {
    "path": "src/test/java/jiachen/duke/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class DeadlineTaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testInvalidConstructor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Assertions.assertThrows("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              new DeadlineTask(\"\", \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testInvalidDateConstructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Assertions.assertThrows("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DateTimeParseException.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              new DeadlineTask(\"desc\", \"invalid date\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testConstructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              new DeadlineTask(\"this is a discription\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      DeadlineTask task \u003d new DeadlineTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      assertEquals(task.toString(), \"[D][✘] hellololooloo there (by: Dec 1 2020)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void format() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      DeadlineTask task \u003d new DeadlineTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      assertEquals(task.format(), \"D | 0 | hellololooloo there | 01/12/2020 0700\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 57
    }
  },
  {
    "path": "src/test/java/jiachen/duke/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class EventTaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidConstructor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    new EventTask(\"\", \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidDateConstructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                DateTimeParseException.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    new EventTask(\"desc\", \"invalid date\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testConstructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    new EventTask(\"this is a discription\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            EventTask task \u003d new EventTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(task.toString(), \"[E][✘] hellololooloo there (by: Dec 1 2020)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            EventTask task \u003d new EventTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(task.format(), \"E | 0 | hellololooloo there | 01/12/2020 0700\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 57
    }
  },
  {
    "path": "src/test/java/jiachen/duke/MockTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class MockTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  public MockTask(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 8
    }
  },
  {
    "path": "src/test/java/jiachen/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String path \u003d \"./data/test.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void load() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            if (Files.exists(Paths.get(path))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.delete(Paths.get(path));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Files.write("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    Paths.get(path),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    (\"D | 1 | do ma homework | 01/12/2020 0700\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            + \"E | 0 | take a nap? | 01/12/2020 0700\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            + \"E | 0 | take a nap | 01/12/2020 0800\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            + \"T | 0 | test task\\n\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                            .getBytes());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.size(), 4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Files.delete(Paths.get(path));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void save() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (Files.exists(Paths.get(path))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.delete(Paths.get(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"mock task 1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"mock task 2\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"mock task 3\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assert (Files.exists(Paths.get(path)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Files.delete(Paths.get(path));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 74
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void add() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(tasks.getList().size(), 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void get() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(tasks.get(0).description, \"hellow world\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(tasks.getList().size(), 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void remove() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(tasks.getList().size(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    tasks.remove(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(tasks.getList().size(), 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 42
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(task.getStatusIcon(), (\"\\u2718\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    task.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(task.getStatusIcon(), \"\\u2713\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void markAsDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assert (!task.isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    task.markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assert (task.isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testToString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(task.toString(), \"[\\u2718] this is a description\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void format() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    assertEquals(task.format(), \"0 | this is a description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 36
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TodoTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testInvalidConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Assertions.assertThrows("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              new TodoTask(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testConstructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "              new TodoTask(\"this is a discription\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      TodoTask todo \u003d new TodoTask(\"hellololooloo there\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      assertEquals(todo.toString(), \"[T][✘] hellololooloo there\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  void format() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      TodoTask todo \u003d new TodoTask(\"hellololooloo there\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      assertEquals(todo.format(), \"T | 0 | hellololooloo there\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "      e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 46
    }
  },
  {
    "path": "src/test/java/jiachen/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "  // cant unit test cause function are impure and is literally calling a side effect."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 5
    }
  },
  {
    "path": "text-ui-test/EXPECTED.TXT",
    "fileType": "TXT",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\tHello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[T][✘] clean my room"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! Missing /by clause or missing by when!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[D] [✘] do ma homework (by: Dec 1 2020)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[E] [✘] take a nap? (by: Dec 1 2020)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[E] [✘] take a nap (by: Dec 1 2020)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 1. [T][✘] clean my room"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 2. [D] [✘] do ma homework (by: Dec 1 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 3. [E] [✘] take a nap? (by: Dec 1 2020)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 4. [E] [✘] take a nap (by: Dec 1 2020)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! The index of a done cannot be empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[D] [✓] do ma homework (by: Dec 1 2020)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! Invalid task index provided!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[T][✘] test task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 1. [T][✘] clean my room"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 2. [D] [✓] do ma homework (by: Dec 1 2020)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 3. [E] [✘] take a nap? (by: Dec 1 2020)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 4. [E] [✘] take a nap (by: Dec 1 2020)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 5. [T][✘] test task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! The index of a delete cannot be empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t ☹ OOPS!!! Invalid task index provided!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t\t[T][✘] clean my room"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 1. [D] [✓] do ma homework (by: Dec 1 2020)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 2. [E] [✘] take a nap? (by: Dec 1 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 3. [E] [✘] take a nap (by: Dec 1 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t 4. [T][✘] test task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 82
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "hello  world"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo clean my room"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "deadline do smth"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "deadline do ma homework /by tonight?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "event take a nap?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "event take a nap /at asap"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo test task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete 1000"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo add clean my bed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "find clean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 21
    }
  },
  {
    "path": "text-ui-test/runtime.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ -e \".data/duke.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    rm \"data/duke.txt\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/jiachen/duke/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "java -classpath ../bin/jiachen/duke Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 40
    }
  }
]
