[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "[![Build Status](https://travis-ci.com/jiachen247/duke.svg?branch\u003dmaster)](https://travis-ci.org/jiachen247/duke)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "jiachen247": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "group \u0027jiachen.duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    mainClassName \u003d \"jiachen.duke.Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 28,
      "-": 18
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } else if ($1 ~ /\\.TXT$/) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 28
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "By: `@jiachen247`      Since: `Jun 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Duke is for those who *prefer to use a desktop app for managing tasks*. More importantly, Duke is personal assistant *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Duke can manage yout tasks faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "- Ensure you have Java `11` installed in your Computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "- Download the latest `duke.jar` [here](https://github.com/jiachen247/duke/releases)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "-  Copy the file to the folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "-  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "![](Ui.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "-  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "-  Some example commands you can try:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`hello`* : say hello to duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`todo`* : add a todo task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`event`* : add a new event "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`deadline`* : add a new deadline "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* **`done`**`2`: mark task 2 as complete "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* **`delete`**`3` : delete task 3"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`list`* : list all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`find`* : find tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`help`* : ask duke for help"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *`exit`* : exit duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "-  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "###"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add DESCRIPTION`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* Items in square brackets are optional e.g `[MORE KEYWORDS]` can be used as needed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "###"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Adding a todo: `todo`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Adds a todo task to the duke +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "A description can be more than a single word"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `todo clean my room`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Adding a event: `event`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Adds a event task to the duke +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `event DESCRIPTION /at DATETIME`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Datetime has to be in the form `dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Datetime also support natural dates eg `mon` or `monday` which will be the next monday from today"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `event sleep /at 01/01/2019 2130`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `event meet duke /at tue`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Adds a deadline task to the duke +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `deadline DESCRIPTION /by DATETIME`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Datetime has to be in the form `dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Datetime also support natural dates eg `mon` or `monday` which will be the next monday from today"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `deadline do homework /by 01/01/2019 2359`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `deadline do math homework /by wed`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Listing all tasks : `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Shows a list of all task in duke. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Searching for tasks: `find`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* Only the task description is searched."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* Matched if task description contains the keywords entirely"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Deleting a task : `delete`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Deletes the specified task from duke. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* The index refers to the index number shown in the displayed task list. (*does not work for find window)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Deletes the 2nd task in duke\u0027s task list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "Duke task data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Duke folder."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Hello* : `hello`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Todo* : `todo DESCRIPTION`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Event* : `event DESCRIPTION /at DATETIME`+"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "eg. `event sleep /at 01/01/2019 2130`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Deadline* : `deadline DESCRIPTION /by DATETIME` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "eg. `deadline return book /by 01/01/2019 1800`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Delete* : `delete INDEX` + eg. `delete 3`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` + eg. `find jiachen`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Done* : `done INDEX` + "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "eg. `done 2`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "This user guide format has been adapted from [addressbook level 3](https://github.com/nus-cs2103-AY1920S2/addressbook-level3/blob/master/docs/UserGuide.adoc)"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 140,
      "-": 18
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The enum Command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "enum Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Exit command command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    EXIT_COMMAND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * List command command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    LIST_COMMAND,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Done command command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    DONE_COMMAND,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Delete command command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    DELETE_COMMAND,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Todo command command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    TODO_COMMAND,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Deadline command command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    DEADLINE_COMMAND,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Event command command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    EVENT_COMMAND,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Find command command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    FIND_COMMAND,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Help command command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    HELP_COMMAND,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Hello command command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    HELLO_COMMAND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 47
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DateTimeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Singleton Datetime helper."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Helps parse natual dates via a simple lookup table"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * This is the format input dates should come int. eg 24/07/1996 1200"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static DateTimeFormatter eventFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d YYYY\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private static DateTimeUtil _instance \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private HashMap\u003cString, DayOfWeek\u003e aliasLookupTable \u003d new HashMap\u003cString, DayOfWeek\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private DateTimeUtil() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"monday\", DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"mon\", DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"tuesday\", DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"tue\", DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"wednesday\", DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"wed\", DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"thursday\", DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"thur\", DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"friday\", DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"fri\", DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"saturday\", DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"sat\", DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"sunday\", DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        aliasLookupTable.put(\"sun\", DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Get instance date time util."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the date time util"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static DateTimeUtil getInstance() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (_instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            return new DateTimeUtil();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return _instance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Check if date string is a natual date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param date as string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return return true if date string is a natural date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public boolean isNatualDate(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return aliasLookupTable.containsKey(date.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Convert from natual date string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * returns empty string if not natual date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * caller to first check if string is a natual date via isNatualDate method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param timestamp in natual format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return date string formmated using the input format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String convertFromNatualDate(String timestamp) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        timestamp \u003d timestamp.toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (!isNatualDate(timestamp)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        DayOfWeek day \u003d aliasLookupTable.get(timestamp);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        now \u003d now.with(TemporalAdjusters.next(day));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return now.format(inputFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 79
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The type Deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String toBeDoneBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param deadline    the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public DeadlineTask(String description, String deadline) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.toBeDoneBy \u003d deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (deadline.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"Missing /by clause or missing by when!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.toBeDoneBy + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        LocalDateTime dateString \u003d LocalDateTime.parse(this.toBeDoneBy, DateTimeUtil.inputFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"D | \" + super.format() + \" | \" + dateString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 38
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Gets user dialog."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param text the text"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param img  the img"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the user dialog"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Gets duke dialog."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param text the text"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param img  the img"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the duke dialog"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 75
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The type Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a base Duke with base constructor."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage \u003d new Storage(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            ui.formatLoadingError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            System.out.println(ui.formatLoadingError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Command parseCommand(String commandStr) throws InvalidDukeCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        switch (commandStr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.EXIT_COMMAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.LIST_COMMAND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DONE_COMMAND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DELETE_COMMAND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.TODO_COMMAND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.DEADLINE_COMMAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.EVENT_COMMAND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.FIND_COMMAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.HELP_COMMAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        case \"hello\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            command \u003d Command.HELLO_COMMAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * The Main entry point into the Duke program."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String[] separateLine \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String commandStr \u003d separateLine[0];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String parameters \u003d separateLine.length \u003e 1 ? separateLine[1] : \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String response \u003d \"Hello!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            switch (parseCommand(commandStr)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case EXIT_COMMAND:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case LIST_COMMAND:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case FIND_COMMAND:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleFind(parameters);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case DONE_COMMAND:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleDone(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case DELETE_COMMAND:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleDelete(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case TODO_COMMAND:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleTodo(parameters);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleDeadline(parameters);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case EVENT_COMMAND:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleEvent(parameters);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case HELP_COMMAND:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleHelp();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            case HELLO_COMMAND:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                response \u003d handleHello();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            response \u003d ui.formatError(e.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatHelp();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleHello() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatHello();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleEvent(String parameters) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String[] taskInfo \u003d parameters.split(\"/at\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String timestamp \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskInfo.length \u003e 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            desc \u003d taskInfo[0].trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskInfo.length \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            timestamp \u003d taskInfo[1].trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (DateTimeUtil.getInstance().isNatualDate(timestamp)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            timestamp \u003d DateTimeUtil.getInstance().convertFromNatualDate(timestamp);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new EventTask(desc, timestamp);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleDeadline(String parameters) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String[] taskInfo \u003d parameters.split(\"/by\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String timestamp \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskInfo.length \u003e 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            desc \u003d taskInfo[0].trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskInfo.length \u003e 1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            timestamp \u003d taskInfo[1].trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (DateTimeUtil.getInstance().isNatualDate(timestamp)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            timestamp \u003d DateTimeUtil.getInstance().convertFromNatualDate(timestamp);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new DeadlineTask(desc, timestamp);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleTodo(String param) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new TodoTask(param);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatNewTask(task, tasks.size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleDelete(String input) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String[] splitted \u003d input.split(\" \");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (splitted.length \u003c 2) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"The index of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        int taskId \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskId \u003c\u003d 0 || taskId \u003e tasks.size()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"Invalid task index provided!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatRemoveTask(tasks.remove(taskId - 1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleDone(String input) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String[] splitted \u003d input.split(\" \");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (splitted.length \u003c 2) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"The index of a done cannot be empty.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        int taskId \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (taskId \u003c\u003d 0 || taskId \u003e tasks.size()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"Invalid task index provided!\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatDoneTask(task);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleFind(String parameters) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ArrayList\u003cTask\u003e copy \u003d new ArrayList\u003c\u003e(tasks.getList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        copy.removeIf((t -\u003e !t.description.contains(parameters)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatFilteredTasks(new TaskList(copy));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String handleList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return ui.formatTasks(tasks);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DialogBox.getUserDialog(userText.toString(), user),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DialogBox.getDukeDialog(dukeText.toString(), duke)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        );"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assert !input.isEmpty() : \"Input cannot be empty!\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return this.run(input);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        });"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        });"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 336,
      "-": 2
    }
  },
  {
    "path": "src/main/java/jiachen/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * General Duke exception for more specific exceptions to implement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Duke exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param errMsg the err msg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"OOPS!!! \" + this.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 20
    }
  },
  {
    "path": "src/main/java/jiachen/duke/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Event task takes in at at time clause."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param at          the at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws DateTimeParseException     the date time parse exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public EventTask(String description, String at)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        throws InvalidDukeFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (at.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"Missing /at clause or missing at when!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, DateTimeUtil.inputFormatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeUtil.eventFormatter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formatter.format(this.at) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"E | \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + super.format()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \" | \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + DateTimeUtil.inputFormatter.format(this.at);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 46
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Throws when user tries to use an invalid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Invalid duke command exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public InvalidDukeCommandException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 13
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidDukeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Throws wehn bad format is encountered with input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidDukeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Invalid duke format exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param errMsg the err msg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public InvalidDukeFormatException(String errMsg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 15
    }
  },
  {
    "path": "src/main/java/jiachen/duke/InvalidTaskFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Exception thrown when file given to load from is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class InvalidTaskFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Invalid task file exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public InvalidTaskFileException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(\"Unable to load task file.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 13
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 12
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 31
    }
  },
  {
    "path": "src/main/java/jiachen/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 52
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * Storage handle persistance to and from the local file system."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String pathname;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param filePath the file path of the file to read and write to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.pathname \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Loads and returns task list if valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws DukeException the duke exception"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Path filePath \u003d Paths.get(this.pathname);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (Files.notExists(filePath)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.createDirectories(filePath.getParent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidTaskFileException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(pathname));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                String[] tokens \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    tokens[i] \u003d tokens[i].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    switch (tokens[0]) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        t \u003d new TodoTask(tokens[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        t \u003d new DeadlineTask(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        t \u003d new EventTask(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        throw new InvalidDukeFormatException(\"Unknown Command.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(\"unable to add this item\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    System.out.println(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Save changes from the tasklist to the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param tasks the tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        StringBuilder buffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            buffer.append(task.format()).append(\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        BufferedWriter writer \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer \u003d new BufferedWriter(new FileWriter(pathname));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer.write(buffer.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 111
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * generic abstract task object that specific kinds of task can implement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * The Description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Is task completed?."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Gets status icon."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the status icon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Mark as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return (isDone ? \"1 | \" : \"0 | \") + this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 55
    }
  },
  {
    "path": "src/main/java/jiachen/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The type Task list. Wrapper and abstraction for the ArrayList of Task objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param tasks the tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Wrapper around the add function."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param task the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Returns undelying ArrayList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * get task at index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param index the index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * get size of tasklist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the int"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Remove task from tasklist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param index the index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 73
    }
  },
  {
    "path": "src/main/java/jiachen/duke/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * This object represents a Todo Task. Todo tasks are generic tasks that just contain descriptions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Instantiates a new Todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @throws InvalidDukeFormatException the invalid duke format exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public TodoTask(String description) throws InvalidDukeFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            throw new InvalidDukeFormatException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"T | \" + super.format();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 30
    }
  },
  {
    "path": "src/main/java/jiachen/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " * The Ui class handles the view and presentation layer of the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param message the message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String format(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return formatSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + formatSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format error string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param errorMessage the error message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatError(String errorMessage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format remove task string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param task the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatRemoveTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return formatSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t Noted. I\u0027ve removed this task:\\t\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + task + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + formatSeparator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format done task string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param task the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatDoneTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return formatSeparator()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t Nice! I\u0027ve marked this task as done: \\n\\t\\t\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + formatSeparator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format tasks string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param tasks the tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(formatSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getList().size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            builder.append(\"\\t \").append(i).append(\". \").append(tasks.get(i - 1)).append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        builder.append(formatSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format new task string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param task       the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param numOfTasks the num of tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatNewTask(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return formatSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t\\t\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\t Now you have \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + numOfTasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \" tasks in the list.\\n\" + formatSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format loading error string."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatLoadingError() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"\\tERR: unable to load file from disk!\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    private String formatSeparator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"\\t_____________________________________________________\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format filtered tasks string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @param tasks the tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatFilteredTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(formatSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        builder.append(\"\\n\\tHere are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getList().size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            builder.append(\"\\t \").append(i).append(\". \").append(tasks.get(i - 1)).append(\"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        builder.append(formatSeparator());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format help message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return help info as a string"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatHelp() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"Here are a list of commands you can try! \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\thello - say hello to duke\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\ttodo - to create a new todo task\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tevent - to create a new event task\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tdeadline - to create a new deadline task\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tdone - to mark a task as done\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tdelete - to delete am existing task\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tlist - to list all tasks\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\tfind - find certain tasks\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\thelp - to get help information\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"\\n\\texit - to leave duke\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * Format Hello message."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     * @return hello message as a string"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public String formatHello() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        return \"Hello there, my name is DUKE and I\u0027m here to help you get organized! \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            + \"To see what I can help you with you could try the `help` command.\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 150
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            fx:controller\u003d\"jiachen.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 23
    }
  },
  {
    "path": "src/test/java/jiachen/duke/DateTimeUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class DateTimeUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void isNatualDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertTrue(DateTimeUtil.getInstance().isNatualDate(\"monday\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertTrue(DateTimeUtil.getInstance().isNatualDate(\"tue\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertFalse(DateTimeUtil.getInstance().isNatualDate(\"blahh\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void convertFromNatualDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        String datetime \u003d DateTimeUtil.getInstance().convertFromNatualDate(\"mon\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        LocalDateTime ldt \u003d LocalDateTime.parse(datetime, DateTimeUtil.inputFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(ldt.getDayOfWeek(), DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 28
    }
  },
  {
    "path": "src/test/java/jiachen/duke/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class DeadlineTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new DeadlineTask(\"\", \"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testConstructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new DeadlineTask(\"this is a discription\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(task.toString(), \"[D][✘] hellololooloo there (by: 01/12/2020 0700)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(\"D | 0 | hellololooloo there | 2020-12-01T07:00\", task.format());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 46
    }
  },
  {
    "path": "src/test/java/jiachen/duke/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class EventTaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidConstructor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new EventTask(\"\", \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidDateConstructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            DateTimeParseException.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new EventTask(\"desc\", \"invalid date\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testConstructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new EventTask(\"this is a discription\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            EventTask task \u003d new EventTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(task.toString(), \"[E][✘] hellololooloo there (at: Dec 1 2020)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            EventTask task \u003d new EventTask(\"hellololooloo there\", \"01/12/2020 0700\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(task.format(), \"E | 0 | hellololooloo there | 01/12/2020 0700\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 57
    }
  },
  {
    "path": "src/test/java/jiachen/duke/MockTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class MockTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    public MockTask(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 8
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.getList().size(), 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.get(0).description, \"hellow world\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.getList().size(), 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.add(new MockTask(\"hellow world\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.getList().size(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(tasks.getList().size(), 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 42
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(task.getStatusIcon(), (\"\\u2718\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2713\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assert (!task.isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assert (task.isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(task.toString(), \"[\\u2718] this is a description\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Task task \u003d new MockTask(\"this is a description\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        assertEquals(task.format(), \"0 | this is a description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 36
    }
  },
  {
    "path": "src/test/java/jiachen/duke/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class TodoTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testInvalidConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            InvalidDukeFormatException.class,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new TodoTask(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testConstructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        Assertions.assertDoesNotThrow("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "                new TodoTask(\"this is a discription\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            TodoTask todo \u003d new TodoTask(\"hellololooloo there\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(todo.toString(), \"[T][✘] hellololooloo there\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            TodoTask todo \u003d new TodoTask(\"hellololooloo there\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            assertEquals(todo.format(), \"T | 0 | hellololooloo there\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        } catch (InvalidDukeFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 46
    }
  },
  {
    "path": "src/test/java/jiachen/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "package jiachen.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    // cant unit test cause function are impure and is literally calling a side effect."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "hello  world"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo clean my room"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "deadline do smth"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "deadline do ma homework /by tonight?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "event take a nap?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "event take a nap /at asap"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo test task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete 1000"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "todo add clean my bed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "find clean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 21
    }
  },
  {
    "path": "text-ui-test/runtime.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    rm ACTUAL.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ -e \".data/duke.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    rm \"data/duke.txt\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/jiachen/duke/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "java -classpath ../bin/jiachen/duke Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiachen247"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "diff ACTUAL.txt EXPECTED.txt"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiachen247"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jiachen247": 40
    }
  }
]
