[
  {
    "path": "Data/saved.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "D - 0 - get gf - 1-Dec-2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "E - 1 - get heart broken - 31-Dec-2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "D - 0 - ernest - 12-Dec-2020"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    id \"checkstyle\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \"5.2.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    //testImplementation \"org.junit.jupiter:junit-jupiter:5.5.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 27,
      "-": 20
    }
  },
  {
    "path": "src/main/java/Contact.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    int number;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    String address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private static ArrayList\u003cContact\u003e contactList\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Contact(String name, int number, String address) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private int getNumber() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.number;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private String getAddress() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void addToContacts(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] details \u003d input.split(\",\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String name \u003d details[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int number \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String address \u003d details[2];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        contactList.add(new Contact(name, number, address));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        output \u003d \"Name: \" + this.getName() + \"\\n No.: \" + this.getNumber() + \"\\n Address: \" + this.getAddress();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 39
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static String getDesc(char[] input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int marker \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d input.length - 1; (input[i] !\u003d \u0027/\u0027); i--) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            marker \u003d i;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d 9; i \u003c marker - 2; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            desc +\u003d input[i];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static String getDate(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] tmp \u003d input.split(\" /by \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] inputs \u003d tmp[1].split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return inputs[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String formatDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d-MMM-yyyy\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String saveToText() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if(this.isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"D - 1 - \" + this.getDescription() + \" - \" + formatDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"D - 0 - \" + this.getDescription() + \" - \" + formatDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"[D][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \" (by: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 54
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Duke extends Application{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Task[] arr \u003d new Task[100];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Duke\\n\" + \"  What can I do for you?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Task.loadSavedData(); //check if there is previous list avail and load if avail"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String command \u003d inputs[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                char[] inputArr \u003d input.toCharArray();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (command.equals(\"todo\") || command.equals(\"t\")) { //create todo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (inputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    String info \u003d Todo.generateTodoDesc(inputArr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Todo task \u003d new Todo(info);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.addTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"event\") || command.equals(\"e\")) { //create event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (inputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    String date, desc;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    date \u003d Event.getEventDate(inputs[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    desc \u003d Event.getEventDesc(inputArr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Event task \u003d new Event(desc, date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.addTask(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"deadline\") || command.equals(\"d\")) { //create deadline"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (inputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    String by, desc;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    by \u003d Deadline.getDate(inputs[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    desc \u003d Deadline.getDesc(inputArr);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Deadline task \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.addTask(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"list\") || command.equals (\"l\")) { //list command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.showTasks();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"done\") || command.equals(\"do\")) { //done command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.taskDone(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"bye\") || command.equals(\"b\")) { //bye command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.saveToFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"delete\") || command.equals(\"del\")) { //delete command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.deleteTask(inputs[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"find\") || command.equals(\"f\")) { //find command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.find(inputs[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"view\") || command.equals(\"v\")) { //view schedules"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task.viewSchedule(inputs[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if(command.equals(\"contact\") || command.equals(\"c\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Contact.addToContacts(inputs[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    throw new InvalidCommandException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void start(Stage stage){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String userText \u003d (userInput.getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String dukeText \u003d (getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                DialogBox.getUserDialog(userText, (user)),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, (duke))"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        );"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 186,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 3
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static String getEventDate(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] tmp \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String[] inputs \u003d tmp[1].split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return inputs[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static String getEventDesc(char[] input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int marker \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d input.length - 1; (input[i] !\u003d \u0027/\u0027); i--) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            marker \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d 6; i \u003c marker - 2; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            desc +\u003d input[i];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String formatDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d-MMM-yyyy\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String saveToText() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if(this.isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"E - 1 - \" + this.getDescription() + \" - \" + formatDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"E - 0 - \" + this.getDescription() + \" - \" + formatDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"[E][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \" (at: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 56
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class InvalidCommandException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 7
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 49
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected static int taskCounter \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    protected static ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void addTask(Task t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskArrList.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"  \" + t.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskCounter++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (taskCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Now you have \" + taskCounter + \" task in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Now you have \" + taskCounter + \" tasks in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void showTasks(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (taskCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Here is the task in your list: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else if (taskCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"You have no tasks in your list :(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (Task t : taskArrList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println((i) + \".\" + taskArrList.get(i-1).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void taskDone(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        char charArr[] \u003d input.toCharArray();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String taskNum \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d 5; i \u003c charArr.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            taskNum +\u003d charArr[i];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int taskInt \u003d Integer.parseInt(taskNum);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskInt -\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskArrList.get(taskInt).isDone \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"  [\" + taskArrList.get(taskInt).getStatusIcon() + \"] \" + taskArrList.get(taskInt).getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void deleteTask(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int taskInt \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskInt -\u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        Task task \u003d taskArrList.get(taskInt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskCounter--;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        System.out.println(\"  [\" + taskArrList.get(taskInt).getStatusIcon() + \"] \" + taskArrList.get(taskInt).getDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if (taskCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Now you have \" + taskCounter + \" task in the list.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Now you have \" + taskCounter + \" tasks in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        taskArrList.remove(taskInt);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void saveToFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for(Task t : taskArrList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            sb.append(t.saveToText() + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        try (PrintStream out \u003d new PrintStream(new FileOutputStream(\"data/saved.txt\"))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            out.print(sb.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Your tasks have been saved to the hard disk\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void loadSavedData() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        File tmpDir \u003d new File(\"data/saved.txt\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String absolutePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if(tmpDir.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            absolutePath \u003d tmpDir.getAbsolutePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Using previously saved list from: \" + absolutePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            Scanner sc \u003d new Scanner(tmpDir);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            while(sc.hasNext()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String[] inputs \u003d input.split(\" - \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String command \u003d inputs[0];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                String status \u003d inputs[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-MMM-yyyy\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                if (command.equals(\"D\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(inputs[3], formatter);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task t \u003d new Deadline(inputs[2], date.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskArrList.add(t);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskCounter++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"E\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(inputs[3], formatter);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task t \u003d new Event(inputs[2], date.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskArrList.add(t);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskCounter++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                } else if (command.equals(\"T\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    Task t \u003d new Todo(inputs[2]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskArrList.add(t);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    taskCounter++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            System.out.println(\"Starting fresh task list.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String saveToText() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void find(String desc) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for(Task t : taskArrList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if(t.description.contains(desc)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                System.out.println(counter + \".\" + t.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static void viewSchedule(String input) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for(Task t : taskArrList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            if(t.getDate().equals(date)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "                System.out.println(counter + \".\" + t.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 177
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public static String generateTodoDesc(char[] input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String desc \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        for (int i \u003d 5; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            desc +\u003d input[i];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String saveToText() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        if(this.isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"T - 1 - \" + this.getDescription();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "            output \u003d \"T - 0 - \" + this.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 38
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 19
    }
  },
  {
    "path": "src/module-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "module duke.main {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    requires javafx.fxml;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    requires javafx.controls;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    requires javafx.graphics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 6
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    public void dukeTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//    void main() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 15
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "  What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "OOPS!!! I\u0027m sorry, but I don\u0027t know what that means."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "OOPS!!! I\u0027m sorry, but I don\u0027t know what that means."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "hello world"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   )"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "l2ejected"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "l2ejected"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "l2ejected": 22
    }
  }
]
