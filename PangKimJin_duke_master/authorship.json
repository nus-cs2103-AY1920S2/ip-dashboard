[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "test {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "PangKimJin": 45
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private File dataFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (InstantiationError e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            tasks \u003d new TaskList(new ArrayList \u003cTask\u003e());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String userText \u003d (userInput.getText());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String dukeText \u003d (getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                DialogBox.getUserDialog(userText, (user)),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, (duke))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Runs the Duke program by writing and loading from data.txt."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.ui.runGreeting();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            String parserOutput \u003d parser.parse(userInput);                // gives parser the user command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            ArrayList \u003cTask\u003e arr \u003d tasks.getArraylist(); // returns the arraylist form of the tasklist"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            ArrayList \u003cString\u003e taskNames \u003d tasks.getNames(arr);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            ArrayList \u003cTask\u003e foundTasks \u003d new ArrayList \u003cTask\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            switch (parserOutput) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"list\"):"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    tasks.print();  // sysout all the items in the tasklist"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"done\"):"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    int doneTask \u003d Integer.parseInt(userInput.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.get(doneTask - 1).setDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(arr.get(doneTask - 1).status + \" \" + arr.get(doneTask - 1).getDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    // write the new updated arr to the duke.txt"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    storage.fileUpdate(this.dataFile, arr);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"todo\"):"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"\u0026#x2639; OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescription +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescription +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        Task curr \u003d new Task(\"todo\", taskDescription);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        arr.add(curr);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        storage.fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"deadline\"):"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"\u0026#x2639; OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String taskDescriptionDate \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescriptionDate +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescriptionDate +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String taskDescription \u003d taskDescriptionDate.split(\"/\")[0];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        Task curr \u003d new Task(\"deadline\", taskDescription);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        curr.addDate(taskDescriptionDate.split(\"/\")[1]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        arr.add(curr);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        storage.fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"event\"):"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"\u0026#x2639; OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String taskDescriptionDate \u003d \"\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescriptionDate +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                taskDescriptionDate +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String taskDescription \u003d taskDescriptionDate.split(\"/\")[0];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        Task curr \u003d new Task(\"event\", taskDescription);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        curr.addDate(taskDescriptionDate.split(\"/\")[1]);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        arr.add(curr);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        storage.fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"delete\"):"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    int removedTask \u003d Integer.parseInt(userInput.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(arr.get(removedTask - 1).getIcon() + arr.get(removedTask - 1).status + \" \" + arr.get(removedTask - 1).getDescription());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.remove(removedTask - 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    storage.fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"find\"):"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskNames.size(); i++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String[] currentTaskName \u003d taskNames.get(i).split(\"\\\\s\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        for (int j \u003d 0; j \u003c currentTaskName.length; j++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            if (currentTaskName[j].equals(parser.getSearchQuery())) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                foundTasks.add(arr.get(i));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        assert i \u003e\u003d taskNames.size() : \"error\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        int j \u003d i + 1;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(j + \".\" + foundTasks.get(i).getIcon() + foundTasks.get(i).status + \" \" + foundTasks.get(i).getDescription());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"priority\"):"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskNames.size(); i++) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        String[] currentTaskName \u003d taskNames.get(i).split(\"\\\\s\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        for (int j \u003d 0; j \u003c currentTaskName.length; j++) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            if (currentTaskName[j].equals(parser.getSearchQuery())) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                                foundTasks.add(arr.get(i));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        assert i \u003e\u003d taskNames.size() : \"error\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        foundTasks.get(i).setPriority(1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                case (\"bye\"):"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } while (!userInput.equals(\"bye\"));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        new Duke(\"./\" + \"data/duke.txt\").run();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private static void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"./\" + \"data/duke.txt\",true);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private static void fileUpdate(File dataFile, ArrayList \u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            dataFile.delete();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                writeToFile(arr.get(i).getIcon() + \" | \" + arr.get(i).getStatusBinary() + \" | \" + arr.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        ArrayList \u003cTask\u003e arr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        File dataFile \u003d new File(\"./\" + \"data/duke.txt\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            // LIST"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            if (userInput.equals(\"list\")) {                                                  //Lists out the tasks"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d arr.size(); i++) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(i + \".\" + arr.get(i - 1).getIcon() + arr.get(i - 1).status + \" \" + arr.get(i - 1).getDescription());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            // DONE"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else if (userInput.split(\"\\\\s\")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                int doneTask \u003d Integer.parseInt(userInput.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                arr.get(doneTask - 1).setDone();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(arr.get(doneTask - 1).status + \" \" + arr.get(doneTask - 1).getDescription());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            // TO DO"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else if (userInput.split(\"\\\\s\")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"\u0026#x2639; OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescription +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescription +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(\"todo\", taskDescription);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            // DEADLINE"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else if (userInput.split(\"\\\\s\")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"\u0026#x2639; OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String taskDescriptionDate \u003d \"\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescriptionDate +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescriptionDate +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String taskDescription \u003d taskDescriptionDate.split(\"/\")[0];"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(\"deadline\", taskDescription);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    curr.addDate(taskDescriptionDate.split(\"/\")[1]);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            // EVENT"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else if (userInput.split(\"\\\\s\")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (userInput.split(\"\\\\s\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    System.out.println(\"\u0026#x2639; OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String[] taskRequest \u003d Arrays.copyOfRange(userInput.split(\"\\\\s\"), 1, userInput.split(\"\\\\s\").length);    // e.g. [return, book]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String taskDescriptionDate \u003d \"\";"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskRequest.length; i++) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescriptionDate +\u003d taskRequest[i];"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                            taskDescriptionDate +\u003d \" \" + taskRequest[i];"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    String taskDescription \u003d taskDescriptionDate.split(\"/\")[0];"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(\"event\", taskDescription);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    curr.addDate(taskDescriptionDate.split(\"/\")[1]);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(curr.getIcon() + curr.status + \" \" + curr.getDescription());"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            //DELETE"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else if (userInput.split(\"\\\\s\")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                int removedTask \u003d Integer.parseInt(userInput.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(arr.get(removedTask - 1).getIcon() + arr.get(removedTask - 1).status + \" \" + arr.get(removedTask - 1).getDescription());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                arr.remove(removedTask - 1);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                fileUpdate(dataFile, arr);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                System.out.println(\"\u0026#x2639; OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } while (!userInput.equals(\"bye\"));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "PangKimJin": 449
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private String searchQuery;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String parse(String userInput) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        if (userInput.equals(\"list\")) {                                                  //Lists out the tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            String searchQuery \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            for (int i \u003d 1; i \u003c userInput.split(\"\\\\s\").length; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    searchQuery +\u003d userInput.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    searchQuery +\u003d \" \" + userInput.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            this.setSearchQuery(searchQuery);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"find\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"priority\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            String searchQuery \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            for (int i \u003d 1; i \u003c userInput.split(\"\\\\s\").length; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    searchQuery +\u003d userInput.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    searchQuery +\u003d \" \" + userInput.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            this.setSearchQuery(searchQuery);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"priority\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (userInput.split(\"\\\\s\")[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"bye\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"error\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void setSearchQuery(String searchQuery) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.searchQuery \u003d searchQuery;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String getSearchQuery() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return this.searchQuery;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 55
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Loads the list of tasks from data.txt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @return ArrayList \u003cTask\u003e This returns the contents of the data.txt file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public ArrayList \u003cTask\u003e load() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        // returns the list of tasks from the data.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        ArrayList \u003cTask\u003e arr \u003d new ArrayList \u003cTask\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            Scanner sc \u003d new Scanner(new File (filePath));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            while (sc.hasNextLine()) {                                                                                      // looks at duke.txt line by line and creates the respective task and saves it in an arraylist"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                String taskType \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                String taskFormattedDate \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                String taskName \u003d line.split(\"\\\\s\")[4];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                if (line.split(\"\\\\s\")[0].equals(\"[T]\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    taskType \u003d \"todo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(taskType, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (line.split(\"\\\\s\")[2] \u003d\u003d \"1\") {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        curr.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                } else if (line.split(\"\\\\s\")[0].equals(\"[D]\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    taskType \u003d \"deadline\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    taskFormattedDate \u003d line.split(\"by: \")[1].substring(0, line.split(\"by: \")[1].length() - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(taskType, taskName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (Integer.parseInt(line.split(\"\\\\s\")[2]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        curr.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    // TESTING LINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    //System.out.println(taskFormattedDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    curr.addProcessedDate(taskFormattedDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    taskType \u003d \"event\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    taskFormattedDate \u003d line.split(\"at: \")[1].substring(0, line.split(\"at: \")[1].length() - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    Task curr \u003d new Task(taskType, taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    if (line.split(\"\\\\s\")[2].equals(1)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                        curr.setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    curr.addProcessedDate(taskFormattedDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return arr;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return new ArrayList \u003cTask\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Updates the data.txt file with the information provided by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @param dataFile This is the file path for data.txt"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @param arr this is the most updated ArrayList \u003cTask\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void fileUpdate(File dataFile, ArrayList \u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            writeToFile(\"I love you baby\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            //dataFile.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            new FileWriter(\"./\" + \"data/duke.txt\", false).close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            for (int i \u003d 0; i \u003c TaskList.arr.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                writeToFile(TaskList.arr.get(i).getIcon() + \" | \" + TaskList.arr.get(i).getStatusBinary() + \" | \" + TaskList.arr.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Appends a line of strings to the data.txt file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @param textToAdd This is the line of strings to add to data.txt"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @throws IOException On input error"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"./\" + \"data/duke.txt\",true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 100
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public LocalDate processedDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String fileDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public boolean hasProcessedDate \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public int priority \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public Task(String type, String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.status \u003d \"[✗]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.status \u003d \"[✓]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public int getStatusBinary() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        if (this.status \u003d\u003d \"[✓]\") {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        if (this.type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (this.type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else {                  // event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * Processes the user input date into a localdate format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     * @return String This returns the formatted form of the localdate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String getProcessedDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        String dateFormatted \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.date.split(\"\\\\s\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        for (int i \u003d 1; i \u003c this.date.split(\"\\\\s\").length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                dateFormatted +\u003d this.date.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                dateFormatted +\u003d \" \" + this.date.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        LocalDate ld \u003d LocalDate.parse(dateFormatted);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.processedDate \u003d ld;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.hasProcessedDate \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.fileDate \u003d ld.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return this.fileDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String addProcessedDate(String dateFormatted) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //System.out.println(dateFormatted);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        int month \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        int day \u003d Integer.parseInt(dateFormatted.split(\"\\\\s\")[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        int year \u003d Integer.parseInt(dateFormatted.split(\"\\\\s\")[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        if (dateFormatted.split(\"\\\\s\")[0].equals(\"Jan\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Feb\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Mar\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 3;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Apr\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"May\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 5;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Jun\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 6;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Jul\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 7;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Aug\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 8;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Sep\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 9;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Oct\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 10;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (dateFormatted.split(\"\\\\s\")[0].equals(\"Nov\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 11;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            month \u003d 12;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.processedDate \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.hasProcessedDate \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.fileDate \u003d this.processedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return this.fileDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        if (this.type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            return this.name;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else if (this.type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            String dateFormatted \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            this.date.split(\"\\\\s\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            for (int i \u003d 1; i \u003c this.date.split(\"\\\\s\").length; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                    dateFormatted +\u003d this.date.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                    dateFormatted +\u003d \" \" + this.date.split(\"\\\\s\")[i];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            dateFormatted \u003d \"(by: \" + dateFormatted + \")\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "//            return this.name + dateFormatted;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            if (this.hasProcessedDate \u003d\u003d false) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                return this.name + \" (by: \" + this.getProcessedDate() + \")\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                return this.name + \" (by: \" + this.fileDate + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        } else {                  // event"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            if (this.hasProcessedDate \u003d\u003d false) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                return this.name + \" (at: \" + this.getProcessedDate() + \")\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                return this.name + \" (at: \" + this.fileDate + \")\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void setPriority(int priorityLevel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void addDate(String date) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 140
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static ArrayList \u003cTask\u003e arr \u003d new ArrayList \u003cTask\u003e();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public TaskList(ArrayList \u003cTask\u003e al) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        this.arr \u003d al;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public ArrayList \u003cTask\u003e getArraylist() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d arr.size(); i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            System.out.println(i + \".\" + arr.get(i - 1).getIcon() + arr.get(i - 1).status + \" \" + arr.get(i - 1).getDescription());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        arr.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public ArrayList \u003cString\u003e getNames(ArrayList \u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        ArrayList \u003cString\u003e namesAL \u003d new ArrayList \u003cString\u003e ();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            namesAL.add(arr.get(i).name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return namesAL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public String runGreeting() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        return \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        System.out.println(\"Error\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void uiTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Duke duke \u003d new Duke(\"./\" + \"data/duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        //assertEquals(\"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\", duke.run());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        uiTest();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 20
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void uiTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        assertEquals(\"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\", ui.runGreeting());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "        uiTest();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 20
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "[T][✗] return book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "Now you have 1 tasks in the list."
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "todo return book"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangKimJin"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "PangKimJin": 21
    }
  }
]
