[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "[![Build Status](https://travis-ci.com/JeremyLoh/duke.svg?branch\u003dmaster)](https://travis-ci.com/JeremyLoh/duke)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/cd6f84251f874eb7ad0e2a944755e4df)](https://www.codacy.com/manual/JeremyLoh/duke?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dJeremyLoh/duke\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "### Setting up"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * JDK 11"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "2. Set up the correct JDK version."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "3. Click `Import Project`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "4. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "5. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "6. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "7. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "8. Click `Finish`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "## Tutorials "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "## Feedback, Bug Reports"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "  * If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " -edu/duke/issues)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "JeremyLoh": 19
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // JUnit 5"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.2\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // JavaFX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    mainClassName \u003d \"duke.gui.Launcher\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "JeremyLoh": 40
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    FIND"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 12
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Driver for duke project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        new Duke(\"duke.txt\").run(reader);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Duke instance, uses duke.txt for save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(\"duke.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Return a new instance of Duke class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param saveFile File name used for saving user data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Duke(String saveFile) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        loadTasksFromSaveFile(saveFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void loadTasksFromSaveFile(String saveFile) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage \u003d new Storage(saveFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Did not load tasks from save file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Process input given by user and execute relevant actions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param reader used for user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void run(BufferedReader reader) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assert reader !\u003d null : \"BufferedReader given should not be null\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        boolean requestExit \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (!requestExit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Run process command, check if user has terminated program"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Optional\u003cCommand\u003e c \u003d Parser.parse(ui.readCommand(reader));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                assert c.isPresent() : \"Parser did not return a command\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                c.get().execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                requestExit \u003d c.get().isExit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (IOException ioException) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                ui.unableToReadUserInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Print error message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                ui.showExceptionMessage(dukeException);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a response to a given input String command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param input command String to be executed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String response"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change stdout for duke"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Optional\u003cCommand\u003e command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assert command.isPresent() : \"Parser did not return a command\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            command.get().execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Display error message"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            System.out.print(dukeException.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        response \u003d output.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove all horizontal divider present"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String indentation \u003d Ui.INDENTATION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String horizontalBar \u003d Ui.HORIZONTAL_BAR;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (response.contains(indentation)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            response \u003d response.replace(indentation, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (response.contains(horizontalBar)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            response \u003d response.replace(horizontalBar, \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        response \u003d response.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Reset stdout for duke"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(System.out);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 113
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String exceptionIcon \u003d \"\\u2639\"; // Sad face symbol"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to construct a new exception related to duke.Duke class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param message to represent more information about exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 14
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.EmptyInputCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with making sense of user commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected static HashMap\u003cString, String\u003e commandDelimiter \u003d setupCommandDelimiter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected static HashMap\u003cString, String\u003e commandTypeFormatInfo \u003d setupCommandTypeFormatInfo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates a new command based on given input string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param command represents a user input command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional instance of Command based on action to be performed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException when given input is not a valid command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static Optional\u003cCommand\u003e parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String fullCommand \u003d command.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String[] commandWords \u003d fullCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String firstCommandWord \u003d commandWords[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int numberOfCommandArguments \u003d commandWords.length - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check for empty command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (fullCommand.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return Optional.of(new EmptyInputCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        switch (firstCommandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new ListCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getFindCommand(fullCommand, commandWords, numberOfCommandArguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getDoneCommand(commandWords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getTodoCommand(fullCommand, commandWords, numberOfCommandArguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getDeadlineCommand(fullCommand, commandWords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getEventCommand(fullCommand, commandWords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d getDeleteCommand(commandWords);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // First word of command does not match list of valid commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"unknown\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing a Todo Command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fullCommand              Entire Command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords             List of words present in Command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param numberOfCommandArguments Argument count for Command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional Command representing Todo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getTodoCommand(String fullCommand, String[] commandWords,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                                    int numberOfCommandArguments) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (numberOfCommandArguments \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"todo\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String todoDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        outputCommand \u003d Optional.of(new AddTaskCommand(new Todo(todoDescription)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing a Find Command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fullCommand              Entire Command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords             List of words present in Command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param numberOfCommandArguments Argument count for Command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional Command representing Find Command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a search term"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getFindCommand(String fullCommand, String[] commandWords,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                                    int numberOfCommandArguments) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (numberOfCommandArguments \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"find\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        outputCommand \u003d Optional.of(new FindCommand("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Parser.getDescription(fullCommand, commandWords)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing a Done Command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords Words present in Command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional Command representing a Done Command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a valid task number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getDoneCommand(String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"missingTaskNumber\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new DoneCommand(taskNumber));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"missingTaskNumber\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing a Delete Command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords Words present in Command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional Command representing a Delete Command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a valid task number"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getDeleteCommand(String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"missingTaskNumber\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            int taskNumberToDelete \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new DeleteCommand(taskNumberToDelete));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"missingTaskNumber\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing an Event Command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fullCommand  Command given for parsing"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords List of words present in Command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional of Command representing Event Command"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a valid date format"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getEventCommand(String fullCommand,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                                     String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Parser.verifyEventInput(fullCommand, commandWords);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventTime \u003d Parser.getDueDate(fullCommand, commandWords);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new AddTaskCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Event(eventDescription, eventTime)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"event\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Optional Command representing a Deadline."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fullCommand  Command given for parsing"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords List of words present in Command"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Optional of Command representing Deadline Command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException Given command does not have a valid date format"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Optional\u003cCommand\u003e getDeadlineCommand(String fullCommand,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                                                        String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Optional\u003cCommand\u003e outputCommand;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Parser.verifyDeadlineInput(fullCommand, commandWords);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadlineDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadline \u003d Parser.getDueDate(fullCommand, commandWords);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d Optional.of(new AddTaskCommand("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    new Deadline(deadlineDescription, deadline)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(commandTypeFormatInfo.get(\"deadline\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Throws duke.DukeException if event command has invalid parameters."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException for invalid event command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected static void verifyEventInput(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventDelimiter \u003d commandDelimiter.get(commandWords[0]);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int eventDelimiterIndex \u003d command.indexOf(eventDelimiter);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int eventDelimiterLength \u003d eventDelimiter.length();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String errorMessage \u003d commandTypeFormatInfo.get(\"event\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandLength \u003d\u003d \"event\".length()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Empty event command given (e.g. \"event\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!command.contains(eventDelimiter)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (eventDelimiterIndex + eventDelimiterLength \u003d\u003d commandLength) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Delimiter is at the end of command (e.g. \"event /at\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Throws duke.DukeException if deadline command has any invalid parameters."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException for invalid deadline command"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void verifyDeadlineInput(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadlineDelimiter \u003d commandDelimiter.get(commandWords[0]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int deadlineDelimiterIndex \u003d command.indexOf(deadlineDelimiter);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int deadlineDelimiterLength \u003d deadlineDelimiter.length();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String errorMessage \u003d commandTypeFormatInfo.get(\"deadline\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandLength \u003d\u003d \"deadline\".length()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Empty deadline command given (e.g. \"deadline\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!command.contains(deadlineDelimiter)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (deadlineDelimiterIndex + deadlineDelimiterLength \u003d\u003d commandLength) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Delimiter is at the end of command (e.g. \"deadline /by\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the due date information associated with the given command parameter."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param command      string representing user input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords list of words that make up command"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing the due date component of command"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String getDueDate(String command, String[] commandWords) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String delimiter \u003d commandDelimiter.get(commandType);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Get first word\u0027s index for deadline"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // 1 additional character is considered for whitespace"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterLength \u003d delimiter.length();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterIndex \u003d command.indexOf(delimiter);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterStartIndex \u003d delimiterIndex + delimiterLength + 1;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return command.substring(delimiterStartIndex);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String representing the description component of a given command parameter."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param command      string representing user input"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords list of words that make up command"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing the description component of command"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException command is not in a valid format"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String getDescription(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String.format(\"The description of a %s cannot be empty!\", commandType));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else if (commandType.equals(\"todo\") || commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            description \u003d command.substring(commandType.length() + 1);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else if (commandType.equals(\"deadline\") || commandType.equals(\"event\")) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Check if required delimiter exists and there are at least 3 arguments"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (commandDelimiter.containsKey(commandType) \u0026\u0026 commandWords.length \u003e\u003d 4) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String delimiter \u003d commandDelimiter.get(commandType);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                int delimiterIndex \u003d command.indexOf(delimiter);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Account for space after command and before delimiter"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                description \u003d command.substring(commandType.length() + 1, delimiterIndex - 1);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Invalid command format given"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(commandTypeFormatInfo.get(commandType));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e setupCommandTypeFormatInfo() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        HashMap\u003cString, String\u003e commandTypeFormatInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"event\", \"Incorrect event format given... Correct format: event \""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[description] /at [event time in yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"deadline\", \"Incorrect deadline task format given... Correct \""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"format: deadline [description] /by \""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[due date in yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"todo\", \"Incorrect todo task format given... Correct format: todo \""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[description]\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"find\", \"Incorrect find task format given... Correct format: \""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"find [search term]\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"unknown\", DukeException.exceptionIcon"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"missingTaskNumber\", \"Invalid Task Number given!\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return commandTypeFormatInfo;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e setupCommandDelimiter() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        HashMap\u003cString, String\u003e commandDelimiter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandDelimiter.put(\"deadline\", \"/by\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandDelimiter.put(\"event\", \"/at\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return commandDelimiter;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 326
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Saves files in a directory data under the project root path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String fileSeparator \u003d File.separator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String projectRootPath \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String dataDirectoryPath \u003d projectRootPath + fileSeparator + \"data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String saveFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Storage instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fileName file used to save user data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        saveFilePath \u003d dataDirectoryPath + fileSeparator + fileName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Setup data directory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        setupDataDirectory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates the required directories for saving user data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void setupDataDirectory() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Create directories along path if they don\u0027t exist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.createDirectories(Paths.get(dataDirectoryPath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates a new save file in the path created and stored by the Storage constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void createSaveFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Create a new file, exception will be thrown if file already exists"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.createFile(Paths.get(saveFilePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // File exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a list of Tasks that represent the tasks saved in the save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return list of Tasks saved in specified save file when the Storage instance is created"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException the given save file could not be loaded"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedReader saveFile \u003d new BufferedReader(new FileReader(saveFilePath))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Load data into tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String line \u003d saveFile.readLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            /* Format of save file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            [task type],[complete status],[task information]..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Example:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            todo,1,read book"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            deadline,0,return book,June 6th"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            event,0,project meeting,Aug 6th 2-4pm"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Store task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String[] taskWords \u003d line.split(\",\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                boolean isDone \u003d taskWords[1].equals(\"1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String description \u003d taskWords[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                switch (taskWords[0].toLowerCase()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Todo(taskWords[2], isDone));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String deadline \u003d taskWords[3];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Deadline(description, deadline, isDone));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String eventTime \u003d taskWords[3];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Event(description, eventTime, isDone));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                line \u003d saveFile.readLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(\"Unable to load from given file...\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates the lists of Tasks stored in the save file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of Tasks to be saved"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void updateSaveFile(TaskList tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(saveFilePath))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Write all tasks to file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                writer.write(task.stringToSaveToDisk());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 133
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with user interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String HORIZONTAL_BAR \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Accepts user input from stdin."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param inputReader used to read user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing a user command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IOException when BufferedReader fails to read user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String readCommand(BufferedReader inputReader) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        command \u003d inputReader.readLine().trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints given text with indentation: specified in duke.Duke class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text used for formatting and printing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void printTextWithIndentation(String text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.out.println(INDENTATION + text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void greet() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String logo \u003d \"  __  __        _____       _           _   \" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |  \\\\/  |      |  __ \\\\     | |         | |  \" + NEWLINE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | \\\\  / |_ __  | |__) |___ | |__   ___ | |_ \" + NEWLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |\\\\/| | \u0027__| |  _  // _ \\\\| \u0027_ \\\\ / _ \\\\| __|\" + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |  | | |    | | \\\\ \\\\ (_) | |_) | (_) | |_ \" + NEWLINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |_|  |_|_|    |_|  \\\\_\\\\___/|_.__/ \\\\___/ \\\\__|\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Hello friend. Hello friend?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"That\u0027s lame. Maybe I should give you a name.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"But that\u0027s a slippery slope, you\u0027re only in my head,\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"we have to remember that.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out error when storage data cannot be loaded into program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Unable to load storage data...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out error message for invalid user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void unableToReadUserInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Unable to read user input...\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out empty command error."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void commandNotFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"404 Not Found... Are you there?\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out all tasks present in given duke.task.TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks for printing task information"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param header contains list information"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void listTasks(TaskList tasks, String header) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(header);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            printTextWithIndentation(\"\" + taskCount + \".\" + task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out exception message given to stdout."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param exception error message to be printed out"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void showExceptionMessage(Exception exception) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(exception.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out newly added task information."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task used for printing information related to task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void printTaskAddition(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add more indentation for task description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"  \" + task.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark a given task as done and print out updated task information."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to mark as done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markTaskAsDone(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(task.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Deletes a given task and prints information about deleted task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to be deleted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void printTaskDeletion(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"  \" + task.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void goodbye() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Goodbye friend.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 162
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Adds given task as a command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds task given to list, print task information and update save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage to update save file when the task list is changed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskAddition(task, tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents an action to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a delete action for a given task number in list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes task from task list based on given task number, prints out deleted task information and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * updates save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage used to access save file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Task number given starts from 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Task removedTask \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.printTaskDeletion(removedTask, tasks.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Invalid task number given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showExceptionMessage(new DukeException(\"Invalid task number given for deletion...\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command marking a given task number in task list as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Marks a given task number in task list as done, prints out task summary."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage used to update save file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Task task \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.markTaskAsDone(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showExceptionMessage(new DukeException(\"Invalid Task Number given!\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 37
    }
  },
  {
    "path": "src/main/java/duke/command/EmptyInputCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command that has empty user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EmptyInputCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EmptyInputCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Displays command not found message to user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints output to user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages save file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.commandNotFound();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates task list in save file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // User request for exit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 28
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command used to find a task by searching for a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Finds all tasks in task list with matching keyword in the task description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * and prints out all found tasks to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Find all tasks with description matching keyword"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                matchingTasks.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Print matching tasks using ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(matchingTasks, \"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command to list out all tasks in task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Print out all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(tasks, \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Custom control using FXML. This control represents a dialog box consisting of an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a DialogBox instance representing User\u0027s input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text contains text to be displayed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param img  contains image to be displayed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return DialogBox instance representing user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a flipped DialogBox instance representing Duke\u0027s response."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text contains text to be displayed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param img  contains image to be displayed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return flipped DialogBox instance"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 76
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Used for Duke GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 13
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * This method is called when the application should stop, and provides a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * convenient place to prepare for application exit and destroy resources."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * The implementation of this method provided by the Application class does nothing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * NOTE: This method is called on the JavaFX Application Thread."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws Exception if something goes wrong"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Sleep for 1s before exit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        TimeUnit.SECONDS.sleep(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 53
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // @FXML annotation marks a private or protected member and makes it accessible"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // to FXML despite its modifier. Without the annotation, we will have to make"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // everything public and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // User icon image obtained from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // https://www.hiclipart.com/free-transparent-background-png-clipart-dlzoi/download"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Image userIcon \u003d new Image("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/user-icon-hiclipart.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Mr Robot: https://www.usanetwork.com/mrrobot"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Image mrRobotIcon \u003d new Image("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/mr-robot-logo.jpg\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * GUI start up."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Get greeting message and display it"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getDukeDialog(greeting(), mrRobotIcon));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String representing the GUI\u0027s greeting message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String used for greeting user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String newline \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return \"Hello friend. Hello friend?\" + newline"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"That\u0027s lame. Maybe I should give you a name.\" + newline"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"But that\u0027s a slippery slope, you\u0027re only in my head,\" + newline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"we have to remember that.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getUserDialog(input, userIcon),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getDukeDialog(response, mrRobotIcon)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (response.equals(\"Goodbye friend.\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 84
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represent tasks that need to be done before a specific date/time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g., submit report by 11/10/2019 5pm."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Deadline implements Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, deadline, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Deadline instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description details about Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param deadline due date of Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given deadline is not in a valid date format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Deadline(String description, String deadline, boolean isDone) throws DateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.deadline \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // duke.task.Deadline in yyyy-mm-dd format (e.g. 2020-10-15)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Output in MMM d yyyy e.g. (Oct 15 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [D][✗] return book (by: Oct 15 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Deadline instance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: deadline,0,return book,2020-06-03"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"deadline,%s,%s,%s\", isDone ? 1 : 0, description,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                deadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 99
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents tasks that start at a specific time and ends at a specific time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g., team project meeting on 2/10/2019 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Event implements Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected LocalDate eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Event(String description, String eventTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, eventTime, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Event instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description details about Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param eventTime time of Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given event time is not in a valid date format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Event(String description, String eventTime, boolean isDone) throws DateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.eventTime \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getEventTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // duke.task.Deadline in yyyy-mm-dd format (e.g. 2020-10-15)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Output in MMM d yyyy e.g. (Oct 15 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [E][✗] project meeting (at: Oct 15 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Event instance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: event,0,project meeting,2020-03-12"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"event,%s,%s,%s\", isDone ? 1 : 0, description,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                eventTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 98
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Use to represent functions required for a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public interface Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String getStatusIcon();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markAsDone();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markAsIncomplete();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String stringToSaveToDisk();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    boolean getTaskCompletionStatus();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 18
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Spliterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g. it has operations to add/delete tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds given task and returns task addition success status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return task addition success status"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes task from list at given index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param index Task number to be removed (zero-based numbering)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Task that was removed at given index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IndexOutOfBoundsException Index given is not a valid list index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Task remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task removedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the task at a given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param index For retrieving tasks at specified list position"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Task obtained at given index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IndexOutOfBoundsException Index given is not a valid list index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the total number of tasks stored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return The total number of Tasks in list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an iterator over elements of type {@code Task}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.iterator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void forEach(Consumer\u003c? super Task\u003e action) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.forEach(action);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Spliterator\u003cTask\u003e spliterator() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.spliterator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents tasks without any date/time attached to it e.g. visit new theme park."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Todo implements Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Todo instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description information about Todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [T][✗] borrow book"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Todo instance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: todo,1,read book"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"todo,%s,%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 81
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" contentDisplay\u003d\"CENTER\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas Italic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String fileSeparator \u003d File.separator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String projectRootPath \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String dataDirectoryPath \u003d projectRootPath + fileSeparator + \"data\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String saveFile \u003d \"test.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String newline \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String indentation \u003d \"    \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String horizontalBar \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String horizontalDivider \u003d indentation + horizontalBar + newline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String exceptionIcon \u003d \"\\u2639\"; // Sad face icon"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void deleteSaveFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.deleteIfExists(Paths.get(dataDirectoryPath + fileSeparator + saveFile));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String greeting() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String logo \u003d \"  __  __        _____       _           _   \" + newline"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |  \\\\/  |      |  __ \\\\     | |         | |  \" + newline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | \\\\  / |_ __  | |__) |___ | |__   ___ | |_ \" + newline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |\\\\/| | \u0027__| |  _  // _ \\\\| \u0027_ \\\\ / _ \\\\| __|\" + newline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |  | | |    | | \\\\ \\\\ (_) | |_) | (_) | |_ \" + newline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |_|  |_|_|    |_|  \\\\_\\\\___/|_.__/ \\\\___/ \\\\__|\" + newline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + horizontalBar + newline;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + \"Hello friend. Hello friend?\" + newline;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + \"That\u0027s lame. Maybe I should give you a name.\" + newline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + \"But that\u0027s a slippery slope, you\u0027re only in my head,\" + newline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + \"we have to remember that.\" + newline;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        logo +\u003d indentation + horizontalBar + newline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Delete any save file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke \u003d new Duke(saveFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change output stream"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void cleanUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for invalid command\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_invalidCommand_displayInvalidCommandMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"blah\" + newline + \"bye\" + newline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d greeting();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected +\u003d horizontalDivider + indentation + exceptionIcon"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + newline"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add exit message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected +\u003d horizontalDivider + indentation + \"Goodbye friend.\" + newline"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString(), \"Should display invalid command message\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 90
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.DeadlineStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.EventStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TodoStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String doneStatusIcon \u003d \"\\u2713\"; // Check mark icon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static String incompleteStatusIcon \u003d \"\\u2718\"; // Cross mark icon"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String indentation \u003d Ui.INDENTATION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String horizontalBar \u003d Ui.HORIZONTAL_BAR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String newline \u003d Ui.NEWLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String horizontalDivider \u003d indentation + horizontalBar + newline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e generateAllTaskTypes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new EventStub(\"Birthday Party\", \"2020-01-01\", false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Birthday Party,2020-01-01\", doneStatusIcon,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 1 2020)\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DeadlineStub(\"Finish Coding Project\", \"2020-01-27\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        false, \"deadline,0,2020-01-27\", doneStatusIcon,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[D][\" + incompleteStatusIcon + \"] Finish Coding Project (by: 2020-01-27)\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e generateAllTaskTypesWithZeroTotalTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Generates a stream of [Task] [task count]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // [task count] is 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\"), 0),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new EventStub(\"Birthday Party\", \"2020-01-01\", false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Birthday Party,2020-01-01\", doneStatusIcon,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 1 2020)\"), 0),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DeadlineStub(\"Finish Coding Project\", \"2020-01-27\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        false, \"deadline,0,Finish Coding Project,2020-01-27\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[D][\" + incompleteStatusIcon + \"] Finish Coding Project (by: Jan 27 2020)\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e generateDukeExceptions() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"Invalid Task Number given!\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"Invalid task number given for deletion...\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e generateOneTaskList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new EventStub(\"Chinese New Year\", \"2020-01-25\", false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Chinese New Year,2020-01-25\", doneStatusIcon,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 25 2020)\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new DeadlineStub(\"Finish project\", \"2020-04-20\", false,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"deadline,0,Finish project,2020-04-20\", doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[D][\" + incompleteStatusIcon + \"] Finish project (by: Apr 20 2020)\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TaskList(tasks))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(strings \u003d {\"\", \"test\", \"    \"})"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTextWithIndentation(String s) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d indentation + s + newline;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTextWithIndentation(s);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Ui: Test for Greeting message\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\"  __  __        _____       _           _   \").append(newline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" |  \\\\/  |      |  __ \\\\     | |         | |  \").append(newline);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | \\\\  / |_ __  | |__) |___ | |__   ___ | |_ \").append(newline);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | |\\\\/| | \u0027__| |  _  // _ \\\\| \u0027_ \\\\ / _ \\\\| __|\").append(newline);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | |  | | |    | | \\\\ \\\\ (_) | |_) | (_) | |_ \").append(newline);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" |_|  |_|_|    |_|  \\\\_\\\\___/|_.__/ \\\\___/ \\\\__|\").append(newline);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(horizontalDivider);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(indentation).append(\"Hello friend. Hello friend?\").append(newline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(indentation).append(\"That\u0027s lame. Maybe I should give you a name.\").append(newline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(indentation).append(\"But that\u0027s a slippery slope, you\u0027re only in my head,\").append(newline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(indentation).append(\"we have to remember that.\").append(newline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(horizontalDivider);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString(), \"Should display greeting message\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void showLoadingError() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Unable to load storage data...\" + newline"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.showLoadingError();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void unableToReadUserInput() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Unable to read user input...\" + newline"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.unableToReadUserInput();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void commandNotFound() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"404 Not Found... Are you there?\" + newline"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.commandNotFound();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneTaskList\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void listTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String listHeaderInformation \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder(horizontalDivider"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + listHeaderInformation + newline);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            expected.append(indentation)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .append(taskCount).append(\".\").append(task.toString())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .append(newline);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(horizontalDivider);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute test function"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(tasks, listHeaderInformation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateDukeExceptions\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void showExceptionMessage_dukeException(Exception exception) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.showExceptionMessage(exception);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + exception.getMessage() + newline"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTaskAddition_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String taskInfo \u003d task.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Got it. I\u0027ve added this task:\" + newline"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"  \" + taskInfo + newline"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Now you have \" + totalTasks + \" tasks in the list.\" + newline"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute function for testing"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskAddition(task, totalTasks);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markTaskAsDone_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task is initially marked as undone"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Mark task as done"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task has been marked as done"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypes\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markTaskAsDone(Task task) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTaskDeletion_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Noted. I\u0027ve removed this task:\" + newline"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"  \" + task.toString() + newline"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Now you have \" + totalTasks + \" tasks in the list.\" + newline"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskDeletion(task, totalTasks);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for Goodbye message\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void goodbye() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d horizontalDivider"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + indentation + \"Goodbye friend.\" + newline"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + horizontalDivider;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString(), \"Should print goodbye message\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 239
    }
  },
  {
    "path": "src/test/java/duke/command/AddTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class AddTaskCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String saveFile \u003d \"test.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String fileSeparator \u003d File.separator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String projectRootPath \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String dataDirectoryPath \u003d projectRootPath + fileSeparator + \"data\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String saveFilePath \u003d dataDirectoryPath + fileSeparator + saveFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static Stream\u003cArguments\u003e generateEmptyState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task task \u003d new Todo(\"Read book\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(task, tasks));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void deleteSaveFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.deleteIfExists(Paths.get(saveFilePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage \u003d new Storage(saveFile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Delete save file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateEmptyState\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int tasksCount \u003d tasks.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute function for testing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Command command \u003d new AddTaskCommand(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check addition of task is successful"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(task.getDescription(), tasks.get(tasksCount).getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(tasksCount + 1, tasks.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check save file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedReader reader \u003d new BufferedReader(new FileReader(saveFilePath))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assertEquals(task.stringToSaveToDisk(), reader.readLine());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not open save file\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not read save file\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 87
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.EventStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String saveFile \u003d \"test.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String fileSeparator \u003d File.separator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String projectRootPath \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String dataDirectoryPath \u003d projectRootPath + fileSeparator + \"data\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private String saveFilePath \u003d dataDirectoryPath + fileSeparator + saveFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String doneStatusIcon \u003d \"\\u2713\"; // Check mark icon"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String incompleteStatusIcon \u003d \"\\u2718\"; // Cross mark iconprivate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private EventStub eventTask \u003d new EventStub(\"project meeting\", \"2020-01-01\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            false, \"event,0,project meeting,2020-01-01\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"[E][\" + incompleteStatusIcon + \"] project meeting \" + \"(at: Jan 1 2020)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void deleteSaveFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.deleteIfExists(Paths.get(saveFilePath));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage \u003d new Storage(saveFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Redirect stdout to own PrintStream"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove save file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(System.out);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute_validDeleteCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add one task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Create a delete command and execute it"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check save file, should be empty"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedReader reader \u003d new BufferedReader(new FileReader(saveFilePath))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assertNull(reader.readLine());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not open save file\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not read save file\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check size of task list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 90
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DeadlineStub extends Deadline {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new instance of DeadlineStub."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description information about deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param deadline time of deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone deadline completion status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param stringToSaveToDisk used to save Deadline information to save file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param doneStatusIcon icon used for marking deadline as complete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param incompleteStatusIcon icon used for marking deadline as incomplete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param toString String representation of DeadlineStub"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given deadline is not in required format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DeadlineStub(String description, String deadline, boolean isDone,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        String stringToSaveToDisk, String doneStatusIcon, String incompleteStatusIcon,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        String toString) throws DateTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, deadline, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Deadline instance"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 93
    }
  },
  {
    "path": "src/test/java/duke/task/EventStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EventStub extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new instance of EventStub."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description information about event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param eventTime time of event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone whether event has been marked as done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param stringToSaveToDisk used to represent event task in save file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param doneStatusIcon icon used to indicate event is complete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param incompleteStatusIcon icon used to indicate event is not complete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param toString String representation of EventStub"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given event time is not in a valid format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EventStub(String description, String eventTime, boolean isDone,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     String stringToSaveToDisk, String doneStatusIcon, String incompleteStatusIcon,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     String toString) throws DateTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, eventTime, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getEventTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Event instance"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 93
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private EventStub eventTask \u003d new EventStub(\"project meeting\", \"2020-01-01\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            false, \"event,0,project meeting,2020-01-01\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"[E][\" + incompleteStatusIcon + \"] project meeting \" + \"(at: Jan 1 2020)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String doneStatusIcon \u003d \"\\u2713\"; // Check mark icon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static final String incompleteStatusIcon \u003d \"\\u2718\"; // Cross mark iconprivate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void addTask_validTask_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task storedTask \u003d tasks.get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(eventTask.getDescription(), storedTask.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(eventTask.getTaskCompletionStatus(), storedTask.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void addTask_null_notAdded() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(tasks.addTask(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(ints \u003d {20, -5, 5})"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void remove_invalidIndex_indexOutOfBoundsException(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e tasks.remove(index));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(ints \u003d {0, 1})"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void remove_validIndex_removeTask(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add two tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove one task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(ints \u003d {0})"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void get_validIndex_obtainTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check task list is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add one task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task has been added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task obtainTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(eventTask, obtainTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(ints \u003d {0, -2, 20})"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void get_invalidIndex_indexOutOfBoundsException(int index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check task list is empty"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e tasks.get(index));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add one task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove one task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 93
    }
  },
  {
    "path": "src/test/java/duke/task/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class TodoStub extends Todo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new instance of TodoStub."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description information about TodoStub"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone whether TodoStub has been completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param stringToSaveToDisk used to save TodoStub information to save file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param doneStatusIcon icon used to indicate TodoStub is complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param incompleteStatusIcon icon used to indicate TodoStub is not complete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param toString String representation of TodoStub"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TodoStub(String description, boolean isDone,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String stringToSaveToDisk, String doneStatusIcon,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String incompleteStatusIcon, String toString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change Status Icon to done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Todo instance"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 84
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "      [T][✗] borrow book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    1.[T][✗] borrow book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Deadline.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Event.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Task.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.CommandType.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Todo.java"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 6
    }
  }
]
