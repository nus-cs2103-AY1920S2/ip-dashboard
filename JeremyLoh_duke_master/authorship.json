[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "JeremyLoh": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // JUnit 5"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.2\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // JavaFX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "JeremyLoh": 39
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    FIND"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 12
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Driver for duke project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Duke instance, uses duke.txt for save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(\"duke.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Return a new instance of Duke class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param saveFile File name used for saving user data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Duke(String saveFile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage \u003d new Storage(saveFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Did not load tasks from save file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        new Duke(\"duke.txt\").run(reader);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Process input given by user and execute relevant actions."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param reader used for user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void run(BufferedReader reader) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        boolean requestExit \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (!requestExit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Run process command, check if user has terminated program"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Command c \u003d Parser.parse(ui.readCommand(reader));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                requestExit \u003d c.isExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (IOException ioException) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                ui.unableToReadUserInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Print error message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                ui.showExceptionMessage(dukeException);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a response to a given input String command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param input command String to be executed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String response"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change stdout for duke"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Display error message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            System.out.print(dukeException.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        response \u003d output.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove all horizontal divider present"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String indentation \u003d Ui.INDENTATION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String horizontalBar \u003d Ui.HORIZONTAL_BAR;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (response.contains(indentation)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            response \u003d response.replace(indentation, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        while (response.contains(horizontalBar)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            response \u003d response.replace(horizontalBar, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        response \u003d response.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Reset stdout for duke"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(System.out);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 118
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String exceptionIcon \u003d \"\\u2639\"; // Sad face symbol"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Used to construct a new exception related to duke.Duke class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param message to represent more information about exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 14
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.EmptyInputCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with making sense of user commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected static HashMap\u003cString, String\u003e commandDelimiter \u003d setupCommandDelimiter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected static HashMap\u003cString, String\u003e commandTypeFormatInfo \u003d setupCommandTypeFormatInfo();;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates a new command based on given input string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fullCommand represents a user input command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Command based on action to be performed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException when given input is not a valid command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Remove leading and trailing whitespace"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String[] commandWords \u003d fullCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int numberOfCommandArguments \u003d commandWords.length - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Command outputCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check for empty command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (fullCommand.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d new EmptyInputCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return outputCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        switch (commandWords[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (numberOfCommandArguments \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        + \" The description of a find cannot be empty...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d new FindCommand(Parser.getDescription(fullCommand, commandWords));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                outputCommand \u003d new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(\"Invalid Task Number given!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Check if valid command is given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (numberOfCommandArguments \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        + \" The description of a todo cannot be empty...\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String todoDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            outputCommand \u003d new AddTaskCommand(new Todo(todoDescription));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Verify user input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Parser.verifyDeadlineInput(fullCommand, commandWords);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String deadlineDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String deadline \u003d Parser.getDueDate(fullCommand, commandWords);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                outputCommand \u003d new AddTaskCommand(new Deadline(deadlineDescription, deadline));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Given deadline string was not in correct format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(\"Given deadline task due date was not in correct format\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        + \": [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Parser.verifyEventInput(fullCommand, commandWords);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String eventDescription \u003d Parser.getDescription(fullCommand, commandWords);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String eventTime \u003d Parser.getDueDate(fullCommand, commandWords);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Add new event to task list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                outputCommand \u003d new AddTaskCommand(new Event(eventDescription, eventTime));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Given event time could not be converted a valid date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(\"Given event task due date was not in correct format\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        + \": [yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                int taskNumberToDelete \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                outputCommand \u003d new DeleteCommand(taskNumberToDelete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(\"Invalid task number given for deletion...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Invalid command type given"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // First word of command does not match list of valid commands"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return outputCommand;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Throws duke.DukeException if event command has invalid parameters."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException for invalid event command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void verifyEventInput(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventDelimiter \u003d commandDelimiter.get(commandWords[0]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int eventDelimiterIndex \u003d command.indexOf(eventDelimiter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int eventDelimiterLength \u003d eventDelimiter.length();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandLength \u003d\u003d \"event\".length()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Empty event command given (e.g. \"event\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" Wrong input format for adding an event... \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \"Format: event [description] /at [event time]\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!command.contains(eventDelimiter)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // No delimiter present (e.g. \"event project meeting Mon 2-4pm\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" Wrong input format for adding an event... \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \"Format: event [description] /at [event time]\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (eventDelimiterIndex + eventDelimiterLength \u003d\u003d commandLength) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Delimiter is at the end of command (e.g. \"event /at\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" Wrong input format for adding an event... \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \"Format: event [description] /at [event time]\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Throws duke.DukeException if deadline command has any invalid parameters."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException for invalid deadline command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void verifyDeadlineInput(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadlineDelimiter \u003d commandDelimiter.get(commandWords[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int deadlineDelimiterIndex \u003d command.indexOf(deadlineDelimiter);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int deadlineDelimiterLength \u003d deadlineDelimiter.length();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandLength \u003d\u003d \"deadline\".length()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Empty deadline command given (e.g. \"deadline\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" The description of a deadline cannot be empty...\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (!command.contains(deadlineDelimiter)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // No due date given (e.g. \"deadline read book\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" No deadline given... Format: deadline [description] /by [due by]\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (deadlineDelimiterIndex + deadlineDelimiterLength \u003d\u003d commandLength) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Delimiter is at the end of command (e.g. \"deadline /by\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(DukeException.exceptionIcon"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    + \" No deadline given... Format: deadline [description] /by [due by]\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the due date information associated with the given command parameter."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param command      string representing user input"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords list of words that make up command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing the due date component of command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String getDueDate(String command, String[] commandWords) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String delimiter \u003d commandDelimiter.get(commandType);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Get first word\u0027s index for deadline"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // 1 additional character is considered for whitespace"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterLength \u003d delimiter.length();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterIndex \u003d command.indexOf(delimiter);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int delimiterStartIndex \u003d delimiterIndex + delimiterLength + 1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return command.substring(delimiterStartIndex);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String representing the description component of a given command parameter."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param command      string representing user input"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param commandWords list of words that make up command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing the description component of command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException command is not in a valid format"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static String getDescription(String command, String[] commandWords) throws DukeException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String.format(\"The description of a %s cannot be empty!\", commandType));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else if (commandType.equals(\"todo\") || commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            description \u003d command.substring(commandType.length() + 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else if (commandType.equals(\"deadline\") || commandType.equals(\"event\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Check if required delimiter exists and there are at least 3 arguments"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (commandDelimiter.containsKey(commandType) \u0026\u0026 commandWords.length \u003e\u003d 4) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String delimiter \u003d commandDelimiter.get(commandType);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                int delimiterIndex \u003d command.indexOf(delimiter);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                int delimiterLength \u003d delimiter.length();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Account for space after command and before delimiter"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                description \u003d command.substring(commandType.length() + 1, delimiterIndex - 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Invalid command format given"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                throw new DukeException(commandTypeFormatInfo.get(commandType));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e setupCommandTypeFormatInfo() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        HashMap\u003cString, String\u003e commandTypeFormatInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"event\", \"Incorrect event format given... Correct format: event \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[description] /at [event time in yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"deadline\", \"Incorrect deadline task format given... Correct \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"format: deadline [description] /by \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[due date in yyyy-mm-dd]\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandTypeFormatInfo.put(\"todo\", \"Incorrect todo task format given... Correct format: todo \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"[description]\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return commandTypeFormatInfo;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private static HashMap\u003cString, String\u003e setupCommandDelimiter() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        HashMap\u003cString, String\u003e commandDelimiter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandDelimiter.put(\"deadline\", \"/by\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        commandDelimiter.put(\"event\", \"/at\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return commandDelimiter;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 245
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Saves files in a directory data under the project root path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String fileSeparator \u003d File.separator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String projectRootPath \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String dataDirectoryPath \u003d projectRootPath + fileSeparator + \"data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String saveFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Storage instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param fileName file used to save user data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        saveFilePath \u003d dataDirectoryPath + fileSeparator + fileName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Setup data directory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        setupDataDirectory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates the required directories for saving user data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void setupDataDirectory() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Create directories along path if they don\u0027t exist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.createDirectories(Paths.get(dataDirectoryPath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates a new save file in the path created and stored by the Storage constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void createSaveFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Create a new file, exception will be thrown if file already exists"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.createFile(Paths.get(saveFilePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // File exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a list of Tasks that represent the tasks saved in the save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return list of Tasks saved in specified save file when the Storage instance is created"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DukeException the given save file could not be loaded"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedReader saveFile \u003d new BufferedReader(new FileReader(saveFilePath))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Load data into tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            String line \u003d saveFile.readLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            /* Format of save file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            [task type],[complete status],[task information]..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Example:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            todo,1,read book"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            deadline,0,return book,June 6th"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            event,0,project meeting,Aug 6th 2-4pm"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                // Store task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String[] taskWords \u003d line.split(\",\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                boolean isDone \u003d taskWords[1].equals(\"1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                String description \u003d taskWords[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                switch (taskWords[0].toLowerCase()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Todo(taskWords[2], isDone));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String deadline \u003d taskWords[3];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Deadline(description, deadline, isDone));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String eventTime \u003d taskWords[3];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    tasks.add(new Event(description, eventTime, isDone));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                line \u003d saveFile.readLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            throw new DukeException(\"Unable to load from given file...\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates the lists of Tasks stored in the save file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of Tasks to be saved"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void updateSaveFile(TaskList tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(saveFilePath))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Write all tasks to file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                writer.write(task.stringToSaveToDisk());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 133
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Deals with user interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String HORIZONTAL_BAR \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static final String INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Accepts user input from stdin."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param inputReader used to read user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing a user command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IOException when BufferedReader fails to read user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String readCommand(BufferedReader inputReader) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        command \u003d inputReader.readLine().trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints given text with indentation: specified in duke.Duke class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text used for formatting and printing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void printTextWithIndentation(String text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.out.println(INDENTATION + text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void greet() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String logo \u003d \"  __  __        _____       _           _   \" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |  \\\\/  |      |  __ \\\\     | |         | |  \" + NEWLINE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | \\\\  / |_ __  | |__) |___ | |__   ___ | |_ \" + NEWLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |\\\\/| | \u0027__| |  _  // _ \\\\| \u0027_ \\\\ / _ \\\\| __|\" + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" | |  | | |    | | \\\\ \\\\ (_) | |_) | (_) | |_ \" + NEWLINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \" |_|  |_|_|    |_|  \\\\_\\\\___/|_.__/ \\\\___/ \\\\__|\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Hello friend. Hello friend?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"That\u0027s lame. Maybe I should give you a name.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"But that\u0027s a slippery slope, you\u0027re only in my head,\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"we have to remember that.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out error when storage data cannot be loaded into program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Unable to load storage data...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out error message for invalid user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void unableToReadUserInput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Unable to read user input...\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out empty command error."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void commandNotFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"404 Not Found... Are you there?\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out all tasks present in given duke.task.TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks for printing task information"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param header contains list information"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void listTasks(TaskList tasks, String header) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(header);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            printTextWithIndentation(\"\" + taskCount + \".\" + task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out exception message given to stdout."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param exception error message to be printed out"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void showExceptionMessage(Exception exception) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(exception.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out newly added task information."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task used for printing information related to task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void printTaskAddition(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add more indentation for task description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"  \" + task.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark a given task as done and print out updated task information."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to mark as done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markTaskAsDone(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(task.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Deletes a given task and prints information about deleted task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to be deleted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void printTaskDeletion(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"  \" + task.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected void goodbye() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(\"Goodbye friend.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        printTextWithIndentation(HORIZONTAL_BAR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 162
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Adds given task as a command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds task given to list, print task information and update save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage to update save file when the task list is changed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskAddition(task, tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents an action to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a delete action for a given task number in list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes task from task list based on given task number, prints out deleted task information and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * updates save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage used to access save file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Task number given starts from 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Task removedTask \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.printTaskDeletion(removedTask, tasks.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            // Invalid task number given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showExceptionMessage(new DukeException(\"Invalid task number given for deletion...\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command marking a given task number in task list as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Marks a given task number in task list as done, prints out task summary."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui used to display information to user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage used to update save file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Task task \u003d tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.markTaskAsDone(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            ui.showExceptionMessage(new DukeException(\"Invalid Task Number given!\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 37
    }
  },
  {
    "path": "src/main/java/duke/command/EmptyInputCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command that has empty user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EmptyInputCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EmptyInputCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Displays command not found message to user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints output to user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages save file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.commandNotFound();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Updates task list in save file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // User request for exit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command used to find a task by searching for a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Finds all tasks in task list with matching keyword in the task description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * and prints out all found tasks to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Find all tasks with description matching keyword"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                matchingTasks.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Print matching tasks using ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(matchingTasks, \"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents a command to list out all tasks in task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Prints out list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param ui prints information to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param storage manages user save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Print out all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(tasks, \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Custom control using FXML. This control represents a dialog box consisting of an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a DialogBox instance representing User\u0027s input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text contains text to be displayed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param img  contains image to be displayed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return DialogBox instance representing user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a flipped DialogBox instance representing Duke\u0027s response."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param text contains text to be displayed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param img  contains image to be displayed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return flipped DialogBox instance"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 76
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Used for Duke GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 13
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 31
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // @FXML annotation marks a private or protected member and makes it accessible"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // to FXML despite its modifier. Without the annotation, we will have to make"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // everything public and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // User icon image obtained from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // https://www.hiclipart.com/free-transparent-background-png-clipart-dlzoi/download"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Image userIcon \u003d new Image("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/user-icon-hiclipart.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Mr Robot: https://www.usanetwork.com/mrrobot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private Image mrRobotIcon \u003d new Image("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/mr-robot-logo.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Get greeting message and display it"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getDukeDialog(greeting(), mrRobotIcon));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String representing the GUI\u0027s greeting message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String used for greeting user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String newline \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return \"Hello friend. Hello friend?\" + newline"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"That\u0027s lame. Maybe I should give you a name.\" + newline"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"But that\u0027s a slippery slope, you\u0027re only in my head,\" + newline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + \"we have to remember that.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getUserDialog(input, userIcon),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                DialogBox.getDukeDialog(response, mrRobotIcon)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represent tasks that need to be done before a specific date/time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g., submit report by 11/10/2019 5pm."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Deadline implements Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, deadline, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Deadline instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description details about Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param deadline due date of Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given deadline is not in a valid date format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Deadline(String description, String deadline, boolean isDone) throws DateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.deadline \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // duke.task.Deadline in yyyy-mm-dd format (e.g. 2020-10-15)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Output in MMM d yyyy e.g. (Oct 15 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [D][✗] return book (by: Oct 15 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                description,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Deadline instance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: deadline,0,return book,2020-06-03"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"deadline,%s,%s,%s\", isDone ? 1 : 0, description,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                deadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 99
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents tasks that start at a specific time and ends at a specific time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g., team project meeting on 2/10/2019 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Event implements Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected LocalDate eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Event(String description, String eventTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, eventTime, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an Event instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description details about Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param eventTime time of Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws DateTimeException given event time is not in a valid date format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Event(String description, String eventTime, boolean isDone) throws DateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.eventTime \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getEventTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // duke.task.Deadline in yyyy-mm-dd format (e.g. 2020-10-15)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Output in MMM d yyyy e.g. (Oct 15 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [E][✗] project meeting (at: Oct 15 2020)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Event instance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: event,0,project meeting,2020-03-12"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"event,%s,%s,%s\", isDone ? 1 : 0, description,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                eventTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 98
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Use to represent functions required for a type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public interface Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String getStatusIcon();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markAsDone();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markAsIncomplete();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String stringToSaveToDisk();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    boolean getTaskCompletionStatus();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 18
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.Spliterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * e.g. it has operations to add/delete tasks in the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Adds given task and returns task addition success status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return task addition success status"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Removes task from list at given index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param index Task number to be removed (zero-based numbering)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Task that was removed at given index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IndexOutOfBoundsException Index given is not a valid list index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Task remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task removedTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the task at a given index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param index For retrieving tasks at specified list position"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return Task obtained at given index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @throws IndexOutOfBoundsException Index given is not a valid list index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns the total number of tasks stored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return The total number of Tasks in list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns an iterator over elements of type {@code Task}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.iterator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void forEach(Consumer\u003c? super Task\u003e action) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.forEach(action);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Spliterator\u003cTask\u003e spliterator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return tasks.spliterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " * Represents tasks without any date/time attached to it e.g. visit new theme park."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class Todo implements Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a new Todo instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param description information about Todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @param isDone completion status of Todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2713\"; // Check mark symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            return \"\\u2718\"; // Cross mark symbol"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: [T][✗] borrow book"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Todo instance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // e.g. format: todo,1,read book"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return String.format(\"todo,%s,%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 81
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" contentDisplay\u003d\"CENTER\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003cFont name\u003d\"Consolas Italic\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 27
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String FILE_SEPARATOR \u003d File.separator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String PROJECT_ROOT_PATH \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String dataDirectoryPath \u003d PROJECT_ROOT_PATH + FILE_SEPARATOR + \"data\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String saveFile \u003d \"test.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_BAR \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_DIVIDER \u003d INDENTATION + HORIZONTAL_BAR + NEWLINE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String taskDoneIcon \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String taskNotDoneIcon \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String exceptionIcon \u003d \"\\u2639\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Duke duke;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    PrintStream console \u003d System.out;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateOneTodoTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of(Arguments.of(new Todo(\"read book\", false)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateOneDeadlineTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of(Arguments.of("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new Deadline(\"return book\", \"2020-12-03\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateOneEventTask() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of(Arguments.of("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new Event(\"project meeting\", \"2020-01-25\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void deleteSaveFile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.deleteIfExists(Paths.get(dataDirectoryPath + FILE_SEPARATOR + saveFile));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Delete any save file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke \u003d new Duke(saveFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change output stream"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void cleanUp() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for invalid command\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_invalidCommand_displayInvalidCommandMessage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"blah\" + NEWLINE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(exceptionIcon + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                exception.getMessage(), \"Should display invalid command message\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for empty delete command\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_deleteCommandWithNoNumber_displayInvalidDeleteCommandMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"delete\" + NEWLINE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(\"Invalid task number given for deletion...\", exception.getMessage(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should display invalid message for empty delete command\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for delete command with invalid task number\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_deleteCommandWithOutOfBoundsTaskNumber_displayInvalidDeleteCommandMessage() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"delete 10\" + NEWLINE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(\"Invalid task number given for deletion...\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                exception.getMessage(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should display invalid message for delete command with invalid task number\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(strings \u003d {\"done\", \"done 10\"})"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_invalidDoneCommand_displayInvalidDoneCommandMessage(String s) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add newline to input string, to ensure command is executed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d  s + NEWLINE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(\"Invalid duke.task.Task Number given!\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                exception.getMessage(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should display invalid message for done command with invalid task number\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for empty duke.task.Todo command\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_emptyTodoCommand_displayInvalidTodoMessage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"todo\" + NEWLINE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(exceptionIcon + \" The description of a todo cannot be empty...\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                exception.getMessage(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should display invalid message for empty todo command\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for deadline command with no arguments\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_emptyDeadlineCommand_displayInvalidDeadlineMessage() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"deadline\" + NEWLINE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(exceptionIcon + \" The description of a deadline cannot be empty...\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                exception.getMessage(), \"Should throw exception for empty deadline command\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for deadline command with missing delimiter\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_missingDeadlineDelimiter_displayInvalidDeadlineMessage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"deadline return book\" + NEWLINE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(\"%s No deadline given... Format: deadline [description] /by \" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[due by]\", exceptionIcon);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedMessage, exception.getMessage(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should throw exception message for deadline command with no due date\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for deadline command with only delimiter\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_onlyDeadlineDelimiterPresent_displayInvalidDeadlineMessage() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"deadline /by\" + NEWLINE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(\"%s No deadline given... Format: deadline [description] /by \" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[due by]\", exceptionIcon);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedMessage, exception.getMessage(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should throw exception message for deadline command with no arguments\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for event command with no arguments\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_emptyEventCommand_displayInvalidEventMessage() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"event\" + NEWLINE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(\"%s Wrong input format for adding an event... Format: event \" +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[description] /at [event time]\", exceptionIcon);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedMessage, exception.getMessage(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should throw exception message for event command with no arguments\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for event command missing delimiter\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_missingEventDelimiterCommand_displayInvalidEventMessage() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"event project meeting Mon 2-4pm\" + NEWLINE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(\"%s Wrong input format for adding an event... Format: event \" +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[description] /at [event time]\", exceptionIcon);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedMessage, exception.getMessage(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should throw exception message for event command with no arguments\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for event command with only delimiter\")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void dukeException_onlyEventDelimiterPresent_displayInvalidEventMessage() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"event /at\" + NEWLINE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                () -\u003e duke.run(new BufferedReader("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        new InputStreamReader(new ByteArrayInputStream(input.getBytes())))));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check exception message"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedMessage \u003d String.format(\"%s Wrong input format for adding an event... Format: event \" +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[description] /at [event time]\", exceptionIcon);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expectedMessage, exception.getMessage(),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should throw exception message for event command with no arguments\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneEventTask\")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for adding one event task\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_addEventTask_addEventTaskToList(Event task) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String delimiter \u003d \"/at\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String eventTime \u003d task.getEventTime().format(dateTimeFormatter);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d String.format(\"event %s %s %s\", eventDescription, delimiter,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                task.getEventTime().toString());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        input +\u003d NEWLINE + \"bye\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedEventDescription \u003d \"  \" + String.format(\"[E][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                taskNotDoneIcon, eventDescription, eventTime);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + \"Got it. I\u0027ve added this task:\" + NEWLINE +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + expectedEventDescription + NEWLINE +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + \"Now you have 1 tasks in the list.\" + NEWLINE +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString(), \"Should add event task to list\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task has been added to list"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, duke.tasks.size(), \"Tasks list should have one more item\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(eventDescription, duke.tasks.get(0).getDescription(),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"duke.task.Event description should match\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneDeadlineTask\")"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for adding one deadline task\")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_addDeadlineTask_addDeadlineTaskToList(Deadline task) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String delimiter \u003d \"/by\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadlineDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String deadline \u003d task.getDeadline().format(dateTimeFormatter);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d String.format(\"deadline %s %s %s\", deadlineDescription,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                delimiter, task.getDeadline().toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        input +\u003d NEWLINE + \"bye\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedDeadlineDescription \u003d \"  \" + String.format(\"[D][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                taskNotDoneIcon, deadlineDescription, deadline);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + \"Got it. I\u0027ve added this task:\" + NEWLINE +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + expectedDeadlineDescription + NEWLINE +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                INDENTATION + \"Now you have 1 tasks in the list.\" + NEWLINE +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task has been added to list"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(1, duke.tasks.size(), \"Should increase task list size by one\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check task description"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(deadlineDescription, duke.tasks.get(0).getDescription(),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"duke.task.Task description should match\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for Immediate exit command\")"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_exitCommand_noMessagePrinted() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"bye\" + NEWLINE;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d \"\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString(),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Immediate exit: No output should be present\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneTodoTask\")"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for delete command\")"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_deleteCommand_removeItemFromList(Task task) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"todo \" + task.getDescription() + NEWLINE +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"delete 1\" + NEWLINE +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"list\" + NEWLINE + \"bye\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add task"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION).append(\"Got it. I\u0027ve added this task:\").append(NEWLINE)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(String.format(\"  [T][%s] %s\", taskNotDoneIcon, task.getDescription()))"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(NEWLINE)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION).append(\"Now you have 1 tasks in the list.\").append(NEWLINE)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Delete task"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION).append(\"Noted. I\u0027ve removed this task:\").append(NEWLINE)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(String.format(\"  [T][%s] %s\", taskNotDoneIcon, task.getDescription()))"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(NEWLINE)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION).append(\"Now you have 0 tasks in the list.\").append(NEWLINE)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // List out tasks (Should be empty)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(INDENTATION).append(\"Here are the tasks in your list:\").append(NEWLINE)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString(), \"duke.task.Task should be deleted\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for list command\")"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_listCommand_listStoredItems() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d \"todo read book\" + NEWLINE +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"todo return book\" + NEWLINE +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"list\" + NEWLINE + \"bye\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add first task"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String firstTaskDescription \u003d \"  \" + String.format(\"[T][%s] read book\", taskNotDoneIcon);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Got it. I\u0027ve added this task:\").append(NEWLINE);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(firstTaskDescription).append(NEWLINE);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Now you have 1 tasks in the list.\").append(NEWLINE);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add second task"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String secondTaskDescription \u003d \"  \" + String.format(\"[T][%s] return book\", taskNotDoneIcon);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Got it. I\u0027ve added this task:\").append(NEWLINE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(secondTaskDescription).append(NEWLINE);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Now you have 2 tasks in the list.\").append(NEWLINE);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // List out tasks"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Here are the tasks in your list:\").append(NEWLINE);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"1.[T][\").append(taskNotDoneIcon).append(\"] \")"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(\"read book\").append(NEWLINE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"2.[T][\").append(taskNotDoneIcon).append(\"] \")"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                .append(\"return book\").append(NEWLINE);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString(),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"Should list out tasks in correct format\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for marking todo task as done\")"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneTodoTask\")"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void processCommands_createNewTodoTaskAndMarkAsDone_todoTaskMarkedDone(Todo task) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String taskCommand \u003d \"todo \" + taskDescription;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String input \u003d taskCommand + NEWLINE +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"list\" + NEWLINE +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"done 1\" + NEWLINE +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"list\" + NEWLINE + \"bye\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        duke.run(new BufferedReader("
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                new InputStreamReader(new ByteArrayInputStream(input.getBytes()))));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Add task"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedTaskDescription \u003d String.format(\"[T][%s] %s\", taskNotDoneIcon, taskDescription);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Got it. I\u0027ve added this task:\").append(NEWLINE);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"  \").append(expectedTaskDescription).append(NEWLINE);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Now you have 1 tasks in the list.\").append(NEWLINE);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // List initial task (Should be marked as not done)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Here are the tasks in your list:\").append(NEWLINE);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\"1.\").append(expectedTaskDescription).append(NEWLINE);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Mark task as done"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expectedTaskDoneString \u003d String.format(\"[T][%s] %s\", taskDoneIcon, taskDescription);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Nice! I\u0027ve marked this task as done:\").append(NEWLINE);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(expectedTaskDoneString).append(NEWLINE);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // List task again (Should be marked as done)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Here are the tasks in your list:\").append(NEWLINE);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\"1.\").append(expectedTaskDoneString).append(NEWLINE);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString(), \"Should mark new task as done\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 429
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.DeadlineStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.EventStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TodoStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static final String doneStatusIcon \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static final String incompleteStatusIcon \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String INDENTATION \u003d Ui.INDENTATION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_BAR \u003d Ui.HORIZONTAL_BAR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String NEWLINE \u003d Ui.NEWLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_DIVIDER \u003d INDENTATION + HORIZONTAL_BAR + NEWLINE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateAllTaskTypes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new EventStub(\"Birthday Party\", \"2020-01-01\", false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Birthday Party,2020-01-01\", doneStatusIcon,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 1 2020)\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DeadlineStub(\"Finish Coding Project\", \"2020-01-27\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        false, \"deadline,0,2020-01-27\", doneStatusIcon,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[D][\" + incompleteStatusIcon + \"] Finish Coding Project (by: 2020-01-27)\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateAllTaskTypesWithZeroTotalTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Generates a stream of [Task] [task count]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // [task count] is 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\"), 0),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new EventStub(\"Birthday Party\", \"2020-01-01\", false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Birthday Party,2020-01-01\", doneStatusIcon,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 1 2020)\"), 0),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DeadlineStub(\"Finish Coding Project\", \"2020-01-27\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        false, \"deadline,0,Finish Coding Project,2020-01-27\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[D][\" + incompleteStatusIcon + \"] Finish Coding Project (by: Jan 27 2020)\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateDukeExceptions() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"Invalid Task Number given!\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"Invalid task number given for deletion...\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new DukeException(\"\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateOneTaskList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new TodoStub(\"Read book\", false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"todo,0,Read book\", doneStatusIcon,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                incompleteStatusIcon, \"[T][\" + incompleteStatusIcon + \"] Read book\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new EventStub(\"Chinese New Year\", \"2020-01-25\", false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"event,0,Chinese New Year,2020-01-25\", doneStatusIcon,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        incompleteStatusIcon,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        \"[E][\" + incompleteStatusIcon + \"] Birthday Party \" + \"(at: Jan 25 2020)\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        tasks.add(new DeadlineStub(\"Finish project\", \"2020-04-20\", false,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"deadline,0,Finish project,2020-04-20\", doneStatusIcon, incompleteStatusIcon,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                \"[D][\" + incompleteStatusIcon + \"] Finish project (by: Apr 20 2020)\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(new TaskList(tasks))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ValueSource(strings \u003d {\"\", \"test\", \"    \"})"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTextWithIndentation(String s) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d INDENTATION + s + NEWLINE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTextWithIndentation(s);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Ui: Test for Greeting message\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\"  __  __        _____       _           _   \").append(NEWLINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" |  \\\\/  |      |  __ \\\\     | |         | |  \").append(NEWLINE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | \\\\  / |_ __  | |__) |___ | |__   ___ | |_ \").append(NEWLINE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | |\\\\/| | \u0027__| |  _  // _ \\\\| \u0027_ \\\\ / _ \\\\| __|\").append(NEWLINE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" | |  | | |    | | \\\\ \\\\ (_) | |_) | (_) | |_ \").append(NEWLINE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(\" |_|  |_|_|    |_|  \\\\_\\\\___/|_.__/ \\\\___/ \\\\__|\").append(NEWLINE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"Hello friend. Hello friend?\").append(NEWLINE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"That\u0027s lame. Maybe I should give you a name.\").append(NEWLINE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"But that\u0027s a slippery slope, you\u0027re only in my head,\").append(NEWLINE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(INDENTATION).append(\"we have to remember that.\").append(NEWLINE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString(), \"Should display greeting message\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void showLoadingError() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Unable to load storage data...\" + NEWLINE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.showLoadingError();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void unableToReadUserInput() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Unable to read user input...\" + NEWLINE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.unableToReadUserInput();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void commandNotFound() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"404 Not Found... Are you there?\" + NEWLINE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.commandNotFound();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateOneTaskList\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void listTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String listHeaderInformation \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        StringBuilder expected \u003d new StringBuilder(HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + listHeaderInformation + NEWLINE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            expected.append(INDENTATION)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .append(taskCount).append(\".\").append(task.toString())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    .append(NEWLINE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        expected.append(HORIZONTAL_DIVIDER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute test function"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.listTasks(tasks, listHeaderInformation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected.toString(), output.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateDukeExceptions\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void showExceptionMessage_dukeException(Exception exception) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.showExceptionMessage(exception);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + exception.getMessage() + NEWLINE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTaskAddition_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String taskInfo \u003d task.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Got it. I\u0027ve added this task:\" + NEWLINE"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"  \" + taskInfo + NEWLINE"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Now you have \" + totalTasks + \" tasks in the list.\" + NEWLINE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute function for testing"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskAddition(task, totalTasks);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markTaskAsDone_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task is initially marked as undone"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Mark task as done"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check if task has been marked as done"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypes\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void markTaskAsDone(Task task) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertFalse(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertTrue(task.getTaskCompletionStatus());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateAllTaskTypesWithZeroTotalTasks\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void printTaskDeletion_allTaskTypes(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Noted. I\u0027ve removed this task:\" + NEWLINE"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"  \" + task.toString() + NEWLINE"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Now you have \" + totalTasks + \" tasks in the list.\" + NEWLINE"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.printTaskDeletion(task, totalTasks);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @DisplayName(\"duke.Duke: Test for Goodbye message\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void goodbye() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        String expected \u003d HORIZONTAL_DIVIDER"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + INDENTATION + \"Goodbye friend.\" + NEWLINE"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                + HORIZONTAL_DIVIDER;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(expected, output.toString(), \"Should print goodbye message\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 239
    }
  },
  {
    "path": "src/test/java/duke/command/AddTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.Arguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import org.junit.jupiter.params.provider.MethodSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "class AddTaskCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ByteArrayOutputStream output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String saveFile \u003d \"test.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String FILE_SEPARATOR \u003d File.separator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // Map project path to the directory from which you run your program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String PROJECT_ROOT_PATH \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String dataDirectoryPath \u003d PROJECT_ROOT_PATH + FILE_SEPARATOR + \"data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    String saveFilePath \u003d dataDirectoryPath + FILE_SEPARATOR + saveFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    // String formatting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String INDENTATION \u003d Ui.INDENTATION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_BAR \u003d Ui.HORIZONTAL_BAR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String NEWLINE \u003d Ui.NEWLINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    final String HORIZONTAL_DIVIDER \u003d INDENTATION + HORIZONTAL_BAR + NEWLINE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    static Stream\u003cArguments\u003e generateEmptyState() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Task task \u003d new Todo(\"Read book\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return Stream.of("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                Arguments.of(task, tasks));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void deleteSaveFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            Files.deleteIfExists(Paths.get(dataDirectoryPath + FILE_SEPARATOR + saveFile));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        storage \u003d new Storage(saveFile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Delete save file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        deleteSaveFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @MethodSource(\"generateEmptyState\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    void execute(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        int tasksCount \u003d tasks.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Execute function for testing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        Command command \u003d new AddTaskCommand(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check addition of task is successful"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(task.getDescription(), tasks.get(tasksCount).getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        assertEquals(tasksCount + 1, tasks.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Check save file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        try (BufferedReader reader \u003d new BufferedReader(new FileReader(saveFilePath))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            assertEquals(task.stringToSaveToDisk(), reader.readLine());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not open save file\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "            fail(\"Could not read save file\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 86
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class DeadlineStub extends Deadline {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public DeadlineStub(String description, String deadline, boolean isDone,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        String stringToSaveToDisk, String doneStatusIcon, String incompleteStatusIcon,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                        String toString) throws DateTimeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, deadline, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Deadline instance"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 81
    }
  },
  {
    "path": "src/test/java/duke/task/EventStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class EventStub extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public EventStub(String description, String eventTime, boolean isDone,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     String stringToSaveToDisk, String doneStatusIcon, String incompleteStatusIcon,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                     String toString) throws DateTimeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, eventTime, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public LocalDate getEventTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Event instance"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 81
    }
  },
  {
    "path": "src/test/java/duke/task/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "public class TodoStub extends Todo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String stringToSaveToDisk;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String statusIcon;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String doneStatusIcon;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String incompleteStatusIcon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    protected String toString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public TodoStub(String description, boolean isDone,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String stringToSaveToDisk, String doneStatusIcon,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "                    String incompleteStatusIcon, String toString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.stringToSaveToDisk \u003d stringToSaveToDisk;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.doneStatusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.incompleteStatusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d isDone ? doneStatusIcon : incompleteStatusIcon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.toString \u003d toString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        // Change Status Icon to done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d doneStatusIcon;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Mark task as incomplete."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public void markAsIncomplete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        this.statusIcon \u003d incompleteStatusIcon;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * Returns a String (Unicode Character) based on duke.task.Task completion status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing Unicode character for check mark or cross"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return statusIcon;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return toString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * To return a String representation of duke.task.Todo instance"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     * @return String representing task in save file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public String stringToSaveToDisk() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return stringToSaveToDisk;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    public boolean getTaskCompletionStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 74
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "      [T][✗] borrow book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    1.[T][✗] borrow book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 22
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Deadline.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Event.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Task.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.CommandType.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoh"
        },
        "content": "C:\\Users\\jerem\\Desktop\\NUS_CS\\Y2_Sem2\\CS2103T\\duke\\src\\main\\java\\duke.task.Todo.java"
      }
    ],
    "authorContributionMap": {
      "JeremyLoh": 6
    }
  }
]
