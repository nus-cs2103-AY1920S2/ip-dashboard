[
  {
    "path": "DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 61
    }
  },
  {
    "path": "Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 32
    }
  },
  {
    "path": "MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 51
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d  System.in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 39,
      "-": 21
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "T | ? | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "D | ? | return book | Feb 21 2020 4PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "E | ? | project meeting | Apr 13 2020 6PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "D | ? | do homework | Oct 29 2020 12PM"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "T | ? | borrow book"
      }
    ],
    "authorContributionMap": {
      "fatin99": 5
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Gets users dialog."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param text the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param img DaUser.png"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Gets Duke\u0027s dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param text Duke\u0027s output"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param img DaDuke.png"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 75
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Contains the main function to run the programme."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image user \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image duke \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Runs the programme."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param args arguments"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException if the command cannot be parsed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws IOException if the file cannot be updated"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ui.dukePrint(ui.start());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        storage \u003d new Storage(\"duke.txt\", taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            storage.retrieveInfo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            ui.dukePrint(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        while (!command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            ui.dukePrint(parser.parse(command));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ui.dukePrint(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        storage.updateInfo();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void start(Stage stage) throws InterruptedException, IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String dukeText \u003d (ui.start()); //system.out"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        storage \u003d new Storage(\"duke.txt\", taskList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            storage.retrieveInfo();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            output \u003d (\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            dukeText \u003d (output);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                handleUserInput(stage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                handleUserInput(stage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .setVvalue(1.0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * container."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * containing Duke\u0027s reply and then appends them to the dialog container."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private void handleUserInput(Stage stage) throws InterruptedException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String userText \u003d (userInput.getText());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String dukeText \u003d (getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getUserDialog(userText, (user)),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, (duke))"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            TimeUnit.SECONDS.sleep(1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param command the user input"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return Duke\u0027s response"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    String getResponse(String command) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                storage.updateInfo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return (\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return (\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return parser.parse(command); //get strings from system.out"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return (\"OOPS!!! \" + e.getMessage() + \"\\n\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 233,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 52
    }
  },
  {
    "path": "src/main/java/duke/commands/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The formatter used to parse user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final DateTimeFormatter PARSER \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .ofPattern(\"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The formatter used for the file data format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .ofPattern(\"MMM d yyyy ha\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a new Ui object to access functions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The Tasklist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a new Parser object and gets Tasklist from Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param taskList the TaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Scans user input until a bye command is reached. parses each line"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * entered in by the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return Duke\u0027s response to user command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException if the command cannot be parsed properly"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return taskList.list();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            ui.checkCommand(command, \"done\", taskList.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return taskList.done(Integer.valueOf(command.split(\" \")[1]) - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            ui.checkCommand(command, \"delete\", taskList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return taskList.delete(Integer.valueOf(command.split(\" \")[1]) - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            String[] arr \u003d command.split(\"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            String[] description \u003d (arr[0].split(\" \", 2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkDescription(description, \"todo\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return taskList.add(new ToDo(description[1]), true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkDescription(description, \"deadline\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkTime(arr, \"deadline\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return taskList.add(new Deadline(description[1],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        arr[1].split(\" \", 2)[1], PARSER), true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkDescription(description, \"event\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkTime(arr, \"event\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return taskList.add(new Event(description[1],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        arr[1].split(\" \", 2)[1], PARSER), true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return taskList.find(description[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (command.startsWith(\"update\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkUpdate(command, taskList.size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                ui.checkTime(arr, \"update\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return taskList.update(Integer.valueOf(command.split(\" \")[1]) - 1,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        arr[1].split(\" \", 2)[1], PARSER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + \"what that means :-(\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 99
    }
  },
  {
    "path": "src/main/java/duke/commands/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static duke.commands.Parser.FORMATTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The path where duke.txt is located."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a new Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param filePath the path to the duke.txt file where previous user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *                 has been stored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param taskList the TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Storage(String filePath, TaskList taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final int DESC \u003d 2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final int TIME \u003d 3;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Retrieves all the tasks entered previously by the user from duke.txt and"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * adds them to the TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void retrieveInfo() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        File data \u003d new File(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!data.exists()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            data.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Scanner scanner \u003d new Scanner(data);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            String[] arr  \u003d scanner.nextLine().split(\"[|]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if  (arr[0].trim().equals(\"T\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                newTask \u003d new ToDo(arr[DESC].trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (arr[0].trim().equals(\"D\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                newTask \u003d new Deadline(arr[DESC].trim(), arr[TIME].trim(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        FORMATTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else if (arr[0].trim().equals(\"E\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                newTask \u003d new Event(arr[DESC].trim(), arr[TIME].trim(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        FORMATTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (arr[1].trim().equals(\"Y\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                newTask.markAsDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            taskList.add(newTask, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            assert newTask !\u003d null : \"No task to retrieve\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            assert newTask.getDescription() !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    : \"No description for this task\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Stores all the tasks the user has entered into the Tasklist in duke.txt."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws IOException if the file cannot be written"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public  void  updateInfo() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String  fileString \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            fileString +\u003d taskList.get(i).fileString() + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            assert taskList.get(i) !\u003d null : \"No task to update\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            assert taskList.get(i).getDescription() !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    : \"No description for this task\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        new File(filePath).createNewFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        fw.write(fileString);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 100
    }
  },
  {
    "path": "src/main/java/duke/commands/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": " *  Contains the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The list containing all the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ArrayList\u003cTask\u003e newList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Lists out all the tasks currently available in the Tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"list\" command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (newList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            output +\u003d (\"You currently have no tasks in your list\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            output +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            for (int i \u003d 0; i \u003c newList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                output +\u003d ((i + 1) + \". \" + newList.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                assert newList.get(i) !\u003d null : \"No task to list out\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                assert newList.get(i).getDescription() !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        : \"No description for this task\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param index the index of the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"done\" command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String done(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.size() \u003e 0 : \"No tasks in list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        newList.get(index).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index) !\u003d null : \"No task to mark as done\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index).getDescription() !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this task\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + newList.get(index).toString() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Deletes the specified task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param index the index of the task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"delete\" command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String delete(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.size() \u003e 0 : \"No tasks in list\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index) !\u003d null : \"No task to delete\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index).getDescription() !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this task\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Task task \u003d newList.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        newList.remove(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + \"Now you have \" + newList.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Add a new task to the Tasklist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param newTask the new task to be added"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param print whether to print out the notification that the task has been"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *              added or not"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"add\" command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String add(Task newTask, boolean print) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        newList.add(newTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newTask !\u003d null : \"No task to add\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newTask.getDescription() !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this task\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (print) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return (\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + newTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \"Now you have \" + newList.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the total number of tasks in Tasklist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return the current number of tasks in the Tasklist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return newList.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Retrieve a specific Task from the Tasklist."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param index the index of the Task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return the Task that was specified"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index) !\u003d null : \"No task to get\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert newList.get(index).getDescription() !\u003d null"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this task\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return newList.get(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns a list of tasks that contain the patterns string in their"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param pattern the pattern to find"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"find\" command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String find(String pattern) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (newList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return (\"You currently have no tasks in your list\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            for (int i \u003d 0; i \u003c newList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                if (newList.get(i).toString().contains(pattern)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        || newList.get(i).fileString().contains(pattern)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    output +\u003d ((i + 1) + \". \" + newList.get(i).toString()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                            + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return (\"There are no matching tasks in your list\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                return \"Here are the matching tasks in your list:\\n\" + output;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates the timing of a deadline or an event."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param index the index of the task to update"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param time the new timing"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format of the parser"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return response to \"update\" command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String update(int index, String time, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Task task \u003d newList.get(index);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        task.update(time, format);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return (\"Noted. I\u0027ve updated this task:\\n\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 166
    }
  },
  {
    "path": "src/main/java/duke/commands/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " *  Deals with interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The DUKE logo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * lines to separate user input and programme output."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String HORIZONTAL_LINES \u003d \"__________________________\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Says hi to the user and includes the logo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return Duke\u0027s introduction"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String start() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String output \u003d \"Hello from\\n\" + LOGO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        output +\u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Used to print out horizontal lines."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return outputs horizontal lines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String horizontalLines() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this.HORIZONTAL_LINES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Prints output in a more user friendly format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param input the string to be outputted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void dukePrint(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        System.out.print(horizontalLines());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        System.out.print(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        System.out.print(horizontalLines());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Checks whether done/delete command entered by used is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param command the line input by the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param insert the name of the command (either done or delete)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param listSize the current size of Tasklist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException throws an exception if the command is invalid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void checkCommand(String command, String insert,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                             int listSize) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String[] arr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"The task to be marked as \" + insert"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \" must be specified\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (Integer.valueOf(arr[1]) - 1 \u003e\u003d listSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"Task \" + arr[1] + \" does not exist\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Checks if the description for the task entered by the user is valid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param description the input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param insert the type of task (either todo, deadline or event)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException throws an exception is the command is invalid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void checkDescription(String[] description, String insert)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (description.length \u003c 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"The description of a \" + insert"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \" cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Checks if the time for the task entered by the user is valid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param arr the input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param insert the type of task (either deadline or event)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException throws an exception is the command is invalid"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void checkTime(String[] arr, String insert)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"The time of a \" + insert"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \" cannot be empty.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String[] time \u003d (arr[1].split(\" \", 2));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (time.length \u003c 2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"The time of a \" + insert"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \" cannot be empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Checks whether done/delete command entered by used is valid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param command the line input by the user"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param listSize the current size of Tasklist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws DukeException throws an exception if the command is invalid"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void checkUpdate(String command, int listSize) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String[] arr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        int testIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            testIndex \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"The task to be updated must be specified\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (testIndex \u003e\u003d listSize) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DukeException(\"Task \" + arr[1] + \" does not exist\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 129
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Throws exception specifically to duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Creates a new DukeException containing a specific error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param message the error message to be printed out"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert message !\u003d null : \"No error message to print out\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 17
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static duke.commands.Parser.FORMATTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Deadlines: tasks that need to be done before a specific date/time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * e.g., submit report by 11/10/2019 5pm."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * the time for this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * creates a new Deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param description the description of the deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param by the time of the deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format to be used to parse this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Deadline(String description, String by, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, format);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert by !\u003d null : \"No timing for this deadline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates the timing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param by the new timing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format to be used to parse this"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void update(String by, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, format);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns output string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String to be output to the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this deadline\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.by !\u003d null : \"No timing for this deadline\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(FORMATTER) + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns file data string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String for the file format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                : \"No description for this deadline\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.by !\u003d null : \"No timing for this deadline\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"D | \" + this.getStatusIcon() + \" | \" + getDescription() + \" | \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + by.format(FORMATTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 69
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static duke.commands.Parser.FORMATTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Events: tasks that start at a specific time and ends at a specific time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * e.g., team project meeting on 2/10/2019 2-4pm."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * the time for this event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * creates a new Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param at the time of the event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format to be used to parse this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Event(String description, String at, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, format);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert at !\u003d null : \"No timing for this event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates the timing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param at the new timing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format to be used to parse this"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void update(String at, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, format);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns output string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String to be output to the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null : \"No description for this event\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.at !\u003d null : \"No timing for this event\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(FORMATTER) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns file data string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String for the file format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null : \"No description for this event\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.at !\u003d null : \"No timing for this event\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"E | \" + this.getStatusIcon() + \" | \" + getDescription() + \" | \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + at.format(FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 67
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * The class that all the tasks inherit from."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * the description for this task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * whether the task has been completed or not."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * creates a new Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this task\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns the status icon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return Y or N depending on whether isDone is true or false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or cross symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //return (isDone ? \"Y\" : \"N\"); //return Y or N symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * changes isDone to true."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns output string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String to be output to the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this task\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns file data string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String for the file format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public abstract String fileString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *returns the description of this task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this task\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates the timing of a deadline or an event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param time the new timing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param format the format to be used to parse this"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public abstract void update(String time, DateTimeFormatter format);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 82
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * ToDos: tasks without any date/time attached to it e.g., visit new theme park."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * creates a new ToDo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param description the description of the todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert description !\u003d null : \"No description for this todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns the output string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String to be output to the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null : \"No description for this todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * returns the file data string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @return String for the file format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assert this.getDescription() !\u003d null : \"No description for this todo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return \"T | \" + this.getStatusIcon() + \" | \" + this.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void update(String time, DateTimeFormatter format) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        //this method is unused because a todo doesnt have a timing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 46
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" graphicTextGap\u003d\"10.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that output string is correct."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\", \"28-1-2020 1200\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                Parser.PARSER);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"[D][N] test (by: Jan 28 2020 12PM)\", deadline.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that file data string is correct."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void fileStringTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\", \"28-1-2020 1200\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                Parser.PARSER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"D | N | test | Jan 28 2020 12PM\", deadline.fileString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 26
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that output string is correct."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Event event \u003d new Event(\"test\", \"28-1-2020 1200\", Parser.PARSER);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"[E][N] test (at: Jan 28 2020 12PM)\", event.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that file data string is correct."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void fileStringTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Event event \u003d new Event(\"test\", \"28-1-2020 1200\", Parser.PARSER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"E | N | test | Jan 28 2020 12PM\", event.fileString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 24
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.commands.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * check that add() and size() in TaskList works correctly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void addAndSizeTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.add(new ToDo(\"borrow book\"), false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.add(new ToDo(\"return book\"), false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * check that done(), delete() and get() in TaskList works correctly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void doneAndDeleteAndGetTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.add(new ToDo(\"borrow book\"), false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.add(new ToDo(\"return book\"), false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.delete(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taskList.done(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"[T][Y] return book\", taskList.get(0).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 30
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that output string is correct."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ToDo todo \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"[T][N] test\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * test that file data string is correct."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void fileStringTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ToDo todo \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(\"T | N | test\", todo.fileString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 23
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "fatin99": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "fatin99": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "fatin99": 22
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "then"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "else"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "fatin99": 33
    }
  }
]
